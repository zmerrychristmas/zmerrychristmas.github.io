<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://zmerrychristmas.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://zmerrychristmas.github.io/" rel="alternate" type="text/html" hreflang="en-US" /><updated>2024-02-04T20:50:02+07:00</updated><id>https://zmerrychristmas.github.io/feed.xml</id><title type="html">Programmer From Zero To Mountaint</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle><author><name>Leo đẹp trai</name></author><entry><title type="html">AWS Api gateway, Lambda, Serverless, and Services part I</title><link href="https://zmerrychristmas.github.io/posts/aws-api-gateway-lambda-serverless-and-services/" rel="alternate" type="text/html" title="AWS Api gateway, Lambda, Serverless, and Services part I" /><published>2022-12-05T00:00:00+07:00</published><updated>2022-12-10T16:28:10+07:00</updated><id>https://zmerrychristmas.github.io/posts/aws-api-gateway-lambda-serverless-and-services</id><content type="html" xml:base="https://zmerrychristmas.github.io/posts/aws-api-gateway-lambda-serverless-and-services/"><![CDATA[<h1 id="aws-api-gateway">AWS API Gateway</h1>
<ul>
  <li>AWS Lambda + API Gateway: No infrastructure to manage</li>
  <li>Support for the WebSocket Protocol</li>
  <li>Handle API versioning (v1, v2…)</li>
  <li>Handle different environments (dev, test, prod…)</li>
  <li>Handle security (Authentication and Authorization)</li>
  <li>Create API keys, handle request throttling</li>
  <li>Swagger / Open API import to quickly define APIs</li>
  <li>Transform and validate requests and responses</li>
  <li>Generate SDK and API specifications</li>
  <li>Cache API responses</li>
</ul>

<h2 id="api-gateway--integrations-high-level">API Gateway – Integrations High Level</h2>
<ul>
  <li>Lambda Function
    <ul>
      <li>Invoke Lambda function</li>
      <li>Easy way to expose REST API backed by AWS Lambda</li>
    </ul>
  </li>
  <li>HTTP
    <ul>
      <li>Expose HTTP endpoint in the backend</li>
      <li>Example: internal HTTP API on premise, Application Load Balancer…</li>
      <li>Why? Add rate limiting, caching, user authentications, API keys, etc…</li>
    </ul>
  </li>
  <li>AWS Service
    <ul>
      <li>Expose any AWS API through the API Gateway?</li>
      <li>Example: start an AWS Step Function workflow, post a message to SQS</li>
      <li>Why? Add authentication, deploy publicly, rate control…</li>
    </ul>
  </li>
</ul>

<h2 id="api-gateway---endpoint-types">API Gateway - Endpoint Types</h2>
<ul>
  <li>Edge-Optimized (default): For global clients
    <ul>
      <li>Requests are routed through the CloudFront Edge locations (improves latency)</li>
      <li>The API Gateway still lives in nly one region</li>
    </ul>
  </li>
  <li>Regional:
    <ul>
      <li>For client within the same region</li>
      <li>Cloud manually combine with CloudFront (more control over the caching strategies and the distribution)</li>
    </ul>
  </li>
  <li>Private:
    <ul>
      <li>Can only be accessed from your VPC using an interface VPC endpint (ENI)</li>
      <li>Use a resource policy to define access</li>
    </ul>
  </li>
</ul>

<h2 id="api-gateway--security-iam-permissions">API Gateway – Security: IAM Permissions</h2>
<ul>
  <li>Create an IAM policy <strong>authorization</strong> and attach to User / Role</li>
  <li>API Gateway verifies IAM permissions passed by the calling application</li>
  <li>Good to provide access within your own infrastructure</li>
  <li>Leverages “Sig v4” capability where IAM credential are in headers</li>
</ul>

<h2 id="api-gateway--security-lambda-authorizer-formerly-custom-authorizers">API Gateway – Security: Lambda Authorizer (formerly Custom Authorizers)</h2>
<ul>
  <li>Uses AWS Lambda to <strong>validate</strong> the token in header being passed</li>
  <li>Option to <strong>cache</strong> result of authentication</li>
  <li>Help to use Oauth / SAML / 3rd party type of authentication</li>
  <li>Lambda must return an IAM policy for the user
<img src="https://ibb.co/rsGNsWJ" alt="Sample" title="title" /></li>
</ul>

<h2 id="api-gateway--security-cognito-user-pools">API Gateway – Security: Cognito User Pools</h2>
<ul>
  <li>Cognito fully manages user <strong>lifecycle</strong></li>
  <li>API gateway verifies identity <strong>automatically</strong> from AWS Cognito</li>
  <li>No custom implementation required</li>
  <li>Cognito only helps with authentication, not authorization
<img src="https://ibb.co/Y7ZSyRF" alt="" title="cognito user pools" /></li>
</ul>

<h2 id="api-gateway--security--summary">API Gateway – Security – Summary</h2>
<ol>
  <li>IAM
    <ul>
      <li>Greate for users/ roles already within your AWS account</li>
      <li>Handle authentication + authorization</li>
      <li>Leverages Sig v4</li>
    </ul>
  </li>
  <li>Custom Authorizer:
    <ul>
      <li>Greate for 3rd party tokens</li>
      <li>Very flexible in terms of what IAM policy is returned</li>
      <li>Handle Authentication + Authorization</li>
      <li>Pay per Lambda invocation</li>
    </ul>
  </li>
  <li>Cognito User Pool
    <ul>
      <li>you manage your user pool (can be backed by Facebookm Google login etc…)</li>
      <li>No need to write any custom code</li>
      <li>Must implement authorization in the backend</li>
    </ul>
  </li>
</ol>

<h1 id="aws-integration--messaginng">AWS Integration &amp; Messaginng</h1>
<p>SQS, SNS &amp; Kinesis</p>
<ul>
  <li>When we start deploying multiple applications, they will inevitably need to communicate with one another</li>
  <li>There are two patterns of application communication
    <ul>
      <li>Synchromous communication (app to app)</li>
      <li>Asynchronous / Evenbased (app to queue to app)</li>
    </ul>
  </li>
</ul>

<h2 id="introdution">Introdution</h2>
<ul>
  <li>Synchronnous between applications can be problematic if there are sudden spikes of traffic</li>
  <li>What if you need to suddenly encode 1000 videos but usually it’s 10?</li>
  <li>in that case, it better to decouple your applications,
    <ul>
      <li>SQS: queue model</li>
      <li>SNS: pub/sub model</li>
      <li>Kinesis: real-time streaming model</li>
    </ul>
  </li>
  <li>These services can scale independently from our application!</li>
</ul>

<h2 id="amazon-sqs-whats-a-queue">Amazon SQS, What’s a queue?</h2>
<p><img src="https://data.terabox.com/thumbnail/e19ff69d211fc1e51950db00c82dca33?fid=4401547290288-250528-572541249214972&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-LxKWvtxa2erWuhJObtVehWte5ts%3d&amp;expires=8h&amp;chkbd=0&amp;chkv=0&amp;dp-logid=100591921571805435&amp;dp-callid=0&amp;time=1667109600&amp;size=c1680_u1050&amp;quality=90&amp;vuk=4401547290288&amp;ft=image&amp;autopolicy=1" alt="" /></p>

<h2 id="sqs---standard-queue">SQS - Standard queue</h2>
<ul>
  <li>Oldest offering (over 10 years old)</li>
  <li>Fully managed service, used to decouple applications</li>
  <li>Attributes:
    <ul>
      <li>unlimited throughput, unlimited number of messages in queue</li>
      <li>Default retention of message: 4 days, maxximum of 14 days</li>
      <li>Low latenccy (&lt; 10ms on publish and receive)</li>
      <li>Limitation of 256kb per message sent</li>
    </ul>
  </li>
  <li>Can have duplicate messages (at least once delivery, occasionally)</li>
  <li>Can have out of order messages (best effort ordering)</li>
</ul>

<h2 id="sqs---product-messages">SQS - product messages</h2>
<ul>
  <li>Produced to SQS using the SDK (SendMessage API)</li>
  <li>The message is persited in SQS until consumer deletes it</li>
  <li>Message retention: default 4 days, upto 14days</li>
  <li>Example:
    <ul>
      <li>order id</li>
      <li>customer id</li>
      <li>any attributes you want</li>
    </ul>
  </li>
  <li>SQS standard: unlimited throughput</li>
</ul>

<h2 id="sqs---consuming-messages">SQS - Consuming messages</h2>
<ul>
  <li>Consumes (running on EC2 instances, Servers, or AWS lambda)…</li>
  <li>Poll SQS for messages (receive up to 10 messages at a time)</li>
  <li>Process the messages (example: insert the message inyo an RDS database)</li>
  <li>Delete the messages using thhe deleteMessage API</li>
</ul>

<h2 id="sqs---mutiple-ec2-innstances-consumers">SQS - Mutiple EC2 Innstances Consumers</h2>
<ul>
  <li>Consumers receive and process messages in parallel</li>
  <li>At least once delivery</li>
  <li>Best effort message ordering</li>
  <li>Consumers delete messages after processig them</li>
  <li>We can scale consumers horzontally to improve throughput of processing</li>
</ul>

<h2 id="sqs-with-auto-scaling-group-asg">SQS with auto scaling group (ASG)</h2>
<p><img src="https://data.terabox.com/thumbnail/60fc2bdc059922b8468ef20723f6a421?fid=4401547290288-250528-497477940432260&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-Nog0tlOFfrcPULlinQcUmAysrrs%3d&amp;expires=8h&amp;chkbd=0&amp;chkv=0&amp;dp-logid=102362295374213231&amp;dp-callid=0&amp;time=1667116800&amp;size=c1680_u1050&amp;quality=90&amp;vuk=4401547290288&amp;ft=image&amp;autopolicy=1" alt="" /></p>

<h2 id="sqs-to-decouple-between-appliccation-tiers">SQS to decouple between appliccation tiers</h2>
<p><img src="https://data.terabox.com/thumbnail/f80aa192a0a4dcfaa593961f079adb61?fid=4401547290288-250528-626847050172989&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-qMHNmkaZ9U%2bU7%2f%2bMan0PbbkXzV4%3d&amp;expires=8h&amp;chkbd=0&amp;chkv=0&amp;dp-logid=103471156007648684&amp;dp-callid=0&amp;time=1667120400&amp;size=c1680_u1050&amp;quality=90&amp;vuk=4401547290288&amp;ft=image&amp;autopolicy=1" alt="" /></p>

<h2 id="amazon-sqs---security">Amazon SQS - Security</h2>
<ul>
  <li>Encryption
    <ul>
      <li>In-flight encryption using HTTPS API</li>
      <li>At rest encryption using KMS keys</li>
      <li>Client side encrytion if the client wants to perform encryptioon/decrytion itself</li>
    </ul>
  </li>
  <li>Access Controls: IAM policies too regulate access to SQS API</li>
  <li>SQS Access Policies (similiar to S3 bucket policies)
    <ul>
      <li>Useful for cross account access to SQS queues</li>
      <li>Useful for allowinng other services (SNS, S3…) to write to an SQS queue</li>
    </ul>
  </li>
</ul>

<h2 id="sqs-queue-access-policy">SQS Queue Access Policy</h2>
<ul>
  <li>Cross Acccount Access</li>
  <li>Publish S3 Event Notifications to SQS Queue</li>
</ul>

<h2 id="sqs-message-visiblity-timeout">SQS Message Visiblity Timeout</h2>
<ul>
  <li>After a message is polled by a consumer, it becomes invisible to other consumers</li>
  <li>By default, the “message visibility timeout” is 30 seconds</li>
  <li>That means the message has 30 seconnds to be processed</li>
  <li>After the message visibility timeout is over, the message is “visible” in SQS
<img src="https://data.terabox.com/thumbnail/f756fc00768fa969d676b2666a2d9de8?fid=4401547290288-250528-188833361974328&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-qcnvC0XfBAT35K3DEt7WJH5vSDY%3d&amp;expires=8h&amp;chkbd=0&amp;chkv=0&amp;dp-logid=132004244208837930&amp;dp-callid=0&amp;time=1667224800&amp;size=c1680_u1050&amp;quality=90&amp;vuk=4401547290288&amp;ft=image&amp;autopolicy=1" alt="" /></li>
  <li>If a message is not processed within the visibility timeout, it will be processed twice</li>
  <li>A consumer could call the ChangelMessageVisibility API tto get more time</li>
  <li>If visibility timeout is high (hours), and consumer crashes, re-processing will take ttime</li>
  <li>If visiblity ttimeouut is too low (seconds), we may get duplicates
<img src="https://data.terabox.com/thumbnail/d47c49082dec86f2e22da592a865975e?fid=4401547290288-250528-638498077057569&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-jdlltFCiGrHAJHxoyKhoPQyKWKE%3d&amp;expires=8h&amp;chkbd=0&amp;chkv=0&amp;dp-logid=132070613337514410&amp;dp-callid=0&amp;time=1667224800&amp;size=c1680_u1050&amp;quality=90&amp;vuk=4401547290288&amp;ft=image&amp;autopolicy=1" alt="" /></li>
</ul>

<h2 id="amazon-sqs---dead-letter-queue">Amazon SQS - Dead Letter Queue</h2>
<ul>
  <li>If a consumer fails to process a message within the visibility timeout… the message goes back to the queue!</li>
  <li>We can set a threshold of how manny times a message can go back to the queue</li>
  <li>After tthe mmaximumreceivves tthreshold is exceeded, the message goes intto a dead lettter queue (DLQ)</li>
  <li>Userful for debugginng!</li>
  <li>Make sure to process the messages in the DLQ before they expire:
    <ul>
      <li>Good to sett a rettenttion oof 14days in the DLQ
<img src="https://data.terabox.com/thumbnail/4716a6d1bd945f1672018cecc0dc3c19?fid=4401547290288-250528-253963689416032&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-V4lCvzDh%2byKWkokdmrzD%2fFpcPWE%3d&amp;expires=8h&amp;chkbd=0&amp;chkv=0&amp;dp-logid=132196486098997097&amp;dp-callid=0&amp;time=1667228400&amp;size=c1680_u1050&amp;quality=90&amp;vuk=4401547290288&amp;ft=image&amp;autopolicy=1" alt="" /></li>
    </ul>
  </li>
</ul>

<h2 id="sqs-dlq---redrive-to-source">SQS DLQ - Redrive to Source</h2>
<ul>
  <li>Feature to help consume messages in the DLQ to understand what is wrong with them.</li>
  <li>When our code is fixed, we can redrive the messages from the DLQ backk into the source queue (or any otther queue) inn batches without writing custtom code</li>
</ul>

<h2 id="amazon-sqs---delay-queue">Amazon SQS - Delay Queue</h2>
<ul>
  <li>Delay a message (consummers don’t see it immediately) up to 15 minuttes</li>
  <li>Defaultt is 0 secconnds (message is available rightt away)</li>
  <li>Can set a defaultt at queue level</li>
  <li>Can override tthe defaultt o sennd using the DelaySecccond parameters</li>
</ul>

<h2 id="amazon-sqs---long-polling">Amazon SQS - Long Polling</h2>
<ul>
  <li>When a consumer requests messages from the queue, it can optioally “wait” for messages to arrive if tthere are nonne in the queue</li>
  <li>This is called long pollinng</li>
  <li>LongPolling dereases the nuumber of API calls made tto SQS while increasign tthe efficiency and reduinng lattenccy of your applicationn</li>
  <li>The wait time can be between 1 se tto 20 sec (20 sec preferable)</li>
  <li>Lonng polling is preferable to short polling</li>
  <li>long polling level using waittimeseconnds</li>
</ul>

<h2 id="amazon-sqs--dead-letter-queue">Amazon SQS – Dead Letter Queue</h2>
<ul>
  <li>If a consumer fails to process a message within the
Visibility Timeout…</li>
  <li>We can set a threshold of how many times a message can go back to the queue</li>
  <li>After the maximumReceives threshold is exceeded, the message goes into a dead letter queue (DLQ)</li>
  <li>Useful for debugging!</li>
  <li>Make sure to process the message in the DLQ before they expire:
    <ul>
      <li>Good to set a retention of <strong>14days</strong> in the DLQ</li>
    </ul>
  </li>
</ul>

<h2 id="sqs-dlq--redrive-to-source">SQS DLQ – Redrive to Source</h2>
<ul>
  <li>Redrive to Source</li>
  <li><strong>Feature to help consume messages</strong> in the DLQ to understand what is wrong with them</li>
  <li>When our code is fixed, we can redrive the messages from the DLQ back into the source queue (or any other queue) in batches without writing custom code</li>
</ul>

<h2 id="amazon-sqs--delay-queue">Amazon SQS – Delay Queue</h2>
<ul>
  <li>Delay a message up to 15minutes</li>
  <li>Default is 0 seconds</li>
  <li>Can set a default at queue level</li>
  <li>Can override the default on send using the delayseconds parameter</li>
</ul>

<h2 id="amazon-sqs---long-polling-1">Amazon SQS - Long Polling</h2>
<ul>
  <li>When a consumer requests messages from the queue, it can optionally “wait” for messages to arrive if there are none in the queue</li>
  <li>This is called long polling</li>
  <li>Longpolling decrease the number of API calls mafe to SQS while increasing the</li>
  <li>The wait time can be between 1 sc to 20 sec</li>
  <li>Long polling is preferable to short polling</li>
  <li>Long polling can be enabled at the queue level or at the API level using WaitTimeSeconds</li>
</ul>

<h2 id="sqs--request-response-systems">SQS – Request-Response Systems</h2>
<ul>
  <li>To implement this pattern: use the SQS Temporary Queue Client</li>
  <li>It leverages virtual queues instead of creating / deleting SQS queues (cost-effective)
<img src="https://data.terabox.com/thumbnail/dbd7823be2ea09d4c6646487427c332e?fid=4401547290288-250528-836653485996578&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-Tn0aACsr41dXjKCENJmAIots4Dw%3d&amp;expires=8h&amp;chkbd=0&amp;chkv=0&amp;dp-logid=146796765169662898&amp;dp-callid=0&amp;time=1667282400&amp;size=c1920_u1080&amp;quality=90&amp;vuk=4401547290288&amp;ft=image&amp;autopolicy=1" alt="" /></li>
</ul>

<h2 id="amazon-sqs--fifo-queue">Amazon SQS – FIFO Queue</h2>
<ul>
  <li>FIFO = First In First Out (ordering of messages in the queue)</li>
  <li>Limited throughput: 300 msg/s without batching, 3000 msg/s with</li>
  <li>Exactly-once send capability (by removing duplicates)</li>
  <li>Messages are processed in order by the consumer</li>
</ul>

<h2 id="kinesis-overview">Kinesis Overview</h2>
<ul>
  <li>Makes it easy to collect, process, and analyze streaming data in real-time</li>
  <li>Ingest real-time data such as: Application logs, Metrics, Website clickstreams, IoT telemetry data…</li>
  <li>Kinesis <strong>Data Streams</strong>: capture, process, and store data streams</li>
  <li>Kinesis <strong>Data Firehose</strong>: load data streams into AWS data stores</li>
  <li>Kinesis <strong>Data Analytics</strong>: analyze data streams with SQL or Apache Flink</li>
  <li>Kinesis <strong>Video Streams</strong>: capture, process, and store video streams</li>
</ul>

<h2 id="kinesis-data-streams">Kinesis Data Streams</h2>
<p><img src="https://data.terabox.com/thumbnail/53158a28c623e5784fb1ecc95aa40bae?fid=4401547290288-250528-888144365073549&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-nUHbZG%2bm8Up4v28zawpO92Bhg0A%3d&amp;expires=8h&amp;chkbd=0&amp;chkv=0&amp;dp-logid=148630191436730620&amp;dp-callid=0&amp;time=1667289600&amp;size=c1920_u1080&amp;quality=90&amp;vuk=4401547290288&amp;ft=image&amp;autopolicy=1" alt="" /></p>
<ul>
  <li>Retention between 1 day to 365 days</li>
  <li>Ability to reprocess (replay) data</li>
  <li>Once data is inserted in Kinesis, it can’t be deleted (immutability)</li>
  <li>Data that shares the same partition goes to the same shard (ordering)</li>
  <li>Producers: AWS SDK, Kinesis Producer Library(KPL), Kinesis Agent</li>
  <li>Consumers:
    <ul>
      <li>Write your own: Kinesis Client Library (KCL), AWS SDK</li>
      <li>Managed: AWS Lambda, Kinesis Data Firehose, Kinesis Data Analytics</li>
    </ul>
  </li>
</ul>

<h2 id="kinesis-data-streams--capacity-modes">Kinesis Data Streams – Capacity Modes</h2>
<ul>
  <li>Provisioned mode:
    <ul>
      <li>You choose the number of shards provisioned, scale manually or using API</li>
      <li>Each shard get 1MB/s in (or 1000 records per second)</li>
      <li>Each shard get 2MB/s out (classic or enhanced fan-out consumer)</li>
      <li>You pay per shard provisioned per hour</li>
    </ul>
  </li>
  <li>On-demand mode:
    <ul>
      <li>No need to provision or manage the capacity</li>
      <li>Default capacity provisioned (4 MB/s in or 4000 records per second)</li>
      <li>Scales automatically based on observed throughput peak during the last 30days</li>
      <li>Pay per stream per hour &amp; data in/out per GB</li>
    </ul>
  </li>
</ul>

<h2 id="kinesis-data-firehose">Kinesis Data Firehose</h2>
<p><img src="https://data.terabox.com/thumbnail/a87fe08448661bf47728bf5964cdb514?fid=4401547290288-250528-28993844855522&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-BXS0G9aKyYcpu5C%2bxeTeU4644sE%3d&amp;expires=8h&amp;chkbd=0&amp;chkv=0&amp;dp-logid=148365350066619248&amp;dp-callid=0&amp;time=1667286000&amp;size=c1920_u1080&amp;quality=90&amp;vuk=4401547290288&amp;ft=image&amp;autopolicy=1" alt="" /></p>
<ul>
  <li>Fully managed service, no administration, automatic scaling, serverless
    <ul>
      <li>AWS: Redshift / Amazon S3 / ElasticSearch</li>
      <li>3rd party partner: Splunk / MongoDB / DataDog / NewRelic / …</li>
      <li>Custom: send to any HTTP endpoint</li>
    </ul>
  </li>
  <li>Pay for data going through Firehose</li>
  <li><strong>Near Real Time</strong>
    <ul>
      <li>60 seconds latency minimum for non full batches</li>
      <li>Or minimum 32 MB of data at a time</li>
    </ul>
  </li>
  <li>Supports many data formats, conversions, transformations, compression</li>
  <li>Supports custom data transformations using AWS Lambda</li>
  <li>Can send failed or all data to a backup <strong>S3 bucket</strong></li>
</ul>

<h2 id="kinesis-data-streams-vs-firehose">Kinesis Data Streams vs Firehose</h2>
<h3 id="kinesis-data-streams-1">Kinesis Data Streams</h3>
<ul>
  <li>Streaming service for ingest at scale</li>
  <li>Write custom code (producer / consumer)</li>
  <li>Realtime (~200ms)</li>
  <li>Manage scaling (shard splitting / merging)</li>
  <li>Data storage for 1 to 365 days</li>
  <li>Suports replay capability</li>
</ul>

<h3 id="kinesis-data-firehose-1">Kinesis Data Firehose</h3>
<ul>
  <li>Load streaming data into S3 / Redshift /
ES / 3 rd party / custom HTTP</li>
  <li>Fully managed</li>
  <li>Near real-time (buffer time min. 60 sec)</li>
  <li>Automatic scaling</li>
  <li>No data storage</li>
  <li>Doesn’t support replay capability</li>
</ul>

<h2 id="kinesis-data-analytics-sql-application">Kinesis Data Analytics (SQL application)</h2>
<p><img src="https://data.terabox.com/thumbnail/60d525fa51afec1e7694a5080ceac9f0?fid=4401547290288-250528-913877153385398&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-Cp1mXiL7X1h5dzf%2fBuj2fjgtGnw%3d&amp;expires=8h&amp;chkbd=0&amp;chkv=0&amp;dp-logid=148621121388058704&amp;dp-callid=0&amp;time=1667289600&amp;size=c1920_u1080&amp;quality=90&amp;vuk=4401547290288&amp;ft=image&amp;autopolicy=1" alt="" /></p>
<ul>
  <li>Perform real-time analytics on <strong>Kinesis Streams</strong> using SQL</li>
  <li>Fully managed, no servers to provision</li>
  <li>Automatic scaling</li>
  <li>Real-time analytics</li>
  <li>Pay for actual consumption rate</li>
  <li>Can create streams out of the real-time queries</li>
  <li>Use cases:
    <ul>
      <li>Time-series analytics</li>
      <li>Real-time dashboards</li>
      <li>Real-time metrics</li>
    </ul>
  </li>
</ul>

<h2 id="ordering-data-into-kinesis">Ordering data into Kinesis</h2>
<ul>
  <li>Imagine you have 100 trucks (truck_1, truck_2,.., truck_100) on the road sending their GPS positions regularly into AWS</li>
  <li>You want to consume the data in order for each truck, so that you can track their movment accurately</li>
  <li>How should you send that data into Kinesis?</li>
  <li>Answer: send using a “Partition Key” value of the “truck_id”</li>
  <li>The same key will always go to the same shard</li>
</ul>

<h2 id="ordering-data-into-sqs">Ordering data into SQS</h2>
<ul>
  <li>For SQS standard, there is no ordering</li>
  <li>For SQS FIFO, if you don’t use a Group ID, messages are consumed in the order they are sent, with only one consumer</li>
  <li>You want to scale the number of consumers, but you want messages to be “grouped” when they are related to each other</li>
  <li>Then you use a Group ID (similar to Partition Key in Kinesis)</li>
</ul>

<h2 id="kinesis-vs-sqs-ordering">Kinesis vs SQS ordering</h2>
<ul>
  <li>Let’s assume 100 trucks, 5 kinesis shards, 1 SQS FIFO</li>
  <li>Kinesis Data Streams: (500 consumer)
    <ul>
      <li>On average you’ll have 20 trucks per shard</li>
      <li>Trucks will have their data ordered within each shard</li>
      <li>The maximum amount of consumers in parallel we can have is 5</li>
      <li>Can receive up to 5 MB/s of data</li>
    </ul>
  </li>
  <li>SQS FIFO
    <ul>
      <li>You only have one SQS FIFO queue</li>
      <li>You will have 100 Group ID</li>
      <li>You can have up to 100 Consumers (due to the 100 Group ID)</li>
      <li>You have up to 300 messages per second (or 3000 if using batching)
<img src="https://data.terabox.com/thumbnail/f346f844d5d9db1b8c51b1ce76f4e060?fid=4401547290288-250528-306468149542926&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-%2bkG8vTfYToNs7SuxQkLzqJTGRUQ%3d&amp;expires=8h&amp;chkbd=0&amp;chkv=0&amp;dp-logid=149575350169314786&amp;dp-callid=0&amp;time=1667293200&amp;size=c1920_u1080&amp;quality=90&amp;vuk=4401547290288&amp;ft=image&amp;autopolicy=1" alt="" />
<img src="https://data.terabox.com/thumbnail/b1fad88a96d1d76899606b95a11ce278?fid=4401547290288-250528-796537850720769&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-m8ZdL15W5%2bcMXJW4bAfPrs5XzYk%3d&amp;expires=8h&amp;chkbd=0&amp;chkv=0&amp;dp-logid=149918803408287026&amp;dp-callid=0&amp;time=1667293200&amp;size=c1920_u1080&amp;quality=90&amp;vuk=4401547290288&amp;ft=image&amp;autopolicy=1" alt="" /></li>
    </ul>
  </li>
</ul>

<h2 id="amazon-sns">Amazon SNS</h2>
<ul>
  <li>What if you want to send one message to many receivers?
<img src="https://data.terabox.com/thumbnail/61a5422e119285c0aa117312c5d96dc4?fid=4401547290288-250528-226564793143734&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-EZJZQCXmS8eP%2bsl5h0BjkWvme9M%3d&amp;expires=8h&amp;chkbd=0&amp;chkv=0&amp;dp-logid=149426414854930996&amp;dp-callid=0&amp;time=1667289600&amp;size=c1920_u1080&amp;quality=90&amp;vuk=4401547290288&amp;ft=image&amp;autopolicy=1" alt="" /></li>
  <li>The <strong>“event producer”</strong> only sends message to one SNS topic</li>
  <li>As many “event receivers” (subscriptions) as we want to listen to the SNS topic notifications</li>
  <li>Each subscriber to the topic will get all the messages (note: new feature to filter messages)</li>
  <li>Up to 12,500,000 subscriptions per topic</li>
  <li>100,000 topics limit</li>
</ul>

<h2 id="sns-integrates-with-a-lot-of-aws-services">SNS integrates with a lot of AWS services</h2>
<ul>
  <li>Many AWS services can send data directly to SNS for notifications</li>
</ul>

<h2 id="amazon-sns--how-to-publish">Amazon SNS – How to publish</h2>
<ul>
  <li>Topic Publish (using the SDK)
    <ul>
      <li>Create a topic</li>
      <li>Create a subscription (or many)</li>
      <li>Publish to the topic</li>
    </ul>
  </li>
  <li>Direct Publish (for mobile apps SDK)
    <ul>
      <li>Create a platform application</li>
      <li>Create a platform endpoint</li>
      <li>Publish to the platform endpoint</li>
      <li>Works with Google GCM, Apple APNS, Amazon ADM…</li>
    </ul>
  </li>
</ul>

<h2 id="amazon-sns--security">Amazon SNS – Security</h2>
<ul>
  <li>Encryption:
    <ul>
      <li>In-flight encryption using HTTPS API</li>
      <li>At-rest encryption using KMS keys</li>
      <li>Client-side encryption if the client wants to perform encryption/decryption itself</li>
    </ul>
  </li>
  <li>Access Controls: IAM policies to regulate access to the SNS API</li>
  <li>SNS Access Policies (similar to S3 bucket policies)
    <ul>
      <li>Useful for cross-account access to SNS topics</li>
      <li>Useful for allowing other services ( S3…) to write to an SNS topic</li>
    </ul>
  </li>
</ul>

<h2 id="sns--sqs-fan-out">SNS + SQS: Fan Out</h2>
<ul>
  <li>Push once in SNS, receive in all SQS queues that are subscribers</li>
  <li>Fully decoupled, no data loss</li>
  <li>SQS allows for: data persistence, delayed processing and retries of work</li>
  <li>Ability to add more SQS subscribers over time</li>
  <li>Make sure your SQS queue accesss policy allows for SNS to write</li>
</ul>

<h2 id="application-s3-events-to-multiple-queues">Application: S3 Events to multiple queues</h2>
<ul>
  <li>For the same combination of: event type (e.g. object create) and prefix (e.g. images/) you can only have one S3 Event rule</li>
  <li>If you want to send the same S3 event to many SQS queues, use fan-out
<img src="https://data.terabox.com/thumbnail/3418d292f1d06f3ec06d318c2287e826?fid=4401547290288-250528-994038393814877&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-EIAdlE7tgwvm4YaSWOeawoN5lYM%3d&amp;expires=8h&amp;chkbd=0&amp;chkv=0&amp;dp-logid=149836234918496344&amp;dp-callid=0&amp;time=1667293200&amp;size=c1920_u1080&amp;quality=90&amp;vuk=4401547290288&amp;ft=image&amp;autopolicy=1" alt="" /></li>
</ul>

<h2 id="application-sns-to-amazon-s3-through-kinesis-data-firehose">Application: SNS to Amazon S3 through Kinesis Data Firehose</h2>
<ul>
  <li>SNS can send to Kinesis and therefore we can have the following solutions architecture:
<img src="https://data.terabox.com/thumbnail/07787eb9a8b13863a337796e6739c6c1?fid=4401547290288-250528-698671128515364&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-CJlL04CDEPUSicRlQAlTWx5arOg%3d&amp;expires=8h&amp;chkbd=0&amp;chkv=0&amp;dp-logid=149918803408287026&amp;dp-callid=0&amp;time=1667293200&amp;size=c1920_u1080&amp;quality=90&amp;vuk=4401547290288&amp;ft=image&amp;autopolicy=1" alt="" /></li>
</ul>

<h2 id="amazon-sns--fifo-topic">Amazon SNS – FIFO Topic</h2>
<ul>
  <li>FIFO = First In First Out (ordering of messages in the topic)</li>
  <li>Similar features as SQS FIFO:
    <ul>
      <li><strong>Ordering</strong> by message group ID (all messages in the same group are ordred)</li>
      <li><strong>Deduplication</strong> using a Deduplication ID or Content Based Deduplication</li>
    </ul>
  </li>
  <li>Can only have SQS FIFO queues as subscribers</li>
  <li>Limited throughput (same throughput as SQS FIFO)</li>
</ul>

<h2 id="sns-fifo--sqs-fifo-fan-out">SNS FIFO + SQS FIFO: Fan Out</h2>
<ul>
  <li>In case you need fan out + ordering + deduplication
<img src="https://data.terabox.com/thumbnail/3ea6ea025180be1a376c8c59fdeff11b?fid=4401547290288-250528-41769958245629&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-f%2b2tgUXgOJUBaUNFca8rXHJk53A%3d&amp;expires=8h&amp;chkbd=0&amp;chkv=0&amp;dp-logid=150238647327959985&amp;dp-callid=0&amp;time=1667293200&amp;size=c1920_u1080&amp;quality=90&amp;vuk=4401547290288&amp;ft=image&amp;autopolicy=1" alt="" /></li>
</ul>

<h2 id="sns--message-filtering">SNS – Message Filtering</h2>
<ul>
  <li>JSON policy used to filter messages sent to SNS topic’s subscriptions</li>
  <li>If a subscription doesn’t have a filter policy, it receives every message
<img src="https://data.terabox.com/thumbnail/22f88eebfb31c930c37934b8fdab6166?fid=4401547290288-250528-336701414978434&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-Q%2bh2vb3%2fyR305uc1cXway1zfF28%3d&amp;expires=8h&amp;chkbd=0&amp;chkv=0&amp;dp-logid=150295095105082411&amp;dp-callid=0&amp;time=1667293200&amp;size=c1920_u1080&amp;quality=90&amp;vuk=4401547290288&amp;ft=image&amp;autopolicy=1" alt="" /></li>
</ul>

<h2 id="sqs-vs-sns-vs-kinesis">SQS vs SNS vs Kinesis</h2>
<h3 id="sqs">SQS</h3>
<ul>
  <li>Consumer “pull data”</li>
  <li>Data is deleted after being consumed</li>
  <li>Can have as many workers (consumers) as we want</li>
  <li>No need to provision throughput</li>
  <li>Ordering guarantes only on FIFO queues</li>
  <li>Individual message delay capability</li>
</ul>

<h3 id="sns">SNS</h3>
<ul>
  <li>Push data to many subscribers</li>
  <li>Up to 12500000 subcribers</li>
  <li>Data is not persisted (lost if not delivered)</li>
  <li>Pub/sub</li>
  <li>Up to 100000 topics</li>
  <li>No need to provision throughput</li>
  <li>Integrates with SQS for fan-out architecture pattern</li>
  <li>FIFO capability for SQS FIFO
    <h2 id="kinesis">Kinesis</h2>
  </li>
  <li>Standard: Pull data
    <ul>
      <li>2Mb per shard</li>
    </ul>
  </li>
  <li>Enhanced-fan out: push data
    <ul>
      <li>2MB per shard per consumer</li>
    </ul>
  </li>
  <li>Possibility to replay data</li>
  <li>Meant for real-time big data, analytics and ETL</li>
  <li>Ordering at the shard level</li>
  <li>Data expires aftr X days</li>
  <li>Provisioned mode or on-demand capacity mode</li>
</ul>

<h2 id="amazon-mq">Amazon MQ</h2>
<ul>
  <li>SQS, SNS are “cloud-native” service, and they’re using proprietary protocols from AWS</li>
  <li>Traditional applications running from on-premises may use open protocols such as: MQTT, AMQP, STOMP, Openwire, WSS</li>
  <li>When migrating to the cloud, instead of re-engineering the application to use SQS and SNS, we can use Amazon MQ</li>
  <li>Amazon MQ  = managed Apache ActiveMQ</li>
  <li>Amazon MQ doesn’t “scale” as much as SQS / SNS</li>
  <li>Amazon MQ runs on a dedicated machine, can run in HA with failover</li>
  <li>Amazon MQ has both queue feature (~SQS) and topic features (~SNS)</li>
</ul>

<h2 id="amazon-mq--high-availability">Amazon MQ – High Availability</h2>
<p><img src="https://data.terabox.com/thumbnail/e405f51c992247649bff966cc1e5e2ee?fid=4401547290288-250528-131705074839729&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-eqMIRYs%2fxykOOR7iRUOoprbAVzw%3d&amp;expires=8h&amp;chkbd=0&amp;chkv=0&amp;dp-logid=151478974774550761&amp;dp-callid=0&amp;time=1667300400&amp;size=c1920_u1080&amp;quality=90&amp;vuk=4401547290288&amp;ft=image&amp;autopolicy=1" alt="" /></p>

<h1 id="serverless-and-application-services">SERVERLESS AND APPLICATION SERVICES</h1>
<ul>
  <li>Tiered Architecture</li>
  <li>When we start deploying multiple applications, they will inevitably need to communicate with one another.</li>
  <li>There are two patterns of application communication.
    <ul>
      <li>Evolving with queues</li>
      <li>Event-driven architecture</li>
    </ul>
  </li>
</ul>

<h2 id="amazon-sqs--standard-queue">Amazon SQS – Standard Queue</h2>
<ul>
  <li>Oldest offering (over 10 years old)</li>
  <li>Fully managed service, used to decouple applications</li>
  <li>Attributes:
    <ul>
      <li>Unlimited throughput, unlimited number of messages in queue</li>
      <li>Default retention of messages: 4 days, maximum of 14 days</li>
      <li>Low latency (&lt;10 ms on publish and receive)</li>
      <li>Limitation of 256KB per message sent</li>
    </ul>
  </li>
  <li>Can have duplicate messages (at least once delivery, occasionally)</li>
  <li>Can have out of order messages (best effort ordering)</li>
</ul>

<h2 id="sqs--producing-messages">SQS – Producing Messages</h2>
<ul>
  <li>Produced to SQS using the SDK (SendMessage API)</li>
  <li>The message is persisted in SQS until a consumer deletes it</li>
  <li>Message retention: default 4 days, up to 14 days</li>
  <li>Example: send an order to be processed
    <ul>
      <li>Order id</li>
      <li>Customer id</li>
      <li>Any attributes you want</li>
    </ul>
  </li>
  <li>SQS standard: unlimited throughput</li>
</ul>

<h2 id="sqs--consuming-messages">SQS – Consuming Messages</h2>
<ul>
  <li>Consumers (running on EC2 instances, servers, or AWS Lambda)…</li>
  <li>Poll SQS for messages (receive up to 10 messages at a time)</li>
  <li>Process the messages (example: insert the message into an RDS database)</li>
  <li>Delete the messages using the DeleteMessage API</li>
</ul>

<h2 id="lambda-function-as-a-service">Lambda: function as a service</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre>- You are billed for the duration that a function runs
- The environment has a direct memory (indirect CPU) allocation
- Deployment a package with 50MB zipped and 250MB unzipped
- 512 MB storage available as /tmp
- Serverless application (S3, API Gateway, Lambda)
- File Processing (S3, S3 event, lamba)
- Database Triggers (DynamoDB, Streams, Lambda)
- Serverless CROn (EventBrige/CWEvents + Lambda)
- Realtime Stream Data Processing (kinesis + Lambda)
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="lambda-in-depth">Lambda in depth:</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre>- Public Lambda:
![](https://data.terabox.com/thumbnail/9fb8e7f5d4deb514c210c436daa33b68?fid=4401547290288-250528-754626766169061&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-AyXAee6ddgI%2bVvNASA%2fyuIDC100%3d&amp;expires=8h&amp;chkbd=0&amp;chkv=0&amp;dp-logid=125173180413113238&amp;dp-callid=0&amp;time=1667199600&amp;size=c1920_u1080&amp;quality=90&amp;vuk=4401547290288&amp;ft=image&amp;autopolicy=1)
- Private Lambda:
![](https://data.terabox.com/thumbnail/33d179bf393395941a01511d2a744ce3?fid=4401547290288-250528-1097958099823614&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-45Ti2FPZBOQcIaJFI2fcCqPuJCU%3d&amp;expires=8h&amp;chkbd=0&amp;chkv=0&amp;dp-logid=125190523939933141&amp;dp-callid=0&amp;time=1667199600&amp;size=c1920_u1080&amp;quality=90&amp;vuk=4401547290288&amp;ft=image&amp;autopolicy=1)
    - Lambda run in VPC obey all VPC networking rules
- Lambda security:
    - Lambda execution roles are IAM roles attached to lambda functions which control the permissions the lambda function receives ...
    - Lambda resource policy controls what services and accounts can invoke lambda functions
- Lambda Logging:
    - Lambda uses Cloudwatch, cloudwatch logs &amp; x-ray
    - Logs from lambda executions - cloudwatchlogs
    - Metrics - invocation success/failure, retries, latency ... stored in cloudwatch
    - lambda can be integrated with x-ray for distributed tracing
    - Cloudwatch logs requires permissions via execution role
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="lambda-in-depth-invocation">Lambda in depth: Invocation</h2>
<ul>
  <li>Invocation:</li>
  <li>Synchronous
    <ul>
      <li>cli / api, client communicates with APIGW , proxied to lambda function</li>
    </ul>
  </li>
  <li>Asynchronous (typically used when AWS services invoke lambda functions)
    <ul>
      <li>S3 isn’t waitting for any kind of response. The event is generated and S3 stops tracking</li>
      <li>If processing of the event fails, lambda will retry between 0 and 2 time (configurable). Lambda handles the retry logic</li>
      <li>The lambda function needs to be idempotent reprocessing a result should have the same end state
<img src="https://data.terabox.com/thumbnail/287d192ccaaa33ab70bd39efe284f587?fid=4401547290288-250528-848637065930323&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-cQd1uCN6L3W8PuVn%2btcfZB87%2fM8%3d&amp;expires=8h&amp;chkbd=0&amp;chkv=0&amp;dp-logid=125597516564879274&amp;dp-callid=0&amp;time=1667203200&amp;size=c1920_u1080&amp;quality=90&amp;vuk=4401547290288&amp;ft=image&amp;autopolicy=1" alt="" /></li>
    </ul>
  </li>
  <li>Kinesis data stream: producers(telemetry)
<img src="https://data.terabox.com/thumbnail/28aa6998b0ebdef94b4e16f253471770?fid=4401547290288-250528-702564787382654&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-kQOc6hfw13wsrP9Vk8%2br4zTlQeA%3d&amp;expires=8h&amp;chkbd=0&amp;chkv=0&amp;dp-logid=125670327781297890&amp;dp-callid=0&amp;time=1667203200&amp;size=c1920_u1080&amp;quality=90&amp;vuk=4401547290288&amp;ft=image&amp;autopolicy=1" alt="" /></li>
  <li>An execution context is the environment a lambda function run in. A cold start is a full creation and configuration including function code dowload.
<img src="https://data.terabox.com/thumbnail/a01705e28f64e433d11b34650c680af9?fid=4401547290288-250528-926045713650794&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-LpiObhVLwT29GOMoxt1fK19ih4M%3d&amp;expires=8h&amp;chkbd=0&amp;chkv=0&amp;dp-logid=126228460675791421&amp;dp-callid=0&amp;time=1667203200&amp;size=c1920_u1080&amp;quality=90&amp;vuk=4401547290288&amp;ft=image&amp;autopolicy=1" alt="" /></li>
</ul>

<h2 id="cloudwatch-events-and-eventbridge">Cloudwatch events and eventbridge</h2>
<ul>
  <li>If X happen, or at Y times .. do Z</li>
  <li>Eventbrigde is cloudwatch api v2</li>
  <li>a default event bus for account</li>
  <li>cloudwatch event has only one bus</li>
  <li>eventbrigde have additional bus</li>
  <li>rules match event</li>
  <li>route the events to +1 targets as Lambda
CloudWatch Events and EventBridge have visibility over events generated by supported AWS services within an account.
They can monitor the default account event bus - and pattern match events flowing through and deliver these events to multiple targets.
They are also the source of scheduled events which can perform certain actions at certain times of day, days of the week, or multiple combinations of both - using the Unix CRON time expression format.
Both services are one way how <strong>event driven architectures</strong> can be implemented within AWS.</li>
</ul>

<h2 id="sqs--multiple-ec2-instances-consumers">SQS – Multiple EC2 Instances Consumers</h2>
<ul>
  <li>Consumers receive and process messages in parallel</li>
  <li>At least once delivery</li>
  <li>Best-effort message ordering</li>
  <li>Consumers delete messages after processing them</li>
  <li>We can scale consumers horizontally to improve throughput of processing</li>
</ul>]]></content><author><name>Leo đẹp trai</name></author><category term="Fullstack" /><category term="Architect" /><category term="AWS" /><category term="aws" /><category term="sqs" /><category term="sns" /><category term="serverless" /><category term="service" /><category term="sts" /><summary type="html"><![CDATA[AWS API Gateway AWS Lambda + API Gateway: No infrastructure to manage Support for the WebSocket Protocol Handle API versioning (v1, v2…) Handle different environments (dev, test, prod…) Handle security (Authentication and Authorization) Create API keys, handle request throttling Swagger / Open API import to quickly define APIs Transform and validate requests and responses Generate SDK and API specifications Cache API responses]]></summary></entry><entry><title type="html">AWS Advance: RDS</title><link href="https://zmerrychristmas.github.io/posts/aws-advance-alb-clb-rds-and-aurora-part-2/" rel="alternate" type="text/html" title="AWS Advance: RDS" /><published>2022-12-04T00:00:00+07:00</published><updated>2022-12-10T16:28:10+07:00</updated><id>https://zmerrychristmas.github.io/posts/aws-advance-alb-clb-rds-and-aurora-part-2</id><content type="html" xml:base="https://zmerrychristmas.github.io/posts/aws-advance-alb-clb-rds-and-aurora-part-2/"><![CDATA[<h1 id="rds">RDS</h1>
<h2 id="aws-rds-overview">AWS RDS Overview</h2>
<ul>
  <li>RDS stannds for Relatioal Database service</li>
  <li>It’s a managed DB service for DB use SQL as a query language.</li>
  <li>It allow you to create databases in the cloud that are managed by AWS
    <ul>
      <li>Postgres</li>
      <li>MYSQL</li>
      <li>MariaDB</li>
      <li>Oracle</li>
      <li>Microsoft SQL Server</li>
      <li>Aurora(AWS Proprietary database)</li>
    </ul>
  </li>
</ul>

<h2 id="advantage-over-using-rds-versus-deploying-db-on-ec2">Advantage over using RDS versus deploying DB on EC2</h2>
<ul>
  <li>RDS is a managed service:
    <ul>
      <li>Automated provisioning, OS patching</li>
      <li>Conitnous backups and restore to <em>specific timestamp</em> (Point in Time Restore)!</li>
      <li>Monitoring dashboard</li>
      <li>Read replicas for improved read performance</li>
      <li>Maintennace windows for upgrade</li>
      <li>Sacling capacity (vertical and horizotal)</li>
      <li>Storage backed by EBS (gp2 or io1)</li>
    </ul>
  </li>
  <li>But you can’t SSH into your instances</li>
</ul>

<h2 id="rds-backups">RDS backups</h2>
<ul>
  <li>Backups are <strong>automatically</strong> enabled in RDS</li>
  <li><strong>Automated backups</strong>:
    <ul>
      <li>Daily full backup of the database (durinng the maintenancce window)</li>
      <li>Transaction logs are baccked-up by RDS every <strong>5 minutes</strong></li>
      <li>ability to restore to any point in time (from oldest to 5 minutes ago)</li>
      <li>7 days retention (can be increased to 35 days)</li>
    </ul>
  </li>
  <li>DB <strong>snapshots</strong>:
    <ul>
      <li><strong>Manually</strong> triggered by the user</li>
      <li>Retention of backup for as long as you want</li>
    </ul>
  </li>
</ul>

<h2 id="rds-storage-auto-scaling">RDS Storage Auto Scaling</h2>
<ul>
  <li>Helps you increase storage on your RDS DB instannce <strong>dynamically</strong></li>
  <li>When RDS detects you are running out of free database storage, it scales automatically</li>
  <li>Avoid manually scaling your database storage</li>
  <li>You have to set Maximum Storage Threshold (maximum limit for DB storage)</li>
  <li>Automatically modify storage if
    <ul>
      <li>Free storage is less than 10% of alloccated storage</li>
      <li>Low storage lasts at least 5 minutes</li>
      <li>6 hours have passed sincce last modification</li>
    </ul>
  </li>
</ul>

<h2 id="rds-read-replicas-for-read-scalability">RDS Read Replicas for read scalability</h2>
<ul>
  <li><strong>Up to 5 read replica</strong>s</li>
  <li>Within AZ, Cross AZ or Cross Region</li>
  <li>Replication is ASYNC, so reads are eventually consistent</li>
  <li>Replicas can be promoted to their own DB</li>
  <li>Applications must update the connection string to leverage read replicas</li>
</ul>

<h2 id="rds-read-replicas---use-cases">RDS Read replicas - Use Cases</h2>
<ul>
  <li>You have a production database that is taking on normal load</li>
  <li>You want to run a reporting application is unfacted</li>
  <li>Read replicas are used for SELECT(=read) only kind of statements (not INSERT, UPDATE, DELETE)</li>
</ul>

<h2 id="rds-read-replicas---network-cost">RDS Read Replicas - Network Cost</h2>
<ul>
  <li>In AWS there’s a networ cost when data goes from one AZ to another</li>
  <li>For RDS read replicas within the same region, you don’t pay that fee</li>
</ul>

<h2 id="rds-multi-az-disater-recovery">RDS Multi AZ (Disater Recovery)</h2>
<ul>
  <li>Sync replication</li>
  <li>One <strong>DNS</strong> name - automactic app failover too standby</li>
  <li>Increase availability</li>
  <li><strong>Failover</strong> in case of loss AZ, loss of networkk, instance or storage failure</li>
  <li>No manual intervention in apps</li>
  <li>Not used for scaling</li>
  <li><strong>Multi AZ replication is free</strong></li>
  <li>Note: The Read Replicas bet setup as Multi AZ for** Disater Recovery**</li>
</ul>

<h2 id="rds---from-single-az-to-multi-az">RDS - From Single AZ to Multi AZ</h2>
<ul>
  <li>Zero downtime operation (no need to stop the DB)</li>
  <li>Just click on “modify” for the database</li>
  <li>The following happens internally:
    <ul>
      <li>A <strong>snapshot</strong> is taken</li>
      <li>A new DB is retored from the snapshot in a new AZ</li>
      <li><strong>Syncchronization</strong> is establishhed between the two databases</li>
    </ul>
  </li>
</ul>

<h2 id="rds-security---encryption">RDS Security - Encryption</h2>
<ul>
  <li><strong>At rest ecryption</strong>
    <ul>
      <li>Possibility to encrypt the master &amp; read replicas with <strong>AWS KMS - AES-256</strong> encryption</li>
      <li>Enccryption has to be defined at launch time</li>
      <li>If the master is not encrypted the read replicas cannot be encrypted</li>
      <li>Transparent Data Encryption (TDE) available for Oracle and SQL Server
-** In-flight encryption**</li>
      <li>SSL certificates to encrypt data to RDS in flight</li>
      <li>Provide SSL options with trust certificate when connecting to database</li>
      <li>To enforce SSL:
        <ul>
          <li>PostgreSQL: rds.force_ssl=1 i QWS RDS console</li>
          <li>MYSQL: Within the DB</li>
          <li>Grant Usage On <em>.</em> To ‘mycluster’@’%’ Require SSL;</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="rds-encryption-operations">RDS Encryption Operations</h2>
<ul>
  <li>Encrypting RDS backups
    <ul>
      <li>Snapshots of un-crypted RDS databases are un-crypted</li>
      <li>Sapshots of enncrypted RDS databases are encrypted</li>
      <li>Can copy a snapshot into an encrypted one</li>
    </ul>
  </li>
  <li>To encrypt an un-encrypted RDS database
    <ul>
      <li>Create a snapshot of the un-encrypted database</li>
      <li>Copy the snapshot and enable encryption for the snapshot</li>
      <li>Restore the database from the encrypted snapshot</li>
      <li>Migrate applications to the new database, and delete the old database</li>
    </ul>
  </li>
</ul>

<h2 id="rds-security---network--iam">RDS Security - Network &amp; IAM</h2>
<ul>
  <li>Network Security
    <ul>
      <li>RDS databases are usually deployed <strong>within a private subnet</strong>, not in a public one</li>
      <li>RDS security works by leveraging seccurity groups (the same concept as for EC2 instances)</li>
      <li>it controls which ip / security group can comminicate with RDS</li>
    </ul>
  </li>
  <li>Access Management
    <ul>
      <li><strong>IAM policies</strong> help control who can manage AWS RDS (through the RDS <em>API</em>)</li>
      <li><strong>Tranditionnal Username annd Password</strong> can be used to <em>login</em> into the database</li>
      <li><strong>IAM-based authentication</strong> can be used to login into RDS MYSQL &amp; PostgreSQL</li>
    </ul>
  </li>
</ul>

<h2 id="rds---iam-authentication">RDS - IAM Authentication</h2>
<ul>
  <li>IAM database authentication works with MYSQL and PostgreSQL</li>
  <li>You don’t need a password, just an authentication token obtained through IAM &amp; RDS API calls</li>
  <li>Auth token has a llifetime of 15 minutes</li>
  <li>Benefits:
    <ul>
      <li>Networkk in/out must be encrypted using SSL</li>
      <li>IAM to cenntrally manage users instead of DB</li>
      <li>Cann leverage IAM roles and EC2 instance profiles for easy integration</li>
    </ul>
  </li>
</ul>

<h2 id="rds-security---summary">RDS Security - Summary</h2>
<ul>
  <li>Encryptionn at rest
    <ul>
      <li>is done only when you first create the DB instance</li>
      <li>or: unencrypted DB =&gt; snapshot =&gt; ccopy snapshot as ecrypted =&gt; create DB from sapshot</li>
    </ul>
  </li>
  <li>Your resposibility:
    <ul>
      <li>Checck the ports / IP / security group inbound rules in DB’s SG</li>
      <li>In-database user creation and permission or manage through IAM</li>
      <li>Creating a database with or without public access</li>
      <li>Ensure parameter groups or DB is configured to only allow SSL connections</li>
    </ul>
  </li>
  <li>AWS responsibility
    <ul>
      <li>No SSH access</li>
      <li>No manual DB patching</li>
      <li>No manual OS patching</li>
      <li>No way to audit the underlying instance</li>
    </ul>
  </li>
</ul>]]></content><author><name>Leo đẹp trai</name></author><category term="Fullstack" /><category term="Architect" /><category term="AWS" /><category term="aws" /><category term="RDS" /><category term="Encryption" /><category term="DisaterRecovery" /><category term="Security" /><category term="Encapsolution" /><summary type="html"><![CDATA[RDS AWS RDS Overview RDS stannds for Relatioal Database service It’s a managed DB service for DB use SQL as a query language. It allow you to create databases in the cloud that are managed by AWS Postgres MYSQL MariaDB Oracle Microsoft SQL Server Aurora(AWS Proprietary database)]]></summary></entry><entry><title type="html">AWS Advance: Aurora</title><link href="https://zmerrychristmas.github.io/posts/aws-advance-elasticache-rds-and-aurora-part-3/" rel="alternate" type="text/html" title="AWS Advance: Aurora" /><published>2022-12-04T00:00:00+07:00</published><updated>2022-12-10T16:28:10+07:00</updated><id>https://zmerrychristmas.github.io/posts/aws-advance-elasticache-rds-and-aurora-part-3</id><content type="html" xml:base="https://zmerrychristmas.github.io/posts/aws-advance-elasticache-rds-and-aurora-part-3/"><![CDATA[<h1 id="amazon-aurora">Amazon Aurora</h1>
<ul>
  <li>Aurora is a proprietary technology from AWS (not open sourced)</li>
  <li>Postgress and MYSQL are both supported as Aurora DB (that means your drivers will work as if Aurora was a Postgres or MYSQL database)</li>
  <li>Aurora is “AWS cloud optimized” and claims<em>5x performance improvement</em> over MySQL on RDS, over <em>3x the performance</em> of Postgres on RDS</li>
  <li>Aurora storage automatically grows in increements of 10GB, up to 128 T B.</li>
  <li>Aurora have <em>15 replicas while MYSQL has 5</em>, and the replication process is faster (sub 10ms replica lag)</li>
  <li>Failover in Aurora is <strong>instantaneous</strong>. It’s HA (<strong>high Avaiability</strong>) native.</li>
  <li>Aurora costs more than RDS** (20% more)** - but is <strong>more efficient</strong></li>
</ul>

<h2 id="aurora-high-availability-and-read-scaling">Aurora High Availability and read scaling</h2>
<ul>
  <li><strong>6 copies of your data across 3 AZ</strong>:
    <ul>
      <li>4 copies out of 6 needed for writes</li>
      <li>3 copies out of 6 need for reads</li>
      <li>Self healing with peer to peer replication</li>
      <li>Storage is striped across 100s of volumes</li>
    </ul>
  </li>
  <li>One Aurora instance takes write (master)</li>
  <li>Automated failover for master in less than 30 seconds</li>
  <li><strong>Master + up to 15 Aurora</strong> read replicas serve reads</li>
  <li>Support for Cross Region Replication</li>
  <li>Shared storage Volume Replication + self healing + auto expanding</li>
</ul>

<h2 id="aurora-db-cluster">Aurora DB Cluster</h2>
<ul>
  <li><strong>Write</strong> endpoint
    <ul>
      <li>Pointing to the master</li>
    </ul>
  </li>
  <li><strong>Reader</strong> Endpoint
    <ul>
      <li>Connection Load Balancing</li>
    </ul>
  </li>
</ul>

<h2 id="features-of-aurora">Features of Aurora</h2>
<ul>
  <li>Automatic Failover</li>
  <li>Backup annd Recovery</li>
  <li>Isolation and security</li>
  <li>Industry compliance</li>
  <li>Push-button scaling</li>
  <li>Automated Patching with Zero Downtime</li>
  <li>Advanced Monitoring</li>
  <li>Routine Maintenance</li>
  <li>Backtrack: restore data at anypoint of time without using backups</li>
</ul>

<h2 id="aurora-security">Aurora Security</h2>
<ul>
  <li>Similar to RDS because uses <strong>the same engies</strong></li>
  <li>Encryption at rest using <strong>KMS</strong></li>
  <li>Automated backups, snapshots and replicas are also <strong>encrypted</strong></li>
  <li>Encryption in flight using SSL (same proccess as MYSQL or Postgres)</li>
  <li><strong>Possibility to autheticate usig IAM token</strong> (same method as RDS)</li>
  <li>You are responsible for protecting the instance with security groups</li>
  <li><strong>You can’t SSH</strong></li>
</ul>

<h2 id="aurora-repliccas---auto-scaling">Aurora Repliccas - Auto Scaling</h2>
<ul>
  <li>Write endpoint</li>
  <li>Many request to Reader endpoint and edpoint extended above replicas auto sccaling policies and shared storage volume</li>
</ul>

<h2 id="aurora---custom-endpoints">Aurora - Custom Endpoints</h2>
<ul>
  <li>Define a subset of Aurora <strong>Instannces</strong> as a Custom endpoint</li>
  <li>Example: Run analytical queries on specific <strong>replicas</strong></li>
  <li>The reader Endpoint is generally not used after defining custom endpoints</li>
</ul>

<h2 id="aurora-serverless">Aurora Serverless</h2>
<ul>
  <li><em>Automated database instantiation and auto scaling based on actual usage</em></li>
  <li>Good for <em>infrequent</em>, <em>intermittent</em> or <em>unpredictable</em> workloads</li>
  <li>No capacity plannig needed</li>
  <li>Pay per second, can be <strong>most cost-effective</strong></li>
  <li><strong>Proxy</strong> fleet is managed by Aurora</li>
</ul>

<h2 id="aurora-multi-master">Aurora Multi-Master</h2>
<ul>
  <li>In case you want immediate failover for write node (HA)</li>
  <li>Every node does R/W - vs promoting a RR as the new master</li>
</ul>

<h2 id="global-aurora">Global Aurora</h2>
<ul>
  <li>Aurora cross region read replicas
    <ul>
      <li>Usefule for <em>disaster recovery</em></li>
      <li>Simple to put in place</li>
    </ul>
  </li>
  <li>Aurora Global Database (recommended):
    <ul>
      <li><strong>1 primary region</strong> (read / write)</li>
      <li>Up to <strong>5 secodary (read only) regions</strong>, replication lag is less than 1 second</li>
      <li>Up to <strong>16 read repliccas</strong> per secondary region</li>
      <li>Helps for decreasing latency</li>
      <li>Promotig another region (for disater recovery) has an RTO of &lt; 1 minute</li>
    </ul>
  </li>
</ul>

<h2 id="aurora-machine-learning">Aurora Machine Learning</h2>
<ul>
  <li>Enables you to add <strong>ML-based predictions</strong> to your applications via SQL</li>
  <li>Simple, optimized and secure integration between Aurora and AWS ML services</li>
  <li>Supported services
    <ul>
      <li><strong>Amazon SageMaker</strong> (use with any ML model)</li>
      <li><strong>Amazon Comprehend</strong> (for sentiment analysis)</li>
    </ul>
  </li>
  <li>You don’t need to have ML experience</li>
  <li>Use cases: <em>fraud detection, ads targeting, sentiment analysis, product recommendations</em></li>
</ul>

<h2 id="amazon-elasticache-overview">Amazon ElastiCache Overview</h2>
<ul>
  <li>The same way RDS is to get managed Relational Databases…</li>
  <li><strong>ElastiCache</strong> is to get managed Redis or Memcached</li>
  <li>Caches are in-memory databases with really high performance, low latency</li>
  <li>Helps reduce load off of databases for read intensive workloads</li>
  <li>Helps make your application stateless</li>
  <li>AWS takes care of OS maintanance / patching, optimizations, setup, configuration, monitoring, failure recovery and backups</li>
  <li>Using ElastiCache involves <strong>heavy application code changes</strong></li>
</ul>

<h2 id="elasticache-solution-architecture---db-cache">ElastiCache Solution Architecture - DB Cache</h2>
<ul>
  <li>Applications queries Elasticacche, if not available, get from RDS and store in ElastiCache</li>
  <li>Helps relieve load in RDS</li>
  <li>Cache must have an invalidation strategy to make sure only the most current data is used in there.</li>
</ul>

<h2 id="elasticache-solution-architecture---user-session-store">ElastiCache Solution Architecture - User Session Store</h2>
<ul>
  <li>User logs into any of the application</li>
  <li>The application <em>writes the session data into ElastiCache</em></li>
  <li>The user hits another instance of our application</li>
  <li>The instance retrieves the data ans the user is already logged in</li>
  <li>The user retrieve session from ElastiCache</li>
</ul>

<h2 id="elasticache-redis-vs-memcached">Elasticache: Redis vs Memcached</h2>
<ul>
  <li>Redis:
    <ul>
      <li>Multi AZ with Auto Failover</li>
      <li>Read replicas to scale read and have availability</li>
      <li>Data durability using AOF persistence</li>
      <li>Backup and restore features</li>
    </ul>
  </li>
  <li>Memcached
    <ul>
      <li>Multi-node for pariniong of data (sharding)</li>
      <li>No high availability (replicationn)</li>
      <li>Non persistent</li>
      <li>No Backup and restore</li>
      <li>Multi threaded architedture</li>
    </ul>
  </li>
</ul>

<h2 id="elasticache---cache-security">ElastiCache - Cache Security</h2>
<ul>
  <li>All caches in ElastiCache
    <ul>
      <li><strong>Do not support IAM authentication</strong></li>
      <li>IAM policies on ElastiCache are only used for <strong>AWS API-level security</strong></li>
    </ul>
  </li>
  <li>Redis AUTH
    <ul>
      <li>You <strong>can set a “password/token”</strong> when you ccreate a Redis cluster</li>
      <li>This is an extra level of security for your cache (on top of security groups)</li>
      <li>Support SSL in flight encryptionn</li>
    </ul>
  </li>
  <li>Memcached
    <ul>
      <li>Supports <strong>SASL-based authentication</strong> (advanced)</li>
    </ul>
  </li>
</ul>

<h2 id="patterns-for-elasticache">Patterns for ElastiCache</h2>
<ul>
  <li>Lazy Loading: all the read data is cached, data can become state in cache</li>
  <li>Write Through: Adds or update data in the cache when written to a DB (no scale data)</li>
  <li>Session Store: store temporary session data in a cache (using TTL features)</li>
  <li>Qoute: There are only two hard things in Computer Science: cache invalidation and naming things</li>
</ul>

<h2 id="elasticache---redis-use-case">ElastiCache - Redis Use Case</h2>
<ul>
  <li>Gaming leadeerboards are coomputationally complex</li>
  <li>Redis Sorted sets guarantee both uniqueness and element ordering</li>
  <li>Each time a new elemennt added, it’s ranked in real time, then added in correct order</li>
</ul>]]></content><author><name>Leo đẹp trai</name></author><category term="Fullstack" /><category term="Architect" /><category term="AWS" /><category term="aurora" /><category term="database" /><summary type="html"><![CDATA[Amazon Aurora Aurora is a proprietary technology from AWS (not open sourced) Postgress and MYSQL are both supported as Aurora DB (that means your drivers will work as if Aurora was a Postgres or MYSQL database) Aurora is “AWS cloud optimized” and claims5x performance improvement over MySQL on RDS, over 3x the performance of Postgres on RDS Aurora storage automatically grows in increements of 10GB, up to 128 T B. Aurora have 15 replicas while MYSQL has 5, and the replication process is faster (sub 10ms replica lag) Failover in Aurora is instantaneous. It’s HA (high Avaiability) native. Aurora costs more than RDS** (20% more)** - but is more efficient]]></summary></entry><entry><title type="html">AWS concept and classic Solutions Architecture</title><link href="https://zmerrychristmas.github.io/posts/aws-concept-and-classic-solutions-architecture/" rel="alternate" type="text/html" title="AWS concept and classic Solutions Architecture" /><published>2022-12-04T00:00:00+07:00</published><updated>2022-12-10T16:28:10+07:00</updated><id>https://zmerrychristmas.github.io/posts/aws-concept-and-classic-solutions-architecture</id><content type="html" xml:base="https://zmerrychristmas.github.io/posts/aws-concept-and-classic-solutions-architecture/"><![CDATA[<h1 id="aws-concept-for-solution-architect">AWS Concept for solution architect</h1>
<h2 id="aws-history">AWS History</h2>
<ul>
  <li>2002 Internally launched</li>
  <li>2003 Amazon infrastructure is one of their core strength. Idea to market</li>
  <li>2004 Launched publicly with SQS</li>
  <li>2006 Re-launched publicly with SQS, S3 &amp; EC2</li>
  <li>2007 Launched in Europe</li>
</ul>

<h2 id="aws-cloud-number-facts">AWS Cloud Number Facts</h2>
<ul>
  <li>In 2019, AWS had $35.02 billion in annual revenue</li>
</ul>

<h2 id="aws-cloud-use-cases">AWS Cloud Use Cases</h2>
<ul>
  <li>AWS enables you to build sophisticated, scalable applications</li>
  <li>Applicable to a diverse set of industries</li>
  <li>Use cases include
     - Enterprise IT, Backup &amp; Storage, Big Data analytics
     - Website hosting, Mobile &amp; Social Apps
     - Gaming</li>
</ul>

<h2 id="aws-global-infrastructure">AWS Global Infrastructure</h2>
<ul>
  <li>AWS Region</li>
  <li>AWS Availability Zones</li>
  <li>AWS Data centers</li>
  <li>AWS Edge Locations / Points of presence
<img src="https://ibb.co/ZM2twHd" alt="AWS infrastructure" title="AWS infrastructure" /></li>
</ul>

<h3 id="aws-regions">AWS Regions</h3>
<ul>
  <li>AWS has regions all around the world</li>
  <li>Names can be us-east-1, eu-west-3…</li>
  <li>A region is a <strong>cluster</strong> of <strong>data centers</strong></li>
  <li>Most AWS seervices are region-scoped</li>
</ul>

<h3 id="how-to-choose-an-aws-region">How to choose an AWS Region</h3>
<ul>
  <li><strong>Compliance</strong> with data goverance and legal requirements data never leaves a region without your explicit permission</li>
  <li><strong>Proximity</strong> to customers: reduced latency</li>
  <li><strong>Avaiable services</strong> with in a Region new services and new features aren’t avaiable in every Region</li>
  <li><strong>Pricing</strong> pricing varies region to region and is transparent in the sevice pricing page</li>
</ul>

<h3 id="aws-availability-zones">AWS Availability Zones</h3>
<ul>
  <li>Each region has many availability zones (usually 3, min is 2, max is 6).
    <ul>
      <li>ap-southeast-2a</li>
      <li>ap-southeast-2b</li>
      <li>ap-southeast-2c</li>
    </ul>
  </li>
  <li>Each availability zone (AZ) is one or more <strong>discrete data centers</strong> with redundant <strong>power</strong>, <strong>networking</strong>, and <strong>connectivity</strong></li>
  <li>They’re separate from each other, so that they’re isolated from disasters.</li>
  <li>They’re connected with high bandwidth ultra-low latency networking</li>
</ul>

<h3 id="aws-points-of-presence">AWS Points of Presence</h3>
<ul>
  <li>
    <table>
      <tbody>
        <tr>
          <td>Amazon has 216 points of presence (205 edge locations &amp;</td>
          <td> </td>
          <td>Regional caches) in 84 cities across 42 countries</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>Content is delivered to end users with low latency</li>
</ul>

<h3 id="tour-of-the-aws-console">Tour of the AWS console</h3>
<ul>
  <li>AWS hash Global Services
    <ul>
      <li>Identty and Access Management(IAM)</li>
      <li>Route 53(DNS service)</li>
      <li>CloudFront (Content Delivery Network)</li>
      <li>WAF (Web application firewall)</li>
    </ul>
  </li>
  <li>Most AWS services are region-scoped
    <ul>
      <li>Amazone EC2 (Infrastructure as a Service)</li>
      <li>Elastic Beanstalk</li>
      <li>Lambda (Function as a Service)</li>
      <li>Rekognition (Software as a Service)</li>
    </ul>
  </li>
  <li>Region Table</li>
</ul>

<h3 id="dnssec-domain-name-system-security-extensions">DNSSEC Domain Name System Security Extensions</h3>
<p>DNSSEC strengthens authentication in DNS using digital signatures based on public key cryptography. With DNSSEC , it’s not DNS queries and responses themselves that are cryptographically signed, but rather DNS data itself is signed by the owner of the data.</p>

<h2 id="aws-organizations">AWS Organizations</h2>
<p>It’s architecture and some of the benefits for businesses managing larger numbers of AWS Accounts.</p>
<ul>
  <li>The <strong>GENERAL</strong> account will become the <strong>MASTER</strong> account for the organisation</li>
  <li>We will invite the <strong>PRODUCTION</strong> account as a MEMBER account and create the <strong>DEVELOPMENT</strong> account as a MEMBER account.</li>
  <li>Finally - we will create an OrganizationAccountAccessRole in the production account, and use this role to switch between accounts.</li>
  <li>Create AWS Role</li>
  <li>Create Aws Account name</li>
  <li>Email invite</li>
</ul>

<h2 id="service-control-policies-scp">Service Control Policies (SCP)</h2>
<p>I introduce service control policies - a feature of AWS <strong>Organizations</strong> which allow <strong>restrictions</strong> to be placed on <strong>MEMBER</strong> accounts in the form of <em>boundaries</em>.
<strong>SCPs</strong> can be applied to the organization, to OU’s or to individual accounts.
<strong>Member</strong> accounts can be affected, the <strong>MANAGEMENT</strong> account cannot.
SCPs DON’T GIVE permission - they just control what an account CAN and CANNOT <em>grant</em> via identity policies.
ex: apply an SCP to the PRODUCTION account to test their capabilities.</p>

<h2 id="security-token-servicests">Security token service(STS)</h2>
<p>AWS provides AWS Security Token Service (AWS STS) as a <strong>web service</strong> that enables you to request <strong>temporary</strong>, <strong>limited-privilege</strong> credentials for AWS Identity and Access Management (<strong>IAM</strong>) users or for users you <strong>authenticate</strong> (federated users). This guide describes the AWS STS API.
By default, AWS Security Token Service (AWS STS) is available as a global service, and all AWS STS requests go to a single endpoint at https://sts.amazonaws.com.</p>
<ul>
  <li>sts:AssumeRole</li>
</ul>

<h2 id="iam-role-temporary-security-credentials">IAM Role Temporary Security credentials</h2>
<p>You can use the <strong>AWS Security Token Service</strong> (AWS STS) to <em>create</em> and <em>provide</em> trusted users with <strong>temporary security</strong> credentials that can control access to your AWS resources. Temporary security credentials work almost identically to the long-term access key credentials that your IAM users can use, with the following differences:</p>
<ul>
  <li>Temporary security credentials are short-term, as the name implies. They can be configured to last for anywhere from a few minutes to several hours. After the credentials expire, AWS no longer recognizes them or allows any kind of access from API requests made with them.</li>
  <li>Temporary security credentials are not stored with the user but are generated dynamically and provided to the user when <strong>requested</strong>. When (or even before) the temporary security credentials expire, the user can request new credentials, as long as the user requesting them still has <strong>permissions</strong> to do so.</li>
  <li>security-credentials</li>
  <li>example: <em>Revoking Temporary Credentials by curl</em>
    <ul>
      <li>permission revoke</li>
    </ul>
  </li>
</ul>

<h2 id="policies-and-permissions-in-iam">Policies and permissions in IAM</h2>
<ul>
  <li>Most <strong>policies</strong> are stored in AWS as JSON documents. AWS supports <strong>six</strong> <strong>types</strong> of policies:
    <ul>
      <li>identity-based policies,</li>
      <li>resource-based policies,</li>
      <li>permissions boundaries,</li>
      <li>Organizations SCPs,</li>
      <li>ACLs, and session policies.</li>
    </ul>
  </li>
  <li>Version – Specify the version of the policy language that you want to use. As a best practice, use the latest 2012-10-17 version.</li>
  <li>Statement – Use this main policy element as a container for the following elements. You can include more than one statement in a policy.</li>
  <li>Sid (Optional) – Include an optional statement ID to differentiate between your statements.</li>
  <li>Effect – Use Allow or Deny to indicate whether the policy allows or denies access.</li>
  <li>Principal (Required in only some circumstances) – If you create a resource-based policy, you must indicate the account, user, role, or federated user to which you would like to allow or deny access. If you are creating an IAM permissions policy to attach to a user or role, you cannot include this element. The principal is implied as that user or role.</li>
  <li>Action – Include a list of actions that the policy allows or denies.</li>
  <li>Resource (Required in only some circumstances) – If you create an IAM permissions policy, you must specify a list of resources to which the actions apply. If you create a resource-based policy, this element is optional. If you do not include this element, then the resource to which the action applies is the resource to which the policy is attached.</li>
  <li>Condition (Optional) – Specify the circumstances under which the policy grants permission.</li>
  <li>example: experience a few ways to access S3 using cross-account access</li>
  <li>example: access S3 using bucket policy</li>
</ul>

<h2 id="service-linked-role">Service linked role</h2>
<p>A service-linked role is a unique type of IAM role that is linked directly to an AWS service. Service-linked roles are predefined by the service and include all the permissions that the service requires to call other AWS services on your behalf. The linked service also defines how you create, modify, and delete a service-linked role. A service might automatically create or delete the role. It might allow you to create, modify, or delete the role as part of a wizard or process in the service. Or it might require that you use IAM to create or delete the role. <img src="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html" alt="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html" /></p>

<h2 id="resource-access-manager">Resource Access Manager</h2>
<p>Resource Access Manager (RAM) <em>allows</em> AWS resources to be shared between AWS Accounts.It can be used to support certain common architectures such as a Shared Services VPC.</p>

<h2 id="service-endpoints-and-quotas">Service endpoints and quotas</h2>
<ul>
  <li>To connect programmatically to an AWS service, you use an endpoint.</li>
  <li>Service quotas, also referred to as limits, are the maximum number of service resources or operations for your AWS account.</li>
  <li>Example:
    <ul>
      <li>Cloudwatch</li>
      <li>A quota request template</li>
    </ul>
  </li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
</pre></td><td class="rouge-code"><pre>aws service-quotas list-service-quotas <span class="se">\</span>
    <span class="nt">--service-code</span> cloudformation

list-aws-default-service-quotas
    <span class="nt">--service-code</span> &lt;value&gt;
    <span class="o">[</span><span class="nt">--cli-input-json</span> | <span class="nt">--cli-input-yaml</span><span class="o">]</span>
    <span class="o">[</span><span class="nt">--starting-token</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--page-size</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--max-items</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--generate-cli-skeleton</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--debug</span><span class="o">]</span>
    <span class="o">[</span><span class="nt">--endpoint-url</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--no-verify-ssl</span><span class="o">]</span>
    <span class="o">[</span><span class="nt">--no-paginate</span><span class="o">]</span>
    <span class="o">[</span><span class="nt">--output</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--query</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--profile</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--region</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--version</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--color</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--no-sign-request</span><span class="o">]</span>
    <span class="o">[</span><span class="nt">--ca-bundle</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--cli-read-timeout</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--cli-connect-timeout</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--cli-binary-format</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--no-cli-pager</span><span class="o">]</span>
    <span class="o">[</span><span class="nt">--cli-auto-prompt</span><span class="o">]</span>
    <span class="o">[</span><span class="nt">--no-cli-auto-prompt</span><span class="o">]</span>

request-service-quota-increase
    <span class="nt">--service-code</span> &lt;value&gt;
    <span class="nt">--quota-code</span> &lt;value&gt;
    <span class="nt">--desired-value</span> &lt;value&gt;
    <span class="o">[</span><span class="nt">--cli-input-json</span> | <span class="nt">--cli-input-yaml</span><span class="o">]</span>
    <span class="o">[</span><span class="nt">--generate-cli-skeleton</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--debug</span><span class="o">]</span>
    <span class="o">[</span><span class="nt">--endpoint-url</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--no-verify-ssl</span><span class="o">]</span>
    <span class="o">[</span><span class="nt">--no-paginate</span><span class="o">]</span>
    <span class="o">[</span><span class="nt">--output</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--query</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--profile</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--region</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--version</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--color</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--no-sign-request</span><span class="o">]</span>
    <span class="o">[</span><span class="nt">--ca-bundle</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--cli-read-timeout</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--cli-connect-timeout</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--cli-binary-format</span> &lt;value&gt;]
    <span class="o">[</span><span class="nt">--no-cli-pager</span><span class="o">]</span>
    <span class="o">[</span><span class="nt">--cli-auto-prompt</span><span class="o">]</span>
    <span class="o">[</span><span class="nt">--no-cli-auto-prompt</span><span class="o">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="rouge-code"><pre>{
    "Quotas": [
        {
            "ServiceCode": "xray",
            "ServiceName": "AWS X-Ray",
            "QuotaArn": "arn:aws:servicequotas:us-west-2::xray/L-C6B6F05D",
            "QuotaCode": "L-C6B6F05D",
            "QuotaName": "Indexed annotations per trace",
            "Value": 50.0,
            "Unit": "None",
            "Adjustable": false,
            "GlobalQuota": false
        },
        {
            "ServiceCode": "xray",
            "ServiceName": "AWS X-Ray",
            "QuotaArn": "arn:aws:servicequotas:us-west-2::xray/L-D781C0FD",
            "QuotaCode": "L-D781C0FD",
            "QuotaName": "Segment document size",
            "Value": 64.0,
            "Unit": "Kilobytes",
            "Adjustable": false,
            "GlobalQuota": false
        },
        {
            "ServiceCode": "xray",
            "ServiceName": "AWS X-Ray",
            "QuotaArn": "arn:aws:servicequotas:us-west-2::xray/L-998BFF16",
            "QuotaCode": "L-998BFF16",
            "QuotaName": "Trace and service graph retention in days",
            "Value": 30.0,
            "Unit": "None",
            "Adjustable": false,
            "GlobalQuota": false
        }
    ]
}
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="amazon-resource-names-arns">Amazon Resource Names (ARNs)</h2>
<h3 id="questions">Questions</h3>
<p><strong>1. What functionality does STS provide?</strong>
it generates short term credentials which can be used to interact with AWS resources.</p>

<p><strong>2. Which of the following is NOT an example of a ‘real’ identity which can be referenced by ARNs in resource policies?</strong>
IAM Groups</p>

<p><strong>3. How are role sessions revoked (Choose one)</strong>
A inline policy is added to the role with an explicit deny for role assumptions before .. NOW</p>

<p><strong>4. If an SCP on the AWS account allows S3, a managed policy attached to your identity allows S3 and an inline policy denys S3.. what is your effective access</strong> (Choose one)
Denied</p>

<p>5.<strong>An SCP on account B denies S3. A resource policy on the bucket in account B allows account A. An identity policy on Bob in Account A allows access to S3. What is the effective access when Bob accesses the bucket in account B</strong> (choose one)</p>

<h2 id="hash">Hash</h2>
<h2 id="ssltls">SSL/TLS</h2>
<h2 id="digital-signal">Digital Signal</h2>
<h2 id="aws-public-vs-private-services">AWS Public vs Private Services</h2>
<h2 id="aws-default-virtual-private-cloud-vpc">AWS Default Virtual Private Cloud (VPC)</h2>
<p>A default VPC is created once per region when an AWS account is first created.
There can only be one default VPC <strong>per region</strong>, and they can be deleted and recreated from the console UI .
They always have the <strong>same IP range and same ‘1 subnet per AZ’</strong> architecture.
This lesson details and demos the functionality of a default VPC.</p>

<h2 id="elastic-compute-cloud-ec2-basics">Elastic Compute Cloud (EC2) Basics</h2>
<ul>
  <li>IAAS: virtual services</li>
  <li>Private service by default - uses VPC networking</li>
</ul>

<h2 id="iam-section">IAM Section</h2>

<h3 id="iam-users--groups">IAM: Users &amp; Groups</h3>
<ul>
  <li>IAM = Identity and Access Management, Global service</li>
  <li><code class="language-plaintext highlighter-rouge">Root account</code> created by default, shouldn’t be used or shared</li>
  <li><code class="language-plaintext highlighter-rouge">Users</code> are people within your organization, and can be grouped</li>
  <li><code class="language-plaintext highlighter-rouge">Groups</code> only contain users, not other groups</li>
  <li><code class="language-plaintext highlighter-rouge">Users</code> don’t have to belong to a group, and user can belong to multiple groups</li>
</ul>

<h3 id="iam-permissions">IAM: Permissions</h3>
<ul>
  <li><strong>Users</strong> or <strong>Groups</strong> can be assigned JSON documents called policies</li>
  <li>These <strong>policies</strong> define the permissions of the users</li>
  <li>In AWS you apply the <strong>least privilege principle</strong> don’t give more permission than a user needs</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="w">
</span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2012-10-17"</span><span class="p">,</span><span class="w">
</span><span class="nl">"Statement"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ec2:Describe*"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">

    </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"elasticloadbalancing:Describe*"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"cloudwatch:ListMetrics"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"cloudwatch:GetMetricStatistics"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"cloudwatch:Describe*"</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
    </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="iam-policies-inheritance">IAM Policies inheritance</h3>
<p><img src="https://i.ibb.co/RH1gYDT/Screenshot-from-2022-09-14-10-44-50.png" alt="IAM Policies inheritance" title="IAM Policies inheritance" /></p>

<h3 id="iam-policies-structure">IAM Policies Structure</h3>
<ul>
  <li>Json structure
    <ul>
      <li>version: policy language version, alway include “2012-10-17”</li>
      <li>ID: an identifier for the policy</li>
      <li>Statement: one or more individual statements</li>
      <li>Sid</li>
      <li>Effect</li>
      <li>Principal</li>
      <li>Action</li>
      <li>Resource</li>
      <li>Condition</li>
    </ul>
  </li>
</ul>

<h3 id="iam--password-policy">IAM – Password Policy</h3>
<ul>
  <li>Strong passwords: higher security for your account</li>
  <li>In AWS, you can setup a password policy
    <ul>
      <li>Set a minimum password length</li>
      <li>Require specific character types</li>
      <li>includng uppercase letter</li>
      <li>lowercase letters</li>
      <li>numbers</li>
      <li>non-alphanumeric characters</li>
      <li>Allow all IAM users to change their own passwords</li>
      <li>Require users to change their password after some time</li>
      <li>Prevent password re-use</li>
    </ul>
  </li>
</ul>

<h3 id="multi-factor-authentication------mfa">Multi Factor Authentication    - MFA</h3>
<ul>
  <li>Users have access to your account and can possibly change configurations or delete resources in your AWS account</li>
  <li>You want to protect your Root Accounts and IAM users</li>
  <li>MFA = password you know + security device you own</li>
  <li>Main benefit of MFA: If a password is stolen or hacked the password is not compromised</li>
  <li>MFA virtual app or USB hardware Factor</li>
  <li>Hardware Key Fob MFA Device, Hardware Key Fob MFA Device</li>
</ul>

<h3 id="how-can-users-access-aws">How can users access AWS</h3>
<ul>
  <li>To access AWS, you have <em>three</em> options
    <ul>
      <li>AWS Management Console</li>
      <li>AWS Command line interface</li>
      <li>AWS software developer kit</li>
    </ul>
  </li>
  <li>Access keys are generated through the AWS Console, password don’t share</li>
  <li>Users manage their own access keys</li>
  <li>Access Key ID</li>
  <li>Secret Access Key</li>
  <li>Example
    <ul>
      <li>Access key ID: AKIASK4E37PV4983d6C</li>
      <li>Secret Access Key: AZPN3zojWozWCndIjhB0Unh8239a1bzbzO5fqqkZq</li>
    </ul>
  </li>
</ul>

<h3 id="whats-the-aws-cli">What’s the AWS CLI?</h3>
<ul>
  <li>A tool that enables you to interact with AWS services using commands in
your command-line shell</li>
  <li>Direct access to the public APIs of AWS services</li>
  <li>You can develop scripts to manage your resources</li>
  <li>It’s open-source https://github.com/aws/aws-cli</li>
  <li>Alternative to using AWS Management Console</li>
</ul>

<h3 id="whats-the-aws-sdk">What’s the AWS SDK?</h3>
<ul>
  <li>AWS Software Development Kit (AWS SDK)</li>
  <li>Language-specific APIs (set of libraries)</li>
  <li>Enables you to access and manage AWS services
programmatically</li>
  <li>Embedded within your application</li>
  <li>Supports
    <ul>
      <li>SDKs (JavaScript, Python, PHP, .NET, Ruby, Java, Go, Node.js,
C++)</li>
      <li>Mobile SDKs (Android, iOS, …)</li>
      <li>IoT Device SDKs (Embedded C, Arduino, …)</li>
    </ul>
  </li>
  <li>Example: AWS CLI is built on AWS SDK for Python</li>
</ul>

<h3 id="iam-roles-for-services">IAM Roles for Services</h3>
<ul>
  <li>Some AWS service will need to perform actions on your behalf</li>
  <li>To do so, we will assign permissions to AWS services with IAM Roles</li>
  <li>Common roles:
    <ul>
      <li>EC2 Instance Roles</li>
      <li>Lamba function roles</li>
      <li>Roles for CloudFormation</li>
    </ul>
  </li>
</ul>

<h3 id="iam-security-tools">IAM Security Tools</h3>
<ul>
  <li>IAM Credentials Report: A report that list all your account’s users and the status of their various credentials</li>
  <li>IAM Access Advisor (user-level): Access advisor shows the service permissions granted to a user and when those. You can use this information to revise your policies.</li>
</ul>

<h3 id="iam-guidelines--best-practices">IAM Guidelines &amp; Best Practices</h3>
<ul>
  <li>Don’t use the root account except for AWS account setup</li>
  <li>One physical user = One AWS user</li>
  <li>Assign user to groups and assign permissions to groups</li>
  <li>Create a strong password policy</li>
  <li>User and enforce the use of Multi Factor Authentication(MFA)</li>
  <li>Create and use Roles for giving permissions to AWS services</li>
  <li>User Access keys for programmactic access</li>
  <li>Audit permissions of your account with the IAM credentials report</li>
  <li>Never share IAM users &amp; Access Keys</li>
</ul>

<h3 id="iam-section--summary">IAM Section – Summary</h3>
<ul>
  <li>Users: mapped to a physical user, has a password for AWS console</li>
  <li>Groups: contains users only</li>
  <li>Policies: JSON document that outlines permissions for users or groups</li>
  <li>Roles: for EC2 instances or AWS services</li>
  <li>Security: MFA + Password policy</li>
  <li>Acess keys: access AWS using the CLI or SDK</li>
  <li>Audit: IAM credential reports &amp; IAM Access Advisor</li>
</ul>

<h1 id="ec2-basics">EC2 Basics</h1>

<h2 id="amazon-ec2">Amazon EC2</h2>
<ul>
  <li>EC2 is one of the most popular of AWS offering</li>
  <li>EC2 = Elastic Compute Cloud = IAAS
    <ul>
      <li>Renting virtual machines EC2</li>
      <li>Storing data on virtual drives EBS</li>
      <li>Distributing load acroos machines ELB</li>
      <li>Scaling the services using an auto-scaling group ASG</li>
    </ul>
  </li>
  <li>Knowing EC2 is fundamental to understand how the Cloud works</li>
</ul>

<h2 id="ec2-sizing--configuration-options">EC2 sizing &amp; configuration options</h2>
<ul>
  <li>Operating System (OS): Linux, Windows, MAC OS</li>
  <li>How much compute power and core: CPU</li>
  <li>How much random-access memory: RAM</li>
  <li>How much storage space:
    <ul>
      <li>Network-attached: EBS &amp; EFS</li>
      <li>Harkware: EC2 Instance Store</li>
    </ul>
  </li>
  <li>Network card speed of the card, public ip address</li>
  <li>Firewall rules: security group</li>
  <li>Boostrap script: EC2 User Data</li>
</ul>

<h2 id="ec2-user-data">EC2 User Data</h2>
<ul>
  <li>It is possible to bootstrap our instances using an EC2 User data script</li>
  <li>bootstrapping means launching commands when a machine starts</li>
  <li>That script is only run once at the instace first start</li>
  <li>EC2 user data is used to automate boot tasks such as
    <ul>
      <li>Install updates</li>
      <li>Install software</li>
      <li>Download common files from the internet</li>
      <li>Anything you can think of</li>
    </ul>
  </li>
  <li>The EC2 User data script runs with the root user</li>
  <li>Example:</li>
  <li>Web server is launched using EC2 user data</li>
</ul>

<h2 id="ec2-instance-types------overview">EC2 Instance Types    - Overview</h2>
<ul>
  <li>References to EC2 <a href="https://aws.amazon.com/ec2/instance-types/">instances</a></li>
  <li>example: m5.2xlarge</li>
  <li>m: instance class</li>
  <li>5: generate</li>
  <li>2xlarge: size within the instance class
 <img src="https://imgdb.net/7537" alt="All EC2 Instance type" title="All EC2 instances type" /></li>
</ul>

<h2 id="ec2-instance-types--general-purpose">EC2 Instance Types – General Purpose</h2>
<ul>
  <li>Great for a diversity of workloads such as web servers or code repositories</li>
  <li>Balance between:</li>
  <li>Compute</li>
  <li>Memory</li>
  <li>Networking</li>
  <li>Ex: Mac, t4g, t3, t3a, t2, M6g, M6I, M6a, M5, M5a, M5n, M5zn, M4, A1
<img src="https://imgdb.net/7534" alt="EC2 General purpose" title="EC2 General purpose" /></li>
</ul>

<h2 id="ec2-instance-types--compute-optimized">EC2 Instance Types – Compute Optimized</h2>
<ul>
  <li>Great for compute intensive tasks that require high performance processors:</li>
  <li>Batch processing workload</li>
  <li>Media transcoding</li>
  <li>High performance web servers</li>
  <li>High performance computing HPC</li>
  <li>Scientific modeling &amp; machine learning</li>
  <li>Dedicated gaming servers</li>
  <li>Ex: C7g, C6g, C6gn, C6I, C6a, Hpc6a, C5, C5a, C4
<img src="https://imgdb.net/7535" alt="Compute Optimized" title="Compute Optimized" /></li>
</ul>

<h2 id="ec2-instance-types------memory-optimized">EC2 Instance Types    - Memory Optimized</h2>
<ul>
  <li>Fast performance for workloads that process large data set in memory</li>
  <li>Use cases:</li>
  <li>High performance, relational/non-relational databases</li>
  <li>Distributed web scale cache store</li>
  <li>In-memory database optimized for BI</li>
  <li>Applications performing real-time processing of big unstructured data
<img src="https://imgdb.net/7537" alt="Memory Optimized" title="Memory optimized" /></li>
  <li>Ex: R6a, R6g, R6I. R5, R5a, R5b, R5n, R4, X2gd, X2ldn, X2ledn, X2lezn, X1, High Memory, z1d</li>
</ul>

<h2 id="ec2-instance-types--storage-optimized">EC2 Instance Types – Storage Optimized</h2>
<ul>
  <li>Great for storage-intensive tasks that require high, sequential read and write
access to large data sets on local storage</li>
  <li>Use cases:</li>
  <li>High frequency online transaction processing (OLTP) systems</li>
  <li>Relational &amp; NoSQL databases</li>
  <li>Cache for in-memory databases (for example, Redis)</li>
  <li>Data warehousing applications</li>
  <li>Distributed file systems</li>
  <li>Ex: Im4gn, Is4gen, I4i, I3, I3en, D2, D3, D3en, H1</li>
</ul>

<h2 id="ec2-instance-types--accelerated-computing">EC2 Instance Types – Accelerated Computing</h2>
<ul>
  <li>Hardware accelerators, co-processors, perform functions, floating point number calculations, graphics processing, data pattern matching</li>
  <li>Use case: Machine learning, high performace computing, computanional fluid dynamics</li>
  <li>Ex: P4, P3, P2, DL1, Trn1, Irn1, Inf1, G5, G5g, G4gn, G4ad, G3, F1, VT1</li>
</ul>

<h1 id="introduction-to-security-groups">Introduction to Security Groups</h1>
<ul>
  <li>Security groups are the fundamental of network security in AWS</li>
  <li>They control how traffic is allowed into or out of our EC2 instances</li>
  <li>Security groups only contain allow rules</li>
  <li>Security groups rules can reference by IP or by security group</li>
</ul>

<h2 id="security-groups-deeper-dive">Security Groups Deeper Dive</h2>
<ul>
  <li>Security groups are acting as a “firewall” on EC2 instances</li>
  <li>They regulate:</li>
  <li>Access to Ports</li>
  <li>Authorised IP ranges: IPv4 and IPv6</li>
  <li>Control of inbound network (from other to the instance)</li>
  <li>Control of outbound network (from the instance to other)
<img src="https://imgdb.net/7538" alt="Security Group" title="Security group" /></li>
</ul>

<h2 id="security-groups-good-to-know">Security Groups Good to know</h2>
<ul>
  <li>Can be attaced to multiple instances</li>
  <li>Locked down to a <em>region / VPC combination</em></li>
  <li>Does live “outside” the EC2    - if traffic is blocked the EC2 instance won’t see it</li>
  <li>It’s good to maintain one separate security group for SSH access</li>
  <li><strong>If your application is not accessible (time out), then it’s a security group issue</strong></li>
  <li><strong>If your application gives a “connection refused” error, then it’s an application error or it’s not lauched</strong></li>
  <li>All inbound traffic is blocked by default</li>
  <li>All outbout traffic is authorised by default
<img src="https://imgdb.net/7539" alt="security groups" title="security groups" /></li>
</ul>

<h2 id="classic-ports-to-know">Classic Ports to know</h2>
<ul>
  <li>22 = SSH</li>
  <li>21 = FTP</li>
  <li>22 = SFTP</li>
  <li>80 = HTTP</li>
  <li>443 = HTTPS</li>
  <li>3389 = RDP</li>
  <li>Ec2 instance connect is popular tool for ssh, ssh commancd is avaiable for all opeartion but withou windows version less than 10, so on you need Putty</li>
</ul>

<h1 id="ec2-instance-connect">EC2 Instance Connect</h1>
<ul>
  <li>Connect to your EC2 instance within your browser</li>
  <li>No need to use your key file that was downloaded</li>
  <li>The “magic” is that a temporary key is uploaded onto EC2 by AWS</li>
  <li>Work only out of the box Amazon Linux 2</li>
  <li>Need to make sure the port 22 is still opened!</li>
</ul>

<h2 id="ec2-instances-purchasing-options">EC2 Instances Purchasing Options</h2>
<ul>
  <li>On-demand Instances: short workload, predictable pricing, pay by second</li>
  <li>Reserved (1 &amp; 3 years)</li>
  <li>Reserved instances: long workloads</li>
  <li>Convertible Reserved Instances: long workloads with flexible instances</li>
  <li>Savings plans (1 &amp; 3 years): Commitment to an amount of usage, long workload</li>
  <li>Spot Instances: short workloads, cheap, can lose instances (less reliable)</li>
  <li>Dedicated Hosts: Book an entire physical server, control instance placement</li>
  <li>Dedicated Instances: No other customers will share your hardware</li>
  <li>Capacity Reservations: Reserve capacity in a specific AZ for any duration</li>
</ul>

<h2 id="ec2-on-demand">EC2 On Demand</h2>
<ul>
  <li>Pay for what you use</li>
  <li>Linux or WIndows: Bulling per second, after the first minute</li>
  <li>All other operating systems: billing per hour</li>
  <li>Has the highest cost but no upfront payment</li>
  <li>No long-term commitment</li>
  <li>Recommended for short-term and un-interupted workloads where you can’t predict how the application will behave</li>
</ul>

<h2 id="ec2-reserved-instances">EC2 Reserved Instances</h2>
<ul>
  <li>Up to 72% discounr compared to On-demand</li>
  <li>You reserve a specific instance attributes (Instance Type, Region, Tenancy, OS)</li>
  <li>Reservation Period    - 1 year(+discount) or 3 years (+++discount)</li>
  <li>Payment Options    - No upfront(+), Partial upfront(++), All upfront(+++)</li>
  <li>Reserved Instance’s Scope    - Regional or Zonal (reserve capacity in an AZ)</li>
  <li>Recommended for steady-state usage applications (think database)</li>
  <li>You can buy and sell in the Reserved Instance marketplace</li>
  <li>Convertible Reserved Instance</li>
  <li>Can change the EC2 instance type, instance family, OS, scope and tenacy</li>
  <li>Up to 66% discount</li>
</ul>

<h2 id="ec2-savings-plans">EC2 Savings Plans</h2>
<ul>
  <li>Get a discount based on long-term usage (up to 72%    - same as RIs)</li>
  <li>Commit to certain type of usage ($10/hour for 1 or 3 years)</li>
  <li>Usage beyond EC2 savings plans is billed at the On-Demand price</li>
  <li>Locked to a specific instance family &amp; AWS region (e.g, M5 in us-east-1)</li>
  <li>Flexible across:</li>
  <li>Instance Size</li>
  <li>OS</li>
  <li>Tenancy (Host, Dedicated, Default)</li>
</ul>

<h2 id="ec2-spot-instances">EC2 Spot Instances</h2>
<ul>
  <li>Can get a discount of up to 90% compared to On-demand</li>
  <li>Instances that you can “lose” at any point of time if your max price is less than the current spot price</li>
  <li>The Most cost-efficient instances in AWS</li>
  <li>Useful for workloads that are resilient to failure</li>
  <li>Batch jobs</li>
  <li>Data analysis</li>
  <li>Image processing</li>
  <li>Any distributed workloads</li>
  <li>Workloads with a flexible start and end time</li>
  <li>Not suitable for critical jobs or databases</li>
</ul>

<h2 id="ec2-dedicated-hosts">EC2 dedicated hosts</h2>
<ul>
  <li>A physical server with EC2 instance capacity fully dedicated to your use</li>
  <li>Allows you address compliance requirements and use your existing server bound software licenses (per-socket, per-core, pe—VM software licenses)</li>
  <li>Purchasing Options:
    <ul>
      <li>On-demand: pay per second for active Dedicated Host.</li>
      <li>Reserved: 1 or 3 years (No Upfront, Partial Upfront, All Upfront)</li>
    </ul>
  </li>
  <li>The most expensive option</li>
  <li>Useful for software that have complicated licensing model: BYOL Bring your own license</li>
  <li>Or for companies that have strong regulatory or compliance needs.</li>
</ul>

<h2 id="ec2-dedicated-instances">EC2 Dedicated Instances</h2>
<ul>
  <li>Instances run on hardware that’s dedicated to you</li>
  <li>May share hardware with other instances in same account</li>
  <li>No control over instance placement (Can move hardware after Stop/Start)</li>
</ul>

<h2 id="ec2-capacity-reservations">EC2 Capacity Reservations</h2>
<ul>
  <li>Reserve On-demand instance capacity in a specific AZ for any duration</li>
  <li>You always have access to EC2 capacity when you need it</li>
  <li>No time commitment, no billing discount</li>
  <li>Combine with Regional reserved instances and savings plans to benefit from billing discounts</li>
  <li>You’re charged at On-Demand rate whether you run instances or not</li>
  <li>Suitable for short-term, uninterrupted workloads that needs to be in a specific AZ</li>
</ul>

<h2 id="which-purchasing-option-is-right-for-me">Which purchasing option is right for me?</h2>
<ul>
  <li>On demand: coming and staying in resort whenever we like, we pay the full price</li>
  <li>Reserved: like planing ahead and if we plan to stay for a long time, we may get a good discount.</li>
  <li>Saving Plans: pay a cerain amount per hour for certain period and stay in any room type</li>
  <li>Spot Instance: The hotel allows people to bid for the empty rooms and the highest bidder keeps the rooms. You can get kicked out at any time</li>
  <li>Dedicated Hosts: We book an entire building of the resort</li>
  <li>Capacity Reservations: you book a room for a period with full price even you don’t stay in it</li>
</ul>

<h2 id="price-comparison">Price Comparison</h2>
<ul>
  <li>Example – m4.large – us-east-1
<img src="https://imgdb.net/7542" alt="Example price" title="Example price" /></li>
</ul>

<h2 id="ec2-spot-instance-requests">EC2 Spot Instance Requests</h2>
<ul>
  <li>Can get a discount of up to 90% compared to On-demand</li>
  <li>Define max spot price and get the instance while current spot price &lt; max
    <ul>
      <li>The hourly spot price varies based on offer and capacity</li>
      <li>If the current spot price &gt; your max price you can choose to stop or terminate your instance with a 2 minutes grace period</li>
    </ul>
  </li>
  <li>Other strategy: Spot Block
    <ul>
      <li>“block” spot instance during a specified time frame (1 to 6 hours) without interuptions</li>
      <li>In rare situations, the instance may be reclaimed</li>
    </ul>
  </li>
  <li>Used for batch jobs, data analysis, or workloads that are resilient to failures.</li>
  <li>Not greate for critical jobs or databases</li>
</ul>

<h2 id="how-to-terminate-spot-instances">How to terminate Spot Instances?</h2>
<p><img src="https://imgdb.net/7548" alt="Spot Instances Pricing" title="Spot Instances Pricing" /></p>

<h2 id="spot-fleets">Spot Fleets</h2>
<ul>
  <li>Spot Fleets = set of Spot instances + (optional) On-Demand instances</li>
  <li>The spot fleet will try to meet the target capacity with price constraints
    <ul>
      <li>Define possible launch pools: instance type (m5.large), OS, Avaiability Zone</li>
      <li>Can ave multiple launch pools, so that the fleet can choose</li>
      <li>Spot Fleet stops launching instances when reaching capacity or max cost</li>
    </ul>
  </li>
  <li>Strategies to allocate Spot Instances
    <ul>
      <li>lowestPrice: from the pool with the lowest price (cost optimizations, short workload)</li>
      <li>diversified: distributed across all pool (great for availability, long workloads)</li>
      <li>capacityOptimized: pool with the optimal capacity for the number of instances.</li>
    </ul>
  </li>
</ul>

<h2 id="ec2-section--summary">EC2 Section – Summary</h2>
<ul>
  <li>EC2 Instance: AMI (OS) + Instance Size (CPU + RAM) + Storage +
security groups + EC2 User Data</li>
  <li>Security Groups: Firewall attached to the EC2 instance</li>
  <li>EC2 User Data: Script launched at the first start of an instance</li>
  <li>SSH: start a terminal into our EC2 instances</li>
  <li>EC2 Instance Role: link to IAM roles</li>
  <li>Purchasing Options: On-Demand, Spot, Reversed (Standard + Convertible + Scheduled), Dedicated Host, Dedicated Instance</li>
</ul>

<h1 id="ec2--associate">EC2 – Associate</h1>
<ul>
  <li>Private vs Public IP (IPv4)</li>
  <li>Networking has two sorts of IPs. IPv4 and IPv6:
    <ul>
      <li>Ipv4: 1.160.10.240</li>
      <li>IPv6: 3ffe:1900:4545:3:200:f8ff:fe21:67cf</li>
    </ul>
  </li>
  <li>In this course, we will only be using IPv4.</li>
  <li>Ipv4 is still the most common</li>
  <li>IPv6 is newer and solves problems for the internet of Thing (IoT)</li>
  <li>IPv4 allow for 3.7 bilion different address in the public space</li>
  <li>IPv4: [0-255].[0-255].[0-255].[0-255].</li>
</ul>

<h2 id="private-vs-public-ip-ipv4">Private vs Public IP (IPv4)</h2>
<ul>
  <li>Public IP
    <ul>
      <li>public IP means the machine can be identified on the internet</li>
      <li>Must be unique across the whole web</li>
      <li>Can be geo-located easily</li>
    </ul>
  </li>
  <li>Private IP:
    <ul>
      <li>Private Ip means the machine can only be identified on a private network only</li>
      <li>The IP must be unique across the private network</li>
      <li>But two different private networks (two companies) can have the same IPs</li>
      <li>Machine connect to WWW using a NAT + internet gateway</li>
      <li>Only a specified range of IPs can be used as private IP</li>
    </ul>
  </li>
</ul>

<h2 id="elastic-ips">Elastic IPs</h2>
<ul>
  <li>When you stop and then start an EC2 instance, it can change its public IP.</li>
  <li>If you need to have a fixed public IP for your instance, you need an Elastic IP</li>
  <li>An Elastic IP is a public IPv4 IP you own as long as you dont delete it</li>
  <li>You can attach it to one instance at a time</li>
</ul>

<h2 id="elastic-ip">Elastic IP</h2>
<ul>
  <li>With an Elastic IP address, you can mask the failure of an instance or software by rapidy remapping the address to another instace in your account.</li>
  <li>You can only have 5 Elastic IP in your account</li>
  <li>Overall, try to avoid using Elastic IP:
    <ul>
      <li>They often reflect poor architectural decisions</li>
      <li>Instead, use a random public IP and register a DNS name to it</li>
      <li>Or as we’ll see later, use a load balancer and dont use a public IP</li>
    </ul>
  </li>
</ul>

<h2 id="in-aws-ec2--hands-on">In AWS EC2 – Hands On</h2>
<ul>
  <li>By default, your EC2 machine comes with:
    <ul>
      <li>A private IP for the internal AWS Network</li>
      <li>A public IP, for the WWW</li>
    </ul>
  </li>
  <li>When we are doing SSH into our EC2 machines:
    <ul>
      <li>We can’t use a private IP, because we are not in the same network</li>
      <li>We can only use the public IP</li>
    </ul>
  </li>
  <li>If your machine is stopped and then started <strong>the public IP can change</strong></li>
</ul>

<h2 id="placement-groups-cluster">Placement Groups Cluster</h2>
<ul>
  <li>Pros: Greate network (10 Gbs bandwith between instances with Enhanced Networking enabled)</li>
  <li>Cons: If the rack fails, all instances fail at the same time</li>
  <li>Use case:
    <ul>
      <li>Big Data job that needs to complete fast</li>
      <li>Application that needs extremely low latency and high network throughput
<img src="https://imgdb.net/7549" alt="Placement Cluster" title="placement cluster" /></li>
    </ul>
  </li>
</ul>

<h2 id="placement-groups-spread">Placement Groups Spread</h2>
<ul>
  <li>Pros:
    <ul>
      <li>Can span across avaiability zones (AZ)</li>
      <li>Reduced risk is simultaneous failure</li>
      <li>EC2 Instances are on different phusical hardware</li>
    </ul>
  </li>
  <li>Cons:
    <ul>
      <li>Limited to 7 instances per AZ per placement group</li>
    </ul>
  </li>
  <li>Use case:
    <ul>
      <li>Application that needs to maximize high availability</li>
      <li>Critical Applications where each instance must be isolated from failure from each other
<img src="https://imgdb.net/7550" alt="Groups spread" title="Groups spread" /></li>
    </ul>
  </li>
</ul>

<h2 id="placements-groups-partition">Placements Groups Partition</h2>
<ul>
  <li>Up to 7 partions per AZ</li>
  <li>Can span across multiple AZs in the same region</li>
  <li>Up to 100s of EC2 instances</li>
  <li>The instances in a partion do not share racks with the instances in the other partitions</li>
  <li>A partition failure can affect many EC2 but won’t affect other partitions</li>
  <li>EC2 instances get access to the partition information as metadata</li>
  <li>Use cases: HDFS, HBase, Cassandra, Kafka</li>
</ul>

<h2 id="elastic-network-interfaces-eni">Elastic Network Interfaces (ENI)</h2>
<ul>
  <li>Logical component in a VPC that represents a virtual network card</li>
  <li>The ENI can have the following attributes:
    <ul>
      <li>primary private IPv4, one or more secondary IPv4</li>
      <li>One Elastic IP (IPv4) per private IPv4</li>
      <li>One public IPv4</li>
      <li>One or more security groups</li>
      <li>A MAC address</li>
    </ul>
  </li>
  <li>You can create ENI independently and attach them on the fly (move them) on EC2 instances for failover</li>
  <li>Bound to a specific availability zone (AZ)</li>
</ul>

<h2 id="ec2-hibernate">Ec2 Hibernate</h2>
<ul>
  <li>We know we can stop, termiate instances
    <ul>
      <li>stop    - the data on disk (EBS) is kept intact in the next start</li>
      <li>terminate    - any EBS volumes (root) also set-up to be destroyed is lost</li>
    </ul>
  </li>
  <li>On start, the following happens:
    <ul>
      <li>First start: the OS boots &amp; the EC2 User Data script is run</li>
      <li>Following starts the OS boots up</li>
      <li>Then your application starts, caches get warmed up, and that can take time!</li>
    </ul>
  </li>
</ul>

<h2 id="ec2-hibernate-1">EC2 Hibernate</h2>
<ul>
  <li>Introducing Ec2 Hibernate</li>
  <li>The in-memory (RAM) state is preserved</li>
  <li>The instance boot is much faster!</li>
  <li>Under the hood: the RAM state is written to a file in the root EBS volume</li>
  <li>The root EBS volume must be encrypted</li>
  <li>Long-running processing</li>
  <li>Saving the RAM state</li>
  <li>Services that take time to initialize
<img src="https://imgdb.net/7551" alt="EC2 Hibernate" title="EC2 Hibernate" /></li>
</ul>

<h2 id="ec2-hibernate--good-to-know------accelerate-ec2">EC2 Hibernate – Good to know    - Accelerate EC2</h2>
<ul>
  <li>Supported Instance Families: C3, C4, C5, I3, M3, M4, R3, R4, T2, T3, …</li>
  <li>Instance RAM size: must be less than 150 GB</li>
  <li>Instance Size: not supported for bare metal instances</li>
  <li>AMI: Amazon Linux 2, Linux AMI, Ubuntu, RHEL, CentOS &amp; Windows…</li>
  <li>Root volume: must be EBS, encrypted, not instance store and large</li>
  <li>Available for <strong>On-Demand, Reserved and Spot</strong> instances</li>
  <li>An instance can NOT be hibernated more than <strong>60</strong> days</li>
</ul>

<h2 id="ec2-nitro">EC2 Nitro</h2>
<ul>
  <li>Underlying platform for the next generation of EC2 instances</li>
  <li>New virualization technology</li>
  <li>Allows for better performance
    <ul>
      <li>Better networking options (enhanced networking, HPC, IPv6)</li>
      <li>Higher speed EBS (Nitro is necessary for 64.000 EBS IOPS    - max 32000 on non-Nitro)</li>
    </ul>
  </li>
  <li>Better underlying security</li>
  <li>Instance types example:
    <ul>
      <li>Virtualized: AI, C5, C5a, C5ad, C5d, C5n, C6g, C6gn, D3, D3en, G4, I3en, Infi, M5a, M5ad, M5d, M5dn, M5n, ….</li>
      <li>Bare metal: a l.metal, c5.metal, c5n.metal, c6g.metal. c6gd.metal…</li>
    </ul>
  </li>
</ul>

<h2 id="ec2--understanding-vcpu">EC2 – Understanding vCPU</h2>
<ul>
  <li>Multiple threads can run on one CPU (multithreading)</li>
  <li>Each thread is represented as a vitual CPU (vCPU)</li>
  <li>Example: m5.2xlarge
    <ul>
      <li>4 CPU</li>
      <li>2 threads per CPU</li>
      <li>=&gt; 8 vCPU in total</li>
    </ul>
  </li>
</ul>

<h2 id="ec2--optimizing-cpu-options-reservations">EC2 – Optimizing CPU options: Reservations</h2>
<ul>
  <li>EC2 instances come with a combination of RAM and vCPU</li>
  <li>But in some cases, you may want to chage the vCPU options:
    <ul>
      <li>of CPU cores: you can decrease it (helpful if you need high RAM and low number of CPU)    - to decrease licensing costs</li>
      <li>of threads per core: disable multithreading to have I thread per CPU    - helpful for high performance computing (HPC) workloads</li>
    </ul>
  </li>
  <li>Only specified during instance launch</li>
</ul>

<h2 id="ec2--capacity-reservations-reservations">EC2 – Capacity Reservations: Reservations</h2>
<ul>
  <li>Capacity reservations ensure you have EC2 capacity when needed</li>
  <li>Manual or planned end date for the reservation</li>
  <li>No need for 1 or 3 year commitment</li>
  <li>Capacity access is immediate, you get billed as soon as it starts</li>
  <li>Specify:
    <ul>
      <li>The Availability Zone in which to reserve the capacity</li>
      <li>The number of instances for which to reserve capacity</li>
      <li>The instance attributes, including the instance type tenancy, and platform/OS</li>
    </ul>
  </li>
  <li>Combine with REserved Instances and Savings Plans to do cost saving</li>
</ul>

<h1 id="ec2-instance-storage-section">EC2 Instance Storage Section</h1>
<h2 id="whats-an-ebs-volume">What’s an EBS Volume?</h2>
<ul>
  <li>An EBS (Elastic Block Store) Volume is a network drive you can attack to your instances while they run</li>
  <li>It allows your instances to persist data, even after their termination</li>
  <li>They can only be mounted to one instance at a time (at the CCP level)</li>
  <li>They are bound to a specific availability zone</li>
  <li>Analogy Think of them as a “network USB stick”</li>
  <li>Free tier: 30 GB of free EBS storage of type General Purpose (SSD) or Magnetic per month</li>
</ul>

<h2 id="ebs-volume">EBS Volume</h2>
<ul>
  <li>It’s a network drive
    <ul>
      <li>It uses the network to communicate the instance, which means there might be a bit of latency</li>
      <li>It can be detached from an EC2 instance and attached to another one quickly</li>
    </ul>
  </li>
  <li>It’s locked to an Availability Zone
    <ul>
      <li>An EBS volume in us-east-1 a cannot be attached to us-east-1 b</li>
      <li>To move a volume across, you first need to snapshot it</li>
    </ul>
  </li>
  <li>Have a provisioned capacity (size in GBs, and IOPS)
    <ul>
      <li>You get billed for all the provisioned capacity</li>
      <li>You can increase the capacity of the drive over time
<img src="https://imgdb.net/7553" alt="EBS Volume" title="EBS Volume" /></li>
    </ul>
  </li>
</ul>

<h2 id="ebs--delete-on-termination-attribute">EBS – Delete on Termination attribute</h2>
<ul>
  <li>Controls the EBS behaviour when an EC2 instance terminates
    <ul>
      <li>By default, the root EBS volume is deleted (attribute enabled)</li>
      <li>By default, any other attached EBS volume is not deleted (attribute disabled)</li>
    </ul>
  </li>
  <li>This can be controlled by thw AWS console / AWS CLI</li>
  <li>Use case: preserve root volume when instance is terminated</li>
</ul>

<h2 id="ebs-snapshots">EBS Snapshots</h2>
<ul>
  <li>Make a backup (snapshot) of your EBS volume at a point in time</li>
  <li>Not necessary to detach volume to do snapshot, but recommended</li>
  <li>Can copy snapshots across AZ or Region</li>
</ul>

<h2 id="ebs-snapshots-features">EBS Snapshots Features</h2>
<ul>
  <li>EBS Snapshot Archive
    <ul>
      <li>Move a snapshot to an “archive tier” that is 75% cheaper</li>
      <li>Takes within 24 to 72 hours for restoring the archive</li>
    </ul>
  </li>
  <li>Recycle Bin for EBS Snapshots
    <ul>
      <li>Setup rules to retain deleted snapshots so you can recover them after an accidental deletion</li>
      <li>Specify retention (from 1 day to 1 year)</li>
    </ul>
  </li>
</ul>

<h2 id="ami-overview">AMI Overview</h2>
<ul>
  <li>AMI = Amazone Machine Image</li>
  <li>AMI are a customization of an EC2 instance
    <ul>
      <li>You add your own software, configuration, operating system, monitoring…</li>
      <li>Faster boot / configuration time because all your software is pre-packaged</li>
    </ul>
  </li>
  <li>AMI are built for a specfic region (and can be copied across regions)</li>
  <li>You can launch EC2 instances from:
    <ul>
      <li>A Public AMI: AWS provided</li>
      <li>Your own AMI: you make and maintain them yourself</li>
      <li>An AWS Marketplace AMI: an AMI someone else made (and potentially sells)</li>
    </ul>
  </li>
</ul>

<h2 id="ami-process-from-an-ec2-instance">AMI Process (from an EC2 instance)</h2>
<ul>
  <li>Start an EC2 instance and customize it</li>
  <li>Stop the instance (for data integrity)</li>
  <li>Build an AMI    - this will also create EBS snapshots</li>
  <li>Launch instances from other AMIs</li>
</ul>

<h2 id="ec2-instance-store">EC2 Instance Store</h2>
<ul>
  <li>EBS volumes are network drives with good but “limited” performance</li>
  <li>If you need a high performance hardware disk, use EC2 Instance Store</li>
  <li>Better I/O performance</li>
  <li>EC2 Instance Store lose their storage if they’re stopped (ephemeral)</li>
  <li>Good for buffer / cache / scratch data / temporary content</li>
  <li>Risk of data loss if hardware fails</li>
  <li>Backups and replication are your responsibility
<img src="https://imgdb.net/7555" alt="Instance Store" title="Instance Store" /></li>
</ul>

<h2 id="ebs-volume-types">EBS Volume Types</h2>
<ul>
  <li>EBS Volumes come in 6 types
    <ul>
      <li>gp2 / gp3 (SSD): General purpose SSD volumne that balances price and performance for a wide variety of workloads</li>
      <li>io1 / io2 (SSD) Highest-performance SSD volume for mission critical low latency or high throughput workloads</li>
      <li>stl (HDD): Low cost HDD volume designed for frequency accessed, throughput-intensive workloads</li>
      <li>scl (HDD): Lowest cost HDD volume designed for less frequently accessed workloads</li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>EBS Volumes are characterized in Size</td>
              <td>Throughput</td>
              <td>IOPS (I/O Ops Per Sec)</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
  <li>When in doubt always consult the AWS documentation</li>
  <li>Only gp2/gp3 and io1/io2 can be used as boot volumes</li>
</ul>

<h2 id="general-purpose-ssd">General Purpose SSD</h2>
<ul>
  <li>Cost effective storage, low-latency</li>
  <li>System boot volumes, Virtual desktops, Development and test environments</li>
  <li>1 GiB    - 16 TiB</li>
  <li>gp3:
    <ul>
      <li>Baseline of 3,000 IOPS and throughput of 125 MiB/s</li>
      <li>Can increase IOPS up to 16,000 and throughput up to 1000 MiB/s independently</li>
    </ul>
  </li>
  <li>gp2:
    <ul>
      <li>Small gp2 volumes can burst IOPS to 3,000</li>
      <li>Size of the volume and IOPS are linked, max IOPS is 16,000</li>
      <li>3 IOPS per GB, means at 5,334 GB we are at the max IOPS</li>
    </ul>
  </li>
</ul>

<h2 id="provisioned-iops-piops-ssd">Provisioned IOPS (PIOPS) SSD</h2>
<ul>
  <li>Critical business applications with sustained IOPS performance</li>
  <li>Or applications that need more than 16000 IOPS</li>
  <li>Great for databases workloads (sensitive to storate perf and consistency)</li>
  <li>io1/io2 (4Gib    - 16TB)
    <ul>
      <li>Max PIOPS: 64,000 for Nitro EC2 instances &amp; 32,000 for other</li>
      <li>Can increase PIOPS independently from storage size</li>
      <li>io2 have more durability and more IOPS per GiB (at the same price as io1)</li>
    </ul>
  </li>
  <li>io2 Block Express (4 GiB – 64 TiB):
    <ul>
      <li>Sub-millisecond latency</li>
      <li>Max PIOPS: 256,000 with an IOPS:GiB ratio of 1,000:1</li>
    </ul>
  </li>
  <li>Supports EBS Multi-attach</li>
</ul>

<h2 id="hard-disk-drives-hdd">Hard Disk Drives (HDD)</h2>
<ul>
  <li>Cannot be a boot volume</li>
  <li>125 GB to 16 TB</li>
  <li>Throughput Opitimed HDD (stl)
    <ul>
      <li>Big Data, Data warehouse, Log processing</li>
      <li>Max throughput 500 Mib/s    - max IOPS 500</li>
    </ul>
  </li>
  <li>Cold HDD (scl):
    <ul>
      <li>For data that is infrequently accessed</li>
      <li>Scenarios where lowest cost is important</li>
      <li>Max throughput 250 MiB/s    - max IOPS 250
<img src="https://imgdb.net/7557" alt="Volume Types Summary" title="Volume Types Summary" /></li>
    </ul>
  </li>
</ul>

<h2 id="ebs-multi-attach--io1io2-family">EBS Multi-Attach – io1/io2 family</h2>
<ul>
  <li>Attach the same EBS volume to multiple EC2 instances in the same AZ</li>
  <li>Each instance has full read &amp; write permissions to the volume</li>
  <li>Use case:
    <ul>
      <li>Archieve higher application availability in cluster Linux application</li>
      <li>Application must manage concurent write operations</li>
    </ul>
  </li>
  <li>Must use a file system that’s cluster-aware (not XFS, EX4, etc…)
<img src="https://imgdb.net/7558" alt="EBS Multi Attach" title="EBS Multi Attach" /></li>
</ul>

<h2 id="ebs-encryption">EBS Encryption</h2>
<ul>
  <li>When you create an encrypted EBS volume, you get the following
    <ul>
      <li>Data at rest is encrypted inside the volume</li>
      <li>All the data in flight moving between the instance and the volume is encrypted</li>
      <li>All snapshots are encrypted</li>
      <li>All volumes created from the snapshot</li>
    </ul>
  </li>
  <li>Encryption and decryption are handled transparently (you have nothing to do)</li>
  <li>Encryption has a minimal impact on latency</li>
  <li>EBS encryption leverages keys from KMS (AES-256)</li>
  <li>Copying an unencrypted snapshot allows encryption</li>
  <li>Snapshots of encrypted volumes are encrypted</li>
</ul>

<h2 id="encryption-encrypt-an-unencrypted-ebs-volume">Encryption: encrypt an unencrypted EBS volume</h2>
<ul>
  <li>Create an EBS snapshot of the volume</li>
  <li>Encrypt the EBS snapshot ( using copy )</li>
  <li>Create new ebs volume from the snapshot (the volume will also be encrypted)</li>
  <li>Now you can attach the encrypted volume to the original instance</li>
</ul>

<h2 id="amazon-efs--elastic-file-system">Amazon EFS – Elastic File System</h2>
<ul>
  <li>Managed NFS (network file system) that can be mounted on many EC2</li>
  <li>EFS works with EC2 instances in multi-AZ</li>
  <li>Highly available, scalable, expensive (3x gp2), pay per use
<img src="https://imgdb.net/7559" alt="Elastic file system" title="Elastice file system" /></li>
</ul>

<h2 id="amazon-efs--elastic-file-system-1">Amazon EFS – Elastic File System</h2>
<ul>
  <li>Use cases: content management, web serving, data sharing, Wordpress</li>
  <li>Use NFSv4.1 protocol</li>
  <li>Uses security group to control access to EFS</li>
  <li>Compatible with Linux bases AMI (not windows)</li>
  <li>Encryption at rest using KMS</li>
  <li>POSIX file system (~Linux) that has a standard file API</li>
  <li>File system scales automatically, pay per use, no capacity planning!</li>
</ul>

<h2 id="efs--performance--storage-classes">EFS – Performance &amp; Storage Classes</h2>
<ul>
  <li>EFS Scale
    <ul>
      <li>1000s of concurrent NFS clients, 10 GB+/s throughput</li>
      <li>Grow to Petabyte-scale network file system, automatically</li>
    </ul>
  </li>
  <li>Perfornmance mode (set at EFS creation time)
    <ul>
      <li>General purpose(default): latency sensitive use cases (web serve, CMS, etc…)</li>
      <li>Max I/O    - higher latency, throughput, highly parallel (big data, media processing)</li>
    </ul>
  </li>
  <li>Throughput mode
    <ul>
      <li>Bursting (1TB = 50Mib/s + brust of up to 100MiB/s)</li>
      <li>Provisioned: set your throughput regardless of storage size, ex: 1Gib/s for | TB storage</li>
    </ul>
  </li>
</ul>

<h2 id="efs--storage-classes">EFS – Storage Classes</h2>
<ul>
  <li>Storage Tiers (lifecycle management features    - move file after N days)
    <ul>
      <li>Standard: for frequently accessed files</li>
      <li>Infrequent access (EFS-IA): cost to retrieve files, lower price to store. Enable EFS-IA with a lifecycle policy</li>
    </ul>
  </li>
  <li>Availability and durability
    <ul>
      <li>Regional: Multi-AZ, great for prod</li>
      <li>One Zone: One AZ, greate for dev, backup enabled by default, compatible with IA (EFS one Zone-IA)</li>
    </ul>
  </li>
  <li>Over 90% in cost savings</li>
</ul>

<h2 id="ebs-vs-efs--elastic-block-storage">EBS vs EFS – Elastic Block Storage</h2>
<ul>
  <li>EBS volumes…
    <ul>
      <li>Can be attached to only one instance at a time</li>
      <li>Are locked at the Availability Zone (AZ) level</li>
      <li>GP2: IO increases if the disk size increases</li>
      <li>IO1: Can increase IO independently</li>
    </ul>
  </li>
  <li>To migrate an EBS volume across AZ
    <ul>
      <li>Take a snapshot</li>
      <li>Restore the snapshot to another AZ</li>
      <li>EBS backups use IO and you shouldn’t run them while your application is handling a lot of traffic</li>
      <li>Root EBS Volumes of instances get terminated by default if the EC2 instance get terminated (you can disable that)</li>
    </ul>
  </li>
</ul>

<h2 id="ebs-vs-efs--elastic-file-system">EBS vs EFS – Elastic File System</h2>
<ul>
  <li>Mounting 100s of instances across AZ</li>
  <li>EFS share website files (WordPress)</li>
  <li>Only for Linux Instances (POSIX)</li>
  <li>EFS has a higher price point than EBS</li>
  <li>Can leverage EFS-IA for cost savings</li>
  <li>Availability Zone 1 Availability Zone 2</li>
  <li>Remember: EFS vs EBS vs Instance Store</li>
</ul>

<h1 id="aws-fundamentals--part-ii">AWS Fundamentals – Part II</h1>
<blockquote>
  <p>Load Balancing, Auto Scaling Groups and EBS Volumes</p>
</blockquote>

<h2 id="scalability--high-availability">Scalability &amp; High Availability</h2>
<ul>
  <li>Scalability means that an application / system can handle greater loads by adapting</li>
  <li>There are two kinds of scalability
    <ul>
      <li>Vertical scalability</li>
      <li>Horizontal scalability</li>
    </ul>
  </li>
  <li>Scalability is linked but different to high availability</li>
  <li>Let’s deep dive into the distinction, using a call center as an example</li>
</ul>

<h2 id="vertical-saclability">Vertical saclability</h2>
<ul>
  <li>Vertically scalability means increasing the size of the instance</li>
  <li>For example, you application runs on a t2.micro</li>
  <li>Scaling that application vertically means running it on a t2.large</li>
  <li>Vertical scalability is very common for non distributed systems, such as a database.</li>
  <li>RDS, ElastiCache are service that can scale vertically</li>
  <li>There’s uusually a limit to how much you can vertically scale (hardware limit)</li>
</ul>

<h2 id="horizontal-scalability">Horizontal Scalability</h2>
<ul>
  <li>Horizontal scalability means increasing the number of instances / systems for your application</li>
  <li>Horizontal scaling implies distributed systems.</li>
  <li>This is very common for web applications / modern applications</li>
  <li>It’s easy to horizontally scale thanks the cloud offerings such as Amazon EC2</li>
</ul>

<h2 id="high-avaiability">High Avaiability</h2>
<ul>
  <li>High availability usually goes hand in hand with horizontal scaling</li>
  <li>High Avaiability means running your application / system in at least 2 data centers(==AZ)</li>
  <li>The goal of high availability can be passive (for RDS Multi AZ for example)</li>
  <li>The high availability can active (for horizontal scaling)</li>
</ul>

<h2 id="high-availability--scalability-for-ec2">High Availability &amp; Scalability For EC2</h2>
<ul>
  <li>Vertical Scaling: increase instance size (= scale up / down)
    <ul>
      <li>From: t2.nano    - 0.5G of RAM, 1 vCPU</li>
      <li>To: u-12tb1.metal – 12.3 TB of RAM, 448 vCPUs</li>
    </ul>
  </li>
  <li>Horizontal scaling: Increase number of instances (scale out / in)
    <ul>
      <li>Auto Scaling Group</li>
      <li>Load Balancer</li>
    </ul>
  </li>
  <li>High Availability: Run instances for the same application across multi AZ
    <ul>
      <li>Auto Scaling group multi AZ</li>
      <li>Load Balancer multi AZ</li>
    </ul>
  </li>
</ul>

<h2 id="what-is-load-balancing">What is load balancing?</h2>
<ul>
  <li>Load Balances are servers that forward traffic to multiple servers downstream</li>
</ul>

<h2 id="why-use-a-load-balancer">Why use a load balancer?</h2>
<ul>
  <li>Spread load across multiple downstream instances</li>
  <li>Expose a single point of access DNS to your application</li>
  <li>Seamlessly handle failures of downstream instances</li>
  <li>Do regular health checks to your instances</li>
  <li>Provide SSL termination HTTPS for your websites</li>
  <li>Enforce stickiness with cookies</li>
  <li>High availability across zones</li>
  <li>Separate public traffic from private traffic</li>
</ul>

<h2 id="why-use-an-elastic-load-balancer">Why use an Elastic Load Balancer?</h2>
<ul>
  <li>An Elastic Load Balancer is a managed load balancer
    <ul>
      <li>AWS gurantees that it will be working</li>
      <li>AWS takes care of upgrades, maintenace, high availability</li>
      <li>AWS provides only a few configuration knobs</li>
    </ul>
  </li>
  <li>It costs less to setup your own load balancer but it will be a lot more effort on your end</li>
  <li>It is integrated with many AWS offering / services
    <ul>
      <li>EC2, EC2 auto scaling groups, amazone ECS</li>
      <li>AWS Certificate Manager (ACM), CloudWatch</li>
      <li>Route 53, AWS WAF, AWS Global Accelerator</li>
    </ul>
  </li>
</ul>

<h2 id="why-use-an-elastic-load-balancer-1">Why use an Elastic Load Balancer?</h2>
<ul>
  <li>An Elastic load balancer is a managed load balancer
    <ul>
      <li>AWS guarantees that it will be wroking</li>
      <li>AWS takes care of upgrades, maintaince, high vailability</li>
      <li>AWS provides only a few configuration knobs</li>
    </ul>
  </li>
  <li>It costs less to setup your own load balancer but it will be a lot more effort on your end</li>
  <li>It is integrated with many AWS offering / services
    <ul>
      <li>EC2, EC2 Auto scaling groups, amazon ECS</li>
      <li>AWS Certificate Manager (ACM), CloudWatch</li>
      <li>Route 53, AWS WAF, AWS Global Accelerator</li>
    </ul>
  </li>
</ul>

<h2 id="health-checks">Health Checks</h2>
<ul>
  <li>Health checks are crucial for load balancers</li>
  <li>They enable the load balancer to know if instances it forwards traffic to are available to reply to requests</li>
  <li>The health check is done on a prt and a route (/health is common)</li>
  <li>If the response is not 200 (OK), then the instance is unhealthy</li>
</ul>

<h2 id="types-of-load-balancer-on-aws">Types of load balancer on AWS</h2>
<ul>
  <li>AWS has 4 kind of managed load balancers</li>
  <li>Classic Load Balancer (v1    - old generation)    - 2009    - CLB
    <ul>
      <li>HTTP, HTTPS, TCP, SSL (secure TCP)</li>
    </ul>
  </li>
  <li>Application load balancer (v2-new generation)    - 2016    - ALB
    <ul>
      <li>HTTP, HTTPS, Web Socket</li>
    </ul>
  </li>
  <li>Network load balancer (v2    - new generation)    - 2017    - NLB
    <ul>
      <li>TCP, TLS (secure TCP), UDP</li>
    </ul>
  </li>
  <li>Gateway load balancer    - 202    -GWLB
    <ul>
      <li>Operates at layer 3 (Network layer)    - IP Protocol</li>
    </ul>
  </li>
  <li>Overall, It is recommended to use the newer generation load balancers as they provide more features</li>
  <li>Some load balancers can setup as internal or external ELBs</li>
</ul>

<h2 id="classic-load-balancers-v1">Classic Load Balancers (v1)</h2>
<ul>
  <li>Supports TCP (layer 4), HTTP &amp; <strong>HTTPS (layer 7)</strong></li>
  <li>Health checks are TCP or HTTP based</li>
  <li>Fixed hostname XXX.region.elb.amazoneaws.com</li>
</ul>

<h2 id="application-load-balancer-v2">Application Load Balancer (v2)</h2>
<ul>
  <li>Application load balancers is <strong>layer 7 (HTTP)</strong></li>
  <li>Load balancing to multiple applications on the same machine</li>
  <li>Support for HTTP/2 and websocket</li>
  <li>Support redirects (from HTTP to HTTPS for example)</li>
</ul>

<h2 id="application-load-balancer-v2-1">Application load balancer (v2)</h2>
<ul>
  <li>Routing tables to different target groups
    <ul>
      <li>Routing based on path in URL</li>
      <li>based on Hostname in URL</li>
      <li>based on query string headers</li>
    </ul>
  </li>
  <li>ALB are a great fit for micro services &amp; container-based application</li>
  <li>Has a port mapping feature to redirect to a dynamic port in ECS</li>
  <li>In comparison, we’d need multiple classic load balancer per application
<img src="https://imgdb.net/7572" alt="Application Load Balancer (v2) HTTP Based Traffic" title="HTTP BAsed Traffic" /></li>
</ul>

<h2 id="application-load-balancer-v2-target-groups">Application Load Balancer (v2) Target Groups</h2>
<ul>
  <li>EC2 instances (can be managed by an Auto Scaling Group) - HTTP</li>
  <li>ECS tasks (managed by ECS itself) - HTTP</li>
  <li>Lamba functions - HTTP request is transalted into a JSON event</li>
  <li>IP Addresses - must be private IPs</li>
  <li>ALB can route to multiple target groups</li>
  <li>Health checks are at the target group level</li>
  <li><img src="https://imgdb.net/7573" alt="Application Load Balancer (v2) Query Strings/Parameters Routing" title="Query Strings/Parameters Routing" /></li>
</ul>

<h2 id="application-load-balancer-v2-good-to-know">Application Load Balancer (v2) Good to Know</h2>
<ul>
  <li>Fixed hostname (XXX.region.elb.amazoneaws.com)</li>
  <li>The application servers dont see the IP of the client directly</li>
  <li>The true IP of the client is inserted in the header X-FORWARDED-For</li>
  <li>We can also get Port (X-Forwarded-Port) and proto (X-Forwarded-Proto)</li>
</ul>

<h2 id="network-load-balancer-v2">Network Load Balancer (v2)</h2>
<ul>
  <li>Network load balancers (layer 4) allow to:</li>
  <li>Forward TCP &amp; UDP traffic to your instances</li>
  <li>Handle milions of request per seconds</li>
  <li>Less latency ~ 100ms (vs 400 ms for ALB)</li>
  <li>NLB has one static Ip per AZ, and supports assigning Elastic IP(helpful for whitelisting specific IP)</li>
  <li>NLB are used for extreme performance, TCP or UDP traffic</li>
  <li>Not included in the AWS free tier</li>
</ul>

<h2 id="network-load-balancer-v2-tcp-layer-4-based-traffic">Network load balancer (v2) TCP (layer 4) based traffic</h2>
<p><img src="https://imgdb.net/7574" alt="Based traffic" title="based on traffic" /></p>

<h2 id="network-load-balancer--target-groups">Network Load Balancer – Target Groups</h2>
<ul>
  <li>EC2 instance</li>
  <li>IP Address - must be private IPs</li>
  <li>Application load balancer</li>
</ul>

<h2 id="gateway-load-balancer">Gateway Load Balancer</h2>
<ul>
  <li>Deploy, scale, and manage a fleet of 3 party network virtual appliances in AWS</li>
  <li>Example: Firewalls, Instrusion detection and prevention systems, deep packet inspection systems, payload manipulation, …</li>
  <li>Operates at layer 3 (Network layer) Ip packets</li>
  <li>Combines the following functions:</li>
  <li>Transparent Network Gateway: single entry/exit for all traffic</li>
  <li>Load Balancer: distributes traffic to your virtual appliances</li>
  <li>Uses the Geneve protocol on port 6081</li>
</ul>

<h2 id="gateway-load-balancer---target-groups">GAteway load balancer - Target Groups</h2>
<ul>
  <li>EC2 instances</li>
  <li>IP Addresses - must be private IPs</li>
</ul>

<h2 id="sticky-sessions-session-affinity">Sticky Sessions (Session Affinity)</h2>
<ul>
  <li>It is possible to implement stickiness so that the same client is always redirected to the same instances behind a load balancer</li>
  <li>This works for classic load balancers &amp; application load balancers</li>
  <li>The “cookie” used for stickiness has an expiration date you control</li>
  <li>Use case: make sure the use doesn’t lost his session data</li>
  <li>Enabling stickiness may bring imbalance to the load over the backend EC2 instances</li>
</ul>

<h2 id="sticky-sessions---cookie-names">Sticky Sessions - Cookie Names</h2>
<ul>
  <li>Application-based Cookies
    <ul>
      <li>Custom cookie</li>
      <li>Can include any custom attributes required by the application</li>
      <li>Cookie name must be specified individually for each target group</li>
      <li>Don’t use AWSALB.AWSALBTB (reserved for use by the ELB)</li>
    </ul>
  </li>
  <li>Application cookie
    <ul>
      <li>Generated by the load balancer</li>
      <li>Cookie name is AWSALBAPP</li>
    </ul>
  </li>
  <li>Duration based cookies
    <ul>
      <li>Cookie generated by the load balancer</li>
      <li>Cookie name is AWSALB for ALB, AWSELB for CLB</li>
    </ul>
  </li>
</ul>

<h2 id="cross-zone-load-balancing">Cross-Zone Load Balancing</h2>
<ul>
  <li>With Cross-Zone Load Balancing: Each load balancer instance distributes evently across all registered instances in all AZ</li>
  <li>Without Cross zone load balancing: Request are distributed in the instances of the node of the elastic load balancer</li>
</ul>

<h2 id="cross-zone-load-balancing-1">Cross-Zone Load Balancing</h2>
<ul>
  <li>Application load balancer
    <ul>
      <li>Always on (can’t be disabled)</li>
      <li>No charges for inter AZ data</li>
    </ul>
  </li>
  <li>Network Load Balancer
    <ul>
      <li>Disabled by default</li>
      <li>you pay charge($) for inter AZ data if enabled</li>
    </ul>
  </li>
  <li>Classic Load Balancer
    <ul>
      <li>Disabled by default</li>
      <li>No charges for inter AZ data if enabled</li>
    </ul>
  </li>
</ul>

<h2 id="high-availability-ha">High Availability (HA)</h2>
<p>aims to ensure an agreed level of operational performance ussually uptime, for a higher than normal period.</p>
<ul>
  <li>99.9%(Three 9’s) = 8.77 hours p/year downtime</li>
  <li>99.999%(Five 9’s) = 5.26 minutes p/year downtime</li>
  <li>aims zero downtime</li>
  <li>Minimise any outages</li>
</ul>

<h2 id="fault-tolerance-ft">Fault-Tolerance (FT)</h2>
<ul>
  <li>is the property that enables a system to continue operating properly in the event of the failure of some (one or more faults within) of its components</li>
  <li>Systems design with plan fault tolerance</li>
  <li>Operate through faults</li>
</ul>

<h2 id="disater-recoverydr">Disater recovery(DR)</h2>
<ul>
  <li>a set of polocies, tools and procedures to <strong>enable the recovery</strong> or <strong>continuation</strong> of vital technology infrastructure and systems following a natural or human-inclued disaster</li>
  <li>Pre planning ——————–&gt; DR Process</li>
  <li>
    <p>Used when these don’t work
  <img src="https://ibb.co/TY6Mhtm" alt="" /></p>

    <p># Classic Solutions Architecture</p>
  </li>
</ul>

<h2 id="section-introduction">Section Introduction</h2>
<ul>
  <li>These solutions architectures are the best part of this course</li>
  <li>Let’s understand how all the technologies we’ve seen work together</li>
  <li>This is a section you need to be 100% comfortable with</li>
  <li>We’ll see the progression of a Solution’s architect mindset through many sample case studies:
    <ul>
      <li>WhatIsTheTime.Com</li>
      <li>MyClothes.Com</li>
      <li>MyWordPress.Com</li>
      <li>Instantiating applications quickly</li>
      <li>Beanstalk</li>
    </ul>
  </li>
</ul>

<h2 id="stateless-web-app-whatisthetimecom">Stateless Web App: WhatIsTheTime.com</h2>
<ul>
  <li>WhatIsTheTime.com allows people to know what time it is</li>
  <li>We don’t need a database</li>
  <li>We want to start small and can accept downtime</li>
  <li>We want to fully scale vertically and horizontally, no downtime</li>
  <li>Let’s go through the Solutions Architect journey for this app</li>
  <li>Let’s see how we can proceed!
    <h2 id="stateless-web-app-what-time-is-it-starting-simple">Stateless web app: What time is it? Starting simple</h2>
    <p><img src="https://imgdb.net/storage/uploads/3f1281a36220c72f5dcadc031d0b36773c146604a91b2ea9832a49ea6b7cb43c.png" alt="" /></p>
  </li>
</ul>

<h2 id="stateless-web-app-what-time-is-it-scaling-vertically">Stateless web app: What time is it? Scaling vertically</h2>
<p><img src="https://imgdb.net/storage/uploads/48552f1cb1d38f22696488a782e1b72482b269d85a6318dd096050baf407518d.png" alt="" /></p>

<h2 id="stateless-web-app-what-time-is-it-scaling-horizontally">Stateless web app: What time is it? Scaling horizontally</h2>
<p><img src="https://imgdb.net/storage/uploads/be45fc039578ede45694b18ba6afb10a1d24823a5df87c5eb903e3997847b569.png" alt="" /></p>

<h2 id="stateless-web-app-what-time-is-it-scaling-horizontally-1">Stateless web app: What time is it? Scaling horizontally</h2>
<p><img src="https://imgdb.net/storage/uploads/ac2fde429ee06cd9c2b03e3797e2cbf189bdbfc2ce4c19d3054fee7b2190f5aa.png" alt="" /></p>

<h2 id="stateless-web-app-what-time-is-it-scaling-horizontally-adding-and-removing-instances">Stateless web app: What time is it? Scaling horizontally, adding and removing instances</h2>
<p><img src="https://imgdb.net/storage/uploads/800e3afd13b9dc55f99d3a88e18c683232f440bcd2a83341be7f3853ddce39f5.png" alt="" /></p>

<h2 id="stateless-web-app-what-time-is-it-scaling-horizontally-with-a-load-balancer">Stateless web app: What time is it? Scaling horizontally, with a load balancer</h2>
<p><img src="https://imgdb.net/storage/uploads/000046745e3a3ac4b6e11a89c8c50dda405e4449c07e081b766d46099e480fae.png" alt="" /></p>

<h2 id="stateless-web-app-what-time-is-it-scaling-horizontally-with-an-auto-scaling-group">Stateless web app: What time is it? Scaling horizontally, with an auto-scaling group</h2>
<p><img src="https://imgdb.net/storage/uploads/2a4b112c37d56a997ecf56511ae2a219155293add80f93d741e5af2cdabc1185.png" alt="" /></p>

<h2 id="stateless-web-app-what-time-is-it-making-our-app-multi-az">Stateless web app: What time is it? Making our app multi-AZ</h2>
<p><img src="https://imgdb.net/storage/uploads/1ea054d39476bf2043c2c96ea1cb2a7511f496001c617e497af3e28726bdbb72.png" alt="" /></p>

<h2 id="minimum-2-az--lets-reserve-capacity">Minimum 2 AZ =&gt; Let’s reserve capacity</h2>
<p><img src="https://imgdb.net/storage/uploads/c257dfb6fa0fe97806842c16916811b45b01159204b45ae88ef232e47fe6962e.png" alt="" /></p>

<h2 id="in-this-lecture-weve-discussed">In this lecture we’ve discussed…</h2>
<ul>
  <li>PUblic vs Private IP and EC2 instances</li>
  <li>Elastic IP vs Route 53 vs Load Balancers</li>
  <li>Route 53 TTL, A records and Alias Records</li>
  <li>Maintaining EC2 instances manually vs Auto Scaling Groups</li>
  <li>Multi AZ to survive disasters</li>
  <li>ELB health Checks</li>
  <li>Security GRoup Rules</li>
  <li>Reservation of capacity for costing saving when possible</li>
  <li>We’re considering 5 pillars for a well architected application: costs, performance, reliability, security, operational excellence</li>
</ul>

<h2 id="stateful-web-app-myclothescom">Stateful Web App: MyClothes.com</h2>
<ul>
  <li>MyClothes.com allows people to buy clothes online.</li>
  <li>There’s a shopping cart</li>
  <li>Our website is having hundreds of users at the same time</li>
  <li>We need to scale, maintain horizontal scalability and keep our web application as stateless as possible</li>
  <li>Users should not lose their shopping cart</li>
  <li>Users should have their details (address, etc) in a database</li>
  <li>Let’s see how we can proceed!</li>
</ul>

<h2 id="stateful-web-app-myclothescom-1">Stateful Web App: MyClothes.com</h2>
<p><img src="https://imgdb.net/storage/uploads/32b1f46e76f5194a59484cf8431bb905ae847053b38151a6710cbcb0ce696914.png" alt="" /></p>

<h2 id="stateful-web-app-myclothescom-introduce-stickiness-session-affinity">Stateful Web App: MyClothes.com Introduce Stickiness (<strong>Session Affinity</strong>)</h2>
<p><img src="https://imgdb.net/storage/uploads/d15c8884a5ca0bd506448b56551eb44e9015fde9a1f613f4d73450f973e8244f.png" alt="" /></p>

<h2 id="stateful-web-app-myclothescom-introduce-user-cookies">Stateful Web App: MyClothes.com Introduce User Cookies</h2>
<p><img src="https://imgdb.net/storage/uploads/a7abacd4948a549e408abaae029a78472d3e7db0dbc3d03c6661c87c50b52dcf.png" alt="" /></p>

<h2 id="stateful-web-app-myclothescom-storing-user-data-in-a-database">Stateful Web App: MyClothes.com Storing User Data in a database</h2>
<p><img src="https://imgdb.net/storage/uploads/b188d9be8d4b277010e16d38a77341400983ac43524e5b039129b0a14a95e114.png" alt="" /></p>

<h2 id="stateful-web-app-myclothescom-scaling-reads">Stateful Web App: MyClothes.com Scaling Reads</h2>
<p><img src="https://imgdb.net/storage/uploads/12f6959c537f7953d73d17fd2f90cd443d81978bcc921400d7e8d4d7e3742de9.png" alt="" /></p>

<h2 id="stateful-web-app-myclothescom-scaling-reads-alternative--write-through">Stateful Web App: MyClothes.com Scaling Reads (Alternative) – Write Through</h2>
<p><img src="https://imgdb.net/storage/uploads/09805153c5bec018cd04763a7a601cf05e862dde7b7c242cfeb39453218a5df5.png" alt="" /></p>

<h2 id="stateful-web-app-myclothescom-multi-az--survive-disasters">Stateful Web App: MyClothes.com Multi AZ – Survive disasters</h2>
<p><img src="https://imgdb.net/storage/uploads/f53a9b6ea47d87ac3924cc962d408c1c444d9863467268d21c8f9f480b90d13e.png" alt="" /></p>

<h2 id="stateful-web-app-myclothescom-security-groups">Stateful Web App: MyClothes.com Security Groups</h2>
<p><img src="https://imgdb.net/storage/uploads/3fe702ebb99a48b268ad0d023b04477522d800898e38d342d06e19b0930de9f7.png" alt="" /></p>

<h2 id="in-this-lecture-weve-discussed-3-tier-architectures-for-web-applications">In this lecture we’ve discussed… 3-tier architectures for web applications</h2>
<ul>
  <li>ELB sticky sessions</li>
  <li>Web clients for storing cookies and making our web app sateless</li>
  <li>ElasticCache
    <ul>
      <li>For storing sessions (alternative: dynamoDB)</li>
      <li>For caching data from RDS</li>
      <li>Multi AZ</li>
    </ul>
  </li>
  <li>RDS
    <ul>
      <li>For storing user data</li>
      <li>Read replicas for caling reads</li>
      <li>Multi AZ for disaster recovery</li>
    </ul>
  </li>
  <li>Tigh Security with security groups referencing each other</li>
</ul>

<h2 id="stateful-web-app-mywordpresscom">Stateful Web App: MyWordPress.com</h2>
<ul>
  <li>We are trying to create a fully scalable WordPress website</li>
  <li>We want that website to access and correctly display picture uploads</li>
  <li>Our user data, and the blog content should be stored in a MySQL database</li>
  <li>Let’s see how we can achieve this!</li>
</ul>

<h2 id="stateful-web-app-mywordpresscom-rds-layer">Stateful Web App: MyWordPress.com RDS layer</h2>
<p><img src="https://imgdb.net/storage/uploads/bcc9f2ce6247cdada7016ad997ae154615315e19aeded4838bfc91ca74038d37.png" alt="" /></p>

<h2 id="stateful-web-app-mywordpresscom-scaling-with-aurora-multi-az--read-replicas">Stateful Web App: MyWordPress.com Scaling with Aurora: Multi AZ &amp; Read Replicas</h2>
<p><img src="https://imgdb.net/storage/uploads/7869aa0e8550ea2fba2cd787d75ff80ffb8b6817ab5a9e253a56d3c367613b97.png" alt="" /></p>

<h2 id="stateful-web-app-mywordpresscom-storing-images-with-ebs">Stateful Web App: MyWordPress.com Storing images with EBS</h2>
<p><img src="https://imgdb.net/storage/uploads/995d9336c2bfb1c483d8c024a015d8c7c79a48f6749eff56339efb3907092f61.png" alt="" /></p>

<h2 id="stateful-web-app-mywordpresscom-storing-images-with-ebs-1">Stateful Web App: MyWordPress.com Storing images with EBS</h2>
<p><img src="https://imgdb.net/storage/uploads/432996262b19c001f8b7d5c1b71523e3ec83040f995c6ef42ffa07000215a38c.png" alt="" /></p>

<h2 id="stateful-web-app-mywordpresscom-storing-images-with-efs">Stateful Web App: MyWordPress.com Storing images with EFS</h2>
<p><img src="https://imgdb.net/storage/uploads/e18604de4215ca2138440a1c334b1092a9393578075a0a9b62dd6a35c5d8baf7.png" alt="" /></p>

<h2 id="in-this-lecture-weve-discussed-1">In this lecture we’ve discussed…</h2>
<ul>
  <li>Aurora Database to have easy Multi-AZ and Read-Replicas</li>
  <li>Storing data in EBS (single instance application)</li>
  <li>Vs Storing data in EFS (distributed application)</li>
</ul>

<h2 id="instantiating-applications-quickly">Instantiating Applications quickly</h2>
<ul>
  <li>When launching a full stack (EC2, EBS, RDS), it can take time to:
    <ul>
      <li>Install applications</li>
      <li>Insert initial (or recovery) data</li>
      <li>Configure everything</li>
      <li>Launch the application</li>
    </ul>
  </li>
  <li>We can take advantage of the cloud to speed that up!</li>
</ul>

<h2 id="instantiating-applications-quickly-1">Instantiating Applications quickly</h2>
<ul>
  <li>EC2 Instances:
    <ul>
      <li>Use a Golden AMI: Install your applications, OS dependencies etc.. beforehand and launch your EC2 instance from the Golden AMI</li>
      <li>Bootstrap using User Data: For dynamic configuration, use User Data scripts</li>
      <li>Hybrid: mix Gloden AMI and user Data (Elastic Beanstalk)</li>
    </ul>
  </li>
  <li>RDS Databases:
    <ul>
      <li>Restore from a snapshot the database will have schemas and data ready!</li>
    </ul>
  </li>
  <li>EBS Volumes:
    <ul>
      <li>Restore from a snapshot: the disk will already be formatted and have data!</li>
    </ul>
  </li>
</ul>

<h2 id="typical-architecture-web-app-3-tier">Typical architecture: Web App 3-tier</h2>
<p><img src="https://imgdb.net/storage/uploads/963e0d2b28ac9b442ebfac34b1bfc7724cba187d3384c78f2f2fd8a885107fae.png" alt="" /></p>

<h2 id="developer-problems-on-aws">Developer problems on AWS</h2>
<ul>
  <li>Manging infrastructure</li>
  <li>Deploying Code</li>
  <li>Configuring all the databases, load balancers, etc</li>
  <li>Scaling concerns</li>
  <li>Most web apps have the same architecture (ALB + ASG)</li>
  <li>All the developers want is for their code to run!</li>
  <li>Possibly, consistency across different applications and environments</li>
</ul>

<h2 id="elastic-beanstalk---overview">Elastic Beanstalk - Overview</h2>
<ul>
  <li>Elastic Beantalk is a developer centric view of delpoying an application on AWS</li>
  <li>It uses all the component’s we’ve seen before: EC2, ASG, ELB, RDS, …</li>
  <li>Managed service:
    <ul>
      <li>Automatically handles capacity provisoning, load balancing, scaling, application health monitoring, instance configuration, …</li>
      <li>Just the application code is the responsibility of the developer</li>
    </ul>
  </li>
  <li>We still have full control over the configuration</li>
  <li>Beanstalk is free but you pay for the underlying instances</li>
</ul>

<h2 id="elastic-beanstalk--components">Elastic Beanstalk – Components</h2>
<ul>
  <li>Application: collection of ElasticBeantalk components (environments, versions, configurations, …)</li>
  <li>Application version: an iteration of your application code</li>
  <li>Environment
    <ul>
      <li>Collection of AWS resources running an application version (only one application version at a time)</li>
      <li>Tiers: Web Server Environment Tier &amp; Workerd Environment Tier</li>
      <li>you can create multiple environment (dev, test, prod)
<img src="https://imgdb.net/storage/uploads/78d84e9b24970b1d5d6409c7847f6d15cec0b600fcb537a9ef893f3fceb843e9.png" alt="" /></li>
    </ul>
  </li>
</ul>

<h2 id="elastic-beanstalk--supported-platforms">Elastic Beanstalk – Supported Platforms</h2>
<ul>
  <li>Go</li>
  <li>Java SE</li>
  <li>Java with Tomcat</li>
  <li>.NET Core on Linux</li>
  <li>.NET on Windows Server</li>
  <li>Node.js</li>
  <li>PHP</li>
  <li>Python</li>
  <li>Ruby</li>
  <li>Packer Builder</li>
  <li>Single Container Docker</li>
  <li>Multi-container Docker</li>
  <li>Preconfigured Docker</li>
  <li>If not supported, you can write
your custom platform (advanced)</li>
</ul>

<h2 id="web-server-tier-vs-worker-tier">Web Server Tier vs. Worker Tier</h2>
<p><img src="https://imgdb.net/storage/uploads/d449e7e6c294d0153fb0ed63671de2e8298b67b2d68987db69de7da4e5053b53.png" alt="" /></p>]]></content><author><name>Leo đẹp trai</name></author><summary type="html"><![CDATA[AWS Concept for solution architect AWS History 2002 Internally launched 2003 Amazon infrastructure is one of their core strength. Idea to market 2004 Launched publicly with SQS 2006 Re-launched publicly with SQS, S3 &amp; EC2 2007 Launched in Europe]]></summary></entry><entry><title type="html">AWS Advance: Auto scaling and auto load balancer</title><link href="https://zmerrychristmas.github.io/posts/aws-advance/" rel="alternate" type="text/html" title="AWS Advance: Auto scaling and auto load balancer" /><published>2022-12-03T00:00:00+07:00</published><updated>2022-12-10T16:28:10+07:00</updated><id>https://zmerrychristmas.github.io/posts/aws-advance</id><content type="html" xml:base="https://zmerrychristmas.github.io/posts/aws-advance/"><![CDATA[<h2 id="ssltls---basics">SSL/TLS - Basics</h2>
<ul>
  <li>An <strong>SSL Certificate</strong> allow traffic between your clients and your load balancer to be encrypted in transit (i-flight encryption)</li>
  <li><strong>SSL</strong> refers to Secure Soccket Layeer, used to encrypt conections</li>
  <li><strong>TLS</strong> refers to transport layer security, which is a newer versio</li>
  <li>Nowadays, TLS certificates are mainly used, but people still refer as SSL</li>
  <li>Public SSL certificates are issued by Certificate Authorities (CA)</li>
  <li>Comodo, Symantec, GoDaddy, GlobalSign, Digicert, Letsencrypt,  etc…</li>
  <li>SSL ccertificates have an expiration date (yout set) and must be renewed\</li>
</ul>

<h2 id="load-balacer---ssl-certificates">Load Balacer - SSL Certificates</h2>
<ul>
  <li>The load balacer uses and** X.509 certificate** (SSL/TLS server certificcate)</li>
  <li>You can manage certificcates using ACM (AWS Certificate Manager)</li>
  <li>You can create upload your own certificates alternatively</li>
  <li>HTTPS listener
    <ul>
      <li>You must specify a default certificate</li>
      <li>You can add an optional list of certs to support multiple domains</li>
      <li>Clients can use <strong>SNI</strong> (Server Name Indication) to specify the host name they reach</li>
      <li>Ability to specify a security policy to support older versions of SSL / TLS (legacy clients)\</li>
    </ul>
  </li>
</ul>

<p>## SSL - Server Name idication (SNI)</p>
<ul>
  <li>SNI sloves the problem of loadinng multiple <strong>SSL certificates</strong> onto one web server (to serve multiple websites)
-It’s a ‘newer’ protocol, and requires the client to indicate the hostname of the target server in the initial SSL hanshake</li>
  <li>The server will then find the correct certificccate, or return the default one</li>
  <li>Note:
    <ul>
      <li>Only work for ALB &amp; CLB (newer generation), Cloudfront</li>
      <li>Does not work for CLB ( older gen)\</li>
    </ul>
  </li>
</ul>

<h2 id="elastic-load-balancers---ssl-certicates">Elastic Load Balancers - SSL Certicates</h2>
<ul>
  <li>Classic Load Balancer (v1)
    <ul>
      <li>Support only one <strong>SSL certificate</strong></li>
      <li>Must use multiple CLB for <em>multiple host name with multiple SSL certificates</em></li>
    </ul>
  </li>
  <li>Application Load Balanccer (v2)
    <ul>
      <li>Supports <strong>multiple listeners with multiple SSL certificcates</strong></li>
      <li>Uses serve name indication (SNI) to make it work</li>
    </ul>
  </li>
  <li>Network Load Balancer (v2)
    <ul>
      <li><strong>Supports multiple listeners with multiple SSL certificates</strong></li>
      <li>Uses Server Name Indication (SNI) to make it work
        <h2 id="connection-draining">Connection Draining</h2>
      </li>
    </ul>
  </li>
  <li>Feature naming
    <ul>
      <li><strong>Connection Draining</strong> - for CLB</li>
      <li><strong>Deregistration Delay</strong> - for ALB &amp; NLB</li>
    </ul>
  </li>
  <li>Time to complete “i-fight request” while the instance is de-registerinng or unhealthy</li>
  <li>Stops sending ew request to EC2 instance which is de-registering</li>
  <li>Between 1 to 3600 seconds ( default 300 seconds)</li>
  <li>Can be disabled (set value to 0)</li>
  <li>Set to a low value if your request are short\</li>
</ul>

<h2 id="whats-an-auto-scaling-group">What’s an Auto Scaling Group?</h2>
<ul>
  <li>In real-life, the load on your websites and application can change</li>
  <li>In the cloud, you can create and get rid of servers very quickly</li>
  <li>The goal of an <strong>Auto Scalinng Group</strong> (ASG) is to:
    <ul>
      <li>Scale out (add EC2 instances) to match an increased load</li>
      <li>Scale in (remove EC2 instances) to match a decreased load</li>
      <li>Ensure we have a minimum and a maximum number of machinnes running</li>
      <li>Automatically Register new instances to a load balancer\</li>
    </ul>
  </li>
</ul>

<h2 id="auto-sccaling-group-in-aws-with-load-balancer">Auto Sccaling Group in AWS With Load Balancer</h2>
<ul>
  <li>A launch configuration
    <ul>
      <li>AMI + Instance Type</li>
      <li>EC2 User data</li>
      <li>EBS Volumes</li>
      <li>Security Groups</li>
      <li>SSH key pair</li>
    </ul>
  </li>
  <li>Min size / Max size / Initial capacity</li>
  <li>Network + Subnets informatio</li>
  <li>Load balancer information</li>
  <li>Scaling Policies\</li>
</ul>

<h2 id="auto-scaling-alarms">Auto Scaling Alarms</h2>
<ul>
  <li>It is possible to scale an ASG based on* CloudWatch alarms*</li>
  <li>An Alarm monitors a metric (such as Average CPU)</li>
  <li>Metrics are computed for the overall ASG instances</li>
  <li>Based on the alarm
    <ul>
      <li>We can create scale-out policies (increase the number of instances)</li>
      <li>We can create scale-in policcies (decrease the number of instances)\</li>
    </ul>
  </li>
</ul>

<h2 id="auto-scaling-new-rules">Auto scaling new rules</h2>
<ul>
  <li>It is now possible to define “better” auto scaling rules that are directly managed by EC2
    <ul>
      <li>Target Average CPU Usage</li>
      <li>Number of request on ELB per instance</li>
      <li>Average Network In</li>
      <li>Average Network Out</li>
    </ul>
  </li>
  <li>These rules are are easier to setup and can make more sense\</li>
</ul>

<h2 id="auto-scaling-custom-metric">Auto Scaling Custom Metric</h2>
<ul>
  <li>We can auto scale <em>based on a custom metric</em> ( number of connect users)
    <ol>
      <li>Send custom metric from application on EC2 to <strong>CloudWatch</strong> (PutMetric API)</li>
      <li>Create CloudWatch alarm to react to low / high values</li>
      <li>Use the CloudWatch alarm as the scaling policy for ASG\</li>
    </ol>
  </li>
</ul>

<h2 id="asg-brain-dump">ASG Brain Dump</h2>
<ul>
  <li>Scaling policies can be on <em>CPU, Network… and can even be on custom metrics</em> or based on a schedule (if you know your visitor patterns)</li>
  <li>ASGs use Launch configurations or Launch configuration / launch template</li>
  <li><strong>IAM</strong> roles attached to an ASG will get assigned to EC2 instances</li>
  <li>ASG are free. You pay for the underlying resources being launched</li>
  <li>Having instances under an ASG means that if they get terminated for whatever reason, the ASG will automatically create new onces as a replacement. Extra safety!</li>
  <li>ASG can terminate instances marked as unhealthy by an ALB(and hence replace them)\</li>
</ul>

<h2 id="auto-sccaling-groups---dynamic-scaling-policies">Auto Sccaling Groups - Dynamic Scaling Policies</h2>
<ul>
  <li>Target Trackkinng Scaling
    <ul>
      <li>Most simple and easy to set up</li>
      <li>Example: I want the average ASG CPU to stay at around 40%</li>
    </ul>
  </li>
  <li>Simple / Step Scaling
    <ul>
      <li>When a CloudWatch alarm is triggerd(&gt;70%), then add 2 units</li>
      <li>When a CloudWatch alarm is triggerd(&lt;30%), then remove 1</li>
    </ul>
  </li>
  <li>Sechedule Actions
    <ul>
      <li>Anticipate a sccaling based on known usage <strong>patterns</strong></li>
      <li>Example: increase the min capacity to 10 at 5 pm on Fridays\</li>
    </ul>
  </li>
</ul>

<h2 id="auto-scaling-groups---predictive-scaling">Auto Scaling Groups - Predictive scaling</h2>
<ul>
  <li><strong>Predictive scaling</strong>: continously forecast load and schedule scaling ahead
    <ul>
      <li>analysis historical, generate forecast, schedule\</li>
    </ul>
  </li>
</ul>

<h2 id="good-metrics-to-scale-on">Good metrics to scale on</h2>
<ul>
  <li><strong>CPUUtillizatioon</strong>: Average CPU
utilization across your instances</li>
  <li><strong>RequestCountPerTarget</strong>: to make sure the number of requests per EC2 instances is stable</li>
  <li><strong>Average Network  In/Out</strong> (if you’re application is network bound)</li>
  <li>Any custom metric (that you push using CloudWatch)\</li>
</ul>

<h2 id="auto-scaling-groups---scaling-cooldowns">Auto Scaling Groups - Scaling cooldowns</h2>
<ul>
  <li>After a scaling activity happes, you are in the cooldown period (300second)</li>
  <li>During the cooldown period, the ASG will not launch or teminate additional instance (to allow for metrics to stabilize)</li>
  <li>Advice: Use a ready to use <strong>AMI</strong> to reduce configuration time in order to be serving request faster and reduce the cooldown period\</li>
</ul>

<h2 id="asg-for-solutions-architects">ASG for Solutions Architects</h2>
<ul>
  <li>ASG Default termination policy(simplified version)
    <ul>
      <li><strong>Find</strong> the AZ which has the most number of instaces</li>
      <li>If there are multiple instances in the AZ to choose from, delete the one with <strong>the oldest launch configuration</strong></li>
    </ul>
  </li>
  <li>ASG tries the balance the number of instances across AZ by default\</li>
</ul>

<h2 id="asg-for-solutions-architects-lifecycle-hooks">ASG for solutions architects lifecycle hooks</h2>
<ul>
  <li>By default as soon as an istance is launched in an ASG it’s in service</li>
  <li>You have the** ability to perform **extra steps before the instance goes i service(Pendinng state)</li>
  <li>You have the** ability to perform some actions** before the innstannce is terminated\</li>
</ul>

<h2 id="asg-for-solutions-architect-launch-template-vs-launch-configuration">ASG for solutions architect launch template vs launch configuration</h2>
<ul>
  <li>Both:
    <ul>
      <li>ID of the Amazon machie Image (AMI), the instance type, a key security groups, and the other parameter that you use to launch EC2 istances(tags, EC2 user-data)</li>
    </ul>
  </li>
  <li><strong>Launch Configuration</strong> (Legacy):
    <ul>
      <li>Must be re-created every time</li>
    </ul>
  </li>
  <li><strong>Launch Template</strong> (newer)
    <ul>
      <li>Can have multiple versions</li>
      <li>Create parameters subsets (partial cconfiguration for re-use annd inheritance)</li>
      <li><strong>PRovision using both On-Demand and Spot instances</strong></li>
      <li>Can use T2 unlimited brust features</li>
      <li>Recomend by AWS going forward</li>
    </ul>
  </li>
</ul>]]></content><author><name>Leo đẹp trai</name></author><category term="Fullstack" /><category term="AWS" /><category term="Architect" /><category term="aws
aurora" /><category term="elasticcache" /><category term="rds" /><category term="aurora" /><category term="redis" /><category term="memcache" /><category term="template" /><category term="asg" /><category term="acl" /><category term="NLB" /><summary type="html"><![CDATA[SSL/TLS - Basics An SSL Certificate allow traffic between your clients and your load balancer to be encrypted in transit (i-flight encryption) SSL refers to Secure Soccket Layeer, used to encrypt conections TLS refers to transport layer security, which is a newer versio Nowadays, TLS certificates are mainly used, but people still refer as SSL Public SSL certificates are issued by Certificate Authorities (CA) Comodo, Symantec, GoDaddy, GlobalSign, Digicert, Letsencrypt, etc… SSL ccertificates have an expiration date (yout set) and must be renewed\]]></summary></entry><entry><title type="html">AWS Certified Solutions Architect - Associate (SAA-C03) Exam Guide</title><link href="https://zmerrychristmas.github.io/posts/aws-certified-solutions-architect-associate-saa-c03-exam-guide/" rel="alternate" type="text/html" title="AWS Certified Solutions Architect - Associate (SAA-C03) Exam Guide" /><published>2022-12-03T00:00:00+07:00</published><updated>2022-12-10T16:28:10+07:00</updated><id>https://zmerrychristmas.github.io/posts/aws-certified-solutions-architect-associate-saa-c03-exam-guide</id><content type="html" xml:base="https://zmerrychristmas.github.io/posts/aws-certified-solutions-architect-associate-saa-c03-exam-guide/"><![CDATA[<h2 id="content-outline">Content outline</h2>
<p>This exam guide includes weightings, test domains, and task statements for the exam. It is not a
comprehensive listing of the content on the exam. However, additional context for each of the task
statements is available to help guide your preparation for the exam. The following table lists the main
content domains and their weightings. The table precedes the complete exam content outline, which
includes the additional context. The percentage in each domain represents only scored content.</p>

<table>
  <thead>
    <tr>
      <th>Domain</th>
      <th>% exam</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Domain 1: Design Secure Architectures</td>
      <td>30%</td>
    </tr>
    <tr>
      <td>Domain 2: Design Resilient Architectures</td>
      <td>26%</td>
    </tr>
    <tr>
      <td>Domain 3: Design High-Performing Architectures</td>
      <td>24%</td>
    </tr>
    <tr>
      <td>Domain 4: Design Cost-Optimized Architectures</td>
      <td>20%</td>
    </tr>
    <tr>
      <td>Total</td>
      <td>100%</td>
    </tr>
  </tbody>
</table>

<h2 id="domain-1-design-secure-architectures">Domain 1: Design Secure Architectures</h2>
<h3 id="task-statement-1-design-secure-access-to-aws-resources">Task Statement 1: Design <strong>secure access</strong> to AWS resources.</h3>
<p>knowledge of:</p>
<ul>
  <li><strong>Access controls and management across</strong> multiple accounts</li>
  <li>AWS <strong>federated access and identity services</strong> (for example, AWS Identity and Access: IAM, AWS SSO</li>
  <li>AWS global infrastructure (Availbility zone and Access Managment , AWS Region)</li>
  <li>AWS Security best practicle</li>
  <li>The AWS shared responsibility model</li>
</ul>

<p>Skill in:</p>
<ul>
  <li>Applying AWS security best practices to <strong>IAM</strong> users and root users (for example mutil-factor authentication [MFA])</li>
  <li><em>Designing</em> a flexible authoriation model that <strong>includes IAM users, groups, roles, and policies</strong></li>
  <li>Designing a <strong>role based access control</strong> strategy (for example AWS Security Token Service [AWS STS], role switching, cross account access)</li>
  <li>Designing a <strong>security strategy</strong> for multiple AWS accounts (for example, AWS Control Tower, service control policies [SCPs])</li>
  <li><em>Determining</em> the appropriate use of <strong>resource policies</strong> for AWS services</li>
  <li><em>Determining when to federate a directory service with IAM roles</em></li>
</ul>

<h3 id="task-statement-2-design-secure-workloads-and-applications">Task Statement 2: Design <strong>secure workloads and applications</strong>.</h3>
<p>Knowledge of:</p>
<ul>
  <li>Application <strong>configuration</strong> and <strong>credentials</strong> security</li>
  <li>AWS service <strong>endpoints</strong></li>
  <li>Control <strong>ports, protocol, and network traffic</strong> on AWS</li>
  <li>Secure appplication <strong>access</strong></li>
  <li>Security <strong>services with appropriate use cases</strong> (for example Amaon Cognito, Amazon GuardDuty, Amazon Macie)</li>
  <li><strong>Threat vector external to</strong> AWS (for example DDos, SQL Injection)</li>
</ul>

<p>Skill in:</p>
<ul>
  <li><em>Designing</em> VPC architectures with security components (for example, <strong>security groups, route table, network ACLs, NAT gateways</strong>)</li>
  <li><em>Determining</em> network segmentation stategies (for example, using <strong>public subnets and private subnets</strong>)</li>
  <li><em>Intergrating</em> AWS services to secure applications (for example, <strong>AWS Shield, AWS WAF, AWS SSO, AWS Secrets Manager</strong>)</li>
  <li><em>Securing</em> external network connections to and from the AWS Cloud (for example <strong>VPN, AWS Direct Connect</strong>)</li>
</ul>

<h3 id="task-statement-3-determine-appropriate-data-security-controls">Task Statement 3: <strong>Determine appropriate data security controls</strong></h3>
<p>Knowledge of:</p>
<ul>
  <li>Data <em>access and governance</em></li>
  <li>Data <em>recovery</em></li>
  <li>Data <em>retention and classification</em></li>
  <li><em>Encryption and appropriate key management</em></li>
</ul>

<p>Skills In:</p>
<ul>
  <li><em>Aligning</em> <strong>AWS technologies</strong> to meet compliance requirements</li>
  <li><em>Encription</em> data at rest (<strong>AWS Key Management Service</strong> [AWS KMS])</li>
  <li><em>Encrypting</em> data in transit <strong>(AWS certificate manager ACM using TLS)</strong></li>
  <li><em>Implementing</em> acces <strong>policies</strong> for <strong>encryption keys</strong></li>
  <li><em>Implementing</em> policies for <strong>data access, life cycle and protection</strong></li>
  <li><em>Rotating</em> encryption key and renewing <strong>certificates</strong></li>
</ul>

<h2 id="domain-2design-resilient-architectures">Domain 2:Design Resilient Architectures</h2>
<h3 id="task-statement-1-determine-approriate-data-security-controls">task statement 1: Determine approriate data security controls</h3>

<p>knowledge of:</p>
<ul>
  <li>API creation and management (<strong>API Gateway, REST API</strong>)</li>
  <li>AWS managed services with appropriate use cases (<strong>AWS Transfer family, Amazon simple queue services, secret manager</strong>)</li>
  <li><strong>Caching</strong> strategies</li>
  <li>Design principles for <strong>microservices</strong> (stateless workloads compared with stateful workloads)</li>
  <li><em>Event-driven architectures</em></li>
  <li>Horizontal <strong>scaling</strong> and vertical <strong>scaling</strong></li>
  <li>How to appropriately use <strong>edge accelerators</strong> ( content delivery network CDN)</li>
  <li>How to <em>migrate</em> application into <strong>container</strong></li>
  <li><em>Load balancing</em> concept (application load balancer)</li>
  <li><strong><em>Multi-tier architectures</em></strong></li>
  <li><em>Queuing</em> and <em>messaging</em> concepts (publish/subcrile)</li>
  <li><em>Serverless</em> technologies and <em>patterns</em> (for example, <strong>AWS Fargate, AWS Lambda</strong>)</li>
  <li>Storage types with <em>associated</em> characteristics (for example, <strong>object, file, block</strong>)</li>
  <li>The <em>orchestration</em> of containers (for example, <strong>Amazon Elastic Container Service [Amazon ECS],Amazon Elastic Kubernetes Service [Amazon EKS]</strong>)</li>
  <li><em>When</em> to use read <strong>replicas</strong></li>
  <li>Workflow <em>orchestration</em> (for example, <strong>AWS Step Functions</strong>)</li>
</ul>

<p>Skills in:</p>
<ul>
  <li><em>Designing event-driven, microservice, and/or multi-tier architectures</em> based on requirements</li>
  <li><em>Determining</em> scaling strategies for components used in an architecture design</li>
  <li><em>Determining</em> the AWS services required to achieve <em>loose coupling</em> based on requirements</li>
  <li><em>Determining</em> when to use <strong>containers</strong></li>
  <li><em>Determining</em> when to use <strong>serverless technologies and patterns</strong></li>
  <li><em>Recommending</em> appropriate <strong>compute, storage, networking, and database technologies</strong> based
on requirements</li>
  <li><em>Using</em> purpose-built <strong>AWS services for workloads</strong></li>
</ul>

<h3 id="task-statement-2-design-highly-available-andor-fault-tolerant-architectures">Task Statement 2: Design <strong>highly available</strong> and/or <strong>fault-tolerant</strong> architectures.</h3>
<p>Knowledge of:</p>
<ul>
  <li>AWS global infrastructure (for example, <strong>Avaialbility ones, AWS Regions, Amazon Route 53</strong>)</li>
  <li>AWS managed services with approiate use cases (<strong>Amazon comprehend, Amazone Polly</strong>)</li>
  <li>Basic networking concepts (for example, <strong>route tables</strong>)</li>
  <li><em>Disaster recovery</em> strategies(DR),*backup and restore, pilot light, warm standby, active - active failover, recovery point objective [RPO], recovery time objective [RTO]) *</li>
  <li><em>Distributed</em> design pattern</li>
  <li><em>Failover</em> strategies</li>
  <li><em>Immutable</em> infrastructure</li>
  <li><em>load balancing</em> concept (Application load balancer)</li>
  <li><em>Proxy</em> concept (Amazon <strong>RDS</strong> Proxy)</li>
  <li>Service <strong><em>quotas</em></strong> and <strong><em>throttling</em></strong> (how to configure the service qoutas for a workload in a standby environment)</li>
  <li><strong>Storage</strong> options and characteristics (for example, <strong>durability, replication</strong>)</li>
  <li><strong>Workload</strong> visibility (for example, <strong>AWS X-Ray</strong>)</li>
</ul>

<p>Skills in:</p>
<ul>
  <li><em>Determining</em> automation strategies to ensure infrastructure <em>integrity</em></li>
  <li><em>Determining</em> the AWS services required to provide a highly available and/or fault-tolerant  Determining the AWS services required to provide a highly available and/or fault-tolerant</li>
  <li><em>Identifying</em> <strong>metrics</strong> based on business requirements ti deliver a high available solution</li>
  <li><em>Implementing</em> designs to <strong>mitigate</strong> single point of failure</li>
  <li><em>Implementing</em> strategies to ensure the <strong>durability</strong> and <strong>availability</strong> of data (for example, <strong>backups</strong>)</li>
  <li><em>Selecting</em> an appropriate** DR strategy** to meet business requirements</li>
  <li><em>Using</em> AWS services that improve the <strong>reliability</strong> of <strong>legacy applications</strong> and applications not built
for the cloud (for example, when application changes are not possible)</li>
  <li><em>Using</em> purpose-built AWS services for workloads</li>
</ul>

<h2 id="domain-3design-high-performing-architectures">Domain 3:Design high performing architectures</h2>
<h3 id="task-statement-1-determine-high-performing-andor-scalable-storage-solutions">Task Statement 1: Determine high-performing and/or scalable storage solutions</h3>
<p>Knowledge of:</p>
<ul>
  <li><em>Hybrid</em> storage solutions to meet business requirements</li>
  <li><em>Storage</em> <strong>services</strong> with appropriate use cases (for example,<strong>Amazon S3, Amazon Elastic File System [Amazon EFS], Amazon Elastic Block Store [Amazon EBS]</strong>)</li>
  <li><em>Storage</em> types with associated characteristics (for example, <strong>object, file, block</strong>)
Skills in:</li>
  <li><em>Determining</em> storage services and <em>configurations</em> that meet performance demands</li>
  <li><em>Determining</em> storage services that can scale to accommodate future needs</li>
</ul>

<h3 id="task-statement-2-design-high-performing-and-elastc-compute-solutions">Task Statement 2: Design high-performing and elastc compute solutions.</h3>
<p>Knowledge of:</p>
<ul>
  <li>AWS compute services with appropriate use cases (for example, <strong>AWS Batch, Amazon EMR, AWS Fargate</strong>)</li>
  <li><em>Distributed</em> computing concepts supported by AWS global infrastructure and edge services</li>
  <li><em>Queuing</em> and <em>messaging</em> concept (for example, <strong>publish/subcrible</strong>)</li>
  <li><em>Scalabilities</em> with appropriate use cases (<strong>EC2 Auto Scaling, AWS Auto Scaling</strong>)</li>
  <li><em>Serverless</em> technology and patterns (<strong>Lambda, fargate</strong>)</li>
  <li>The <em>orchestration</em> of containers (for example, <strong>Amazon ECS, Amazon EKS</strong>)
Skill in:</li>
  <li><em>Decoupling</em> <strong>workloads</strong> so that <strong>components</strong> can <strong>scale</strong> independently</li>
  <li><em>Identifing</em> <strong>metrics</strong> and conditions to perform <strong>scaling</strong> actions</li>
  <li><em>Selecting</em> the appropriare resource type and size (the amount of <strong>Lambda</strong> memory) to meet business requirements</li>
</ul>

<h3 id="task-statement-3-determine-high-performing-database-solutions">Task Statement 3: Determine high-performing database solutions.</h3>
<p>Knowledge of:</p>
<ul>
  <li>AWS global infrastructure (for example, <strong>Availability Zones, AWS Regions</strong>)</li>
  <li><em>Caching</em> strategies and services (for example, <strong>Amazon ElastiCache</strong>)</li>
  <li><em>Data access patterns</em> (for example, <em>read-intensive</em> compared <em>with write-intensive</em>)</li>
  <li><strong>Database</strong> capacity planning (for example, <em>capacity units, instance types, Provisioned IOPS</em>)</li>
  <li><strong>Database</strong> <em>connections</em> and <em>proxies</em></li>
  <li><strong>Database</strong> engines with appropriate use cases (for example,<em>heterogeneous migrations,homogeneous migrations</em>)</li>
  <li><em>Database</em> replication (for example, <strong>read replicas</strong>)</li>
  <li><em>Database</em> types and services (for example, <strong>serverless, relational compared with non-relational, in-memory</strong>)
Skills in:</li>
  <li><em>Configuring</em> read <strong>replicas</strong> to meet business requirements</li>
  <li><em>Designing</em> database architectures</li>
  <li><em>Determining</em> an appropriate database <strong>engine</strong> (for example, <strong>MySQL compared with PostgreSQL</strong>)</li>
  <li><em>Determining</em> an appropriate database <strong>type</strong> (for example,<strong>Amazon Aurora, Amazon DynamoDB</strong>)</li>
  <li><em>Integrating</em> caching to meet business requirements</li>
</ul>

<h3 id="task-statement-4-determine-high-performing-andor-scalable-network-architectures">Task Statement 4: Determine high-performing and/or scalable network architectures.</h3>

<p>Knowledge of:</p>
<ul>
  <li><em>Data analytics and visualization</em> services with appropriate use cases (for example,<strong>Amazon Athena, AWS Lake Formation, Amazon QuickSight</strong>)</li>
  <li><em>Data ingestion patterns</em> (for example, <em>frequency</em>)</li>
  <li><em>Data transfer</em> services with appropriate use cases (for example, <strong>AWS DataSync, AWS Storage Gateway</strong>)</li>
  <li><strong>Secure</strong> access to <em>ingestion</em> <strong>access points</strong></li>
  <li><strong>Sizes and speeds</strong> needed to meet business requirements</li>
  <li><strong>Streaming data services</strong> with appropriate use cases (for example,<strong>Amazon Kinesis</strong>)</li>
</ul>

<p>Skill In:</p>
<ul>
  <li><em>Building</em> and <em>securing</em> data lakes</li>
  <li><em>Designing</em> data <strong>streaming architectures</strong></li>
  <li><em>Design</em> data transfer solutions</li>
  <li><em>Implementting</em> visualization strategies</li>
  <li><em>Selecting</em> appropriate compute options for data processing (<strong>Amazon EMR</strong>)</li>
  <li><em>Selecting</em> appropriate <strong>configurations</strong> for ingestion</li>
  <li><em>Transforming</em> data between formats (.csv to .parquet)</li>
</ul>

<h2 id="domain-4design-cost-optimized-architectures">Domain 4:Design Cost-Optimized Architectures</h2>
<h3 id="task-statement-1-design-cost-optimized-storage-solutions">Task Statement 1: Design cost-optimized storage solutions.</h3>

<p>Knowledge of:</p>
<ul>
  <li><em>Access</em> options (for example, an <strong>S3 bucket with Requester Pays object storage</strong>)</li>
  <li>AWS cost management service features (for example, <strong>cost allocation tags, multi-account billing</strong>)</li>
  <li>AWS cost management tools with appropriate use cases (for example, <strong>AWS Cost Explorer, AWS Budgets, AWS Cost and Usage Report</strong>)</li>
  <li>AWS storage services with appropriate use cases (for example,<strong>Amazon FSx, Amazon EFS, Amazon S3, Amazon EBS</strong>)</li>
  <li><em>Backup</em> strategies</li>
  <li>Block storage options (for example, <strong>hard disk drive [HDD] volume types, solid state drive [SSD] volume types</strong>)</li>
  <li>Data lifecycles</li>
  <li>Hybrid storage options (for example , <strong>DataSync, Transfer Family, Storage Gateway</strong>)</li>
  <li>Storage access patterns</li>
  <li>Storage tiering (for example, <strong>cold tiering for object storag</strong>e)</li>
  <li>Storage types with associated characteristics (for example, <strong>object, file, block</strong>)</li>
</ul>

<p>Skills in:</p>
<ul>
  <li><em>Designing</em> appropriate storage strategies (for example, <strong>batch uploads to Amazon S3 compared</strong> with individual uploads)</li>
  <li><em>Determining</em> the correct storage size for a workload</li>
  <li><em>Determining</em> the correct storage size for a workload</li>
  <li><em>Determining</em> when storage auto scaling is required</li>
  <li><em>Managing</em> <strong>S3</strong> object lifecycles</li>
  <li><em>Selecting</em> the appropriate backup and/or archival solution</li>
  <li><em>Selecting</em> the appropriate service for data migration to storage services</li>
  <li><em>Selecting</em> the appropriate storage tier</li>
  <li><em>Selecting</em> the correct data lifecycle for storage</li>
  <li><em>Selecting</em> the most cost-effective storage service for a workload</li>
</ul>

<h3 id="task-statement-2-design-cost-optimized-compute-solutions">Task Statement 2: Design cost-optimized compute solutions</h3>

<p>Knowledge of:</p>
<ul>
  <li><strong>AWS cost management</strong> service features (for example, <strong>cost allocation tags, multi-account billing</strong>)</li>
  <li><strong>AWS cost management tools</strong> with appropriate use cases (for example, <strong>Cost Explorer, AWS Budgets, AWS Cost and Usage Report</strong>)</li>
  <li><strong>AWS global infrastructure</strong> (for example, <strong>Availability Zones, AWS Regions</strong>)</li>
  <li>AWS <em>purchasing</em> options (for example, <strong>Spot Instances, Reserved Instances, Savings Plans</strong>)</li>
  <li><em>Distributed</em> compute strategies (for example, <strong>edge processing</strong>)</li>
  <li><strong>Hybrid</strong> compute options (for example, <strong>AWS Outposts, AWS Snowball Edge</strong>)</li>
  <li><strong>Instance</strong> types, families, and sizes (for example, <strong>memory optimized, compute optimized, virtualization</strong>)</li>
  <li><em>Optimization</em> of compute utilization (for example, <strong>containers, serverless computing, microservices</strong>)</li>
  <li><em>Scaling</em> strategies (for example, <strong>auto scaling, hibernation</strong>)</li>
</ul>

<p>Skills in:</p>
<ul>
  <li><em>Determining</em> an appropriate <strong>load balancing strategy</strong> (for example, <strong>Application Load Balancer</strong> [Layer 7] compared with <strong>Network Load Balancer</strong>[Layer 4] compared with <strong>Gateway Load Balancer</strong>)</li>
  <li><em>Determining</em> appropriate <em>scaling</em> methods and <em>strategies</em> for <strong>elastic workloads</strong> (for example, <strong>horizontal</strong> compared with <strong>vertical</strong>, <strong>EC2</strong> <strong>hibernation</strong>)</li>
  <li><em>Determining</em> cost-effective AWS compute services with appropriate use cases (for example, <strong>Lambda, Amazon EC2, Fargate</strong>)</li>
  <li><em>Determining</em> the required availability for different classes of workloads (for example, <strong>production workloads, non-production workloads</strong>)</li>
  <li><em>Selecting</em> the appropriate instance <strong>family</strong> for a <strong>workload</strong></li>
  <li><em>Selecting</em> the appropriate instance <strong>size</strong> for a <strong>workload</strong></li>
</ul>

<h3 id="task-statement-3-design-cost-optimized-database-solutions">Task Statement 3: Design cost-optimized database solutions.</h3>

<p>Knowledge of:</p>
<ul>
  <li><strong>AWS cost management</strong> service features (for example, <em>cost allocation tags, multi-account billing</em>)</li>
  <li>** AWS cost management tools** with appropriate use cases (for example, <strong>Cost Explorer, AWS Budgets, AWS Cost and Usage Report</strong>)</li>
  <li><em>Caching</em> strategies</li>
  <li>Data <em>retention</em> policies</li>
  <li><em>Database</em> capacity planning (<strong>capacity units</strong>)</li>
  <li><em>Database</em> connection and proxies</li>
  <li><em>database</em> engines with appropriate use case (<strong>heterogeneous migrations, homogeneous migrations</strong>)</li>
  <li><em>database</em> replication (<strong>read replica</strong>)</li>
  <li><em>database</em> types and services (<strong>relation</strong> compared with <strong>non-relational, Aurora, Dynamo DB</strong>)</li>
</ul>

<p>Skills in:</p>
<ul>
  <li><em>Designing</em> appropriate backup and <em>retention</em> policies (for example, <strong>snapshot frequency</strong>)</li>
  <li><em>Determining</em> an appropriate database engine (for example, <strong>MySQL compared with PostgreSQL</strong>) **</li>
  <li><em>Determining</em> <strong>cost-effective AWS database</strong> services with appropriate use cases (for example, <strong>DynamoDB compared with Amazon RDS, serverless</strong>)**</li>
  <li><em>Determining</em>  <strong>cost-effective AWS database types (for example, time series format, columnar format</strong>)</li>
  <li><em>Migrating</em> database <strong>schemas</strong> and <strong>data</strong> to different <strong>locations</strong> and/or different database <strong>engines</strong></li>
</ul>

<h3 id="task-statement-4-design-cost-optimized-network-architectures">Task Statement 4: Design cost-optimized network architectures.</h3>

<p>Knowledge of:</p>
<ul>
  <li><strong>AWS cost management</strong> service features (for example, <strong>cost allocation tags, multi-account billing</strong>)</li>
  <li><strong>AWS cost management tools</strong> with appropriate use cases (for example, <strong>Cost Explorer, AWS Budgets, AWS Cost and Usage Report</strong>)</li>
  <li><em>Load balancing</em> concepts (for example, <strong>Application Load Balancer</strong>)</li>
  <li><strong>NAT gateways</strong> (for example, <strong>NAT instance</strong> <em>costs</em> <em>compared</em> with <strong>NAT gateway</strong> costs)</li>
  <li><strong>Network connectivity</strong> (for example, <strong>private lines, dedicated lines, VPNs</strong>)</li>
  <li><strong>Network routing, topology, and peering</strong> (for example, <strong>AWS Transit Gateway, VPC peering</strong>)</li>
  <li><strong>Network services</strong> with appropriate use cases (for example, <strong>DNS</strong>)</li>
</ul>

<p>Skills in:</p>
<ul>
  <li><em>Configuring appropriate NAT gateway types</em>  for a network (for example, <strong>a single shared NAT gateway compared with NAT gateways</strong> for each <strong>Availability Zone</strong>)</li>
  <li><em>Configuring</em> appropriate <strong>network connections</strong> (for example, <strong>Direct Connect</strong> compared with <strong>VPN</strong> compared with <strong>internet</strong>)</li>
  <li><em>Configuring</em> appropriate network <strong>routes</strong> to <em>minimize</em> network <strong>transfer costs</strong> (for example, <strong>Region to Region, Availability Zone to Availability Zone, private to public, Global Accelerator, VPC endpoints</strong>)</li>
  <li><em>Determining</em> strategic needs for <strong>content delivery networks (CDNs) and edge caching</strong></li>
  <li><em>Reviewing existing workloads</em> for network optimizations</li>
  <li><em>Selecting</em> an appropriate <em>throtting</em> strategy</li>
  <li><em>Selecting</em> the appropriate <em>bandwidth</em> allocation for a network device (<strong>a single VPN compared with multiple VPNs, Direct Connect speed</strong>)</li>
</ul>]]></content><author><name>Leo đẹp trai</name></author><category term="Fullstack" /><category term="Architect" /><category term="AWS" /><category term="aws" /><summary type="html"><![CDATA[Content outline This exam guide includes weightings, test domains, and task statements for the exam. It is not a comprehensive listing of the content on the exam. However, additional context for each of the task statements is available to help guide your preparation for the exam. The following table lists the main content domains and their weightings. The table precedes the complete exam content outline, which includes the additional context. The percentage in each domain represents only scored content.]]></summary></entry><entry><title type="html">Node.JS concept</title><link href="https://zmerrychristmas.github.io/posts/nodejs-concept/" rel="alternate" type="text/html" title="Node.JS concept" /><published>2022-09-02T00:00:00+07:00</published><updated>2024-02-04T17:55:43+07:00</updated><id>https://zmerrychristmas.github.io/posts/nodejs-concept</id><content type="html" xml:base="https://zmerrychristmas.github.io/posts/nodejs-concept/"><![CDATA[<h1 id="nodejs---concept">NodeJS - Concept</h1>
<p>Node.js is an open-source and cross platform javascript runtime environment. It is a popular tool for almost any kind of project!
NodeJS is javascript on the server, built from v8 engine used to read, parse javascript code and executed necessary action. NodeJs i a non blocking event based IO and run on a single thread process.
Event loop is constanly running process that monitors the callback queue and the call stack. The process will continously check the call stack, and if the call stack is empty, push the next function from the callback queue to the stack. If there is nothing in the callback queue, nothing will happen.</p>
<ul>
  <li>Runs the V8 javascript engine, the core of Google Chrome, outside of browser. This allows Node.js to be very performant</li>
  <li>Single thread for every request
    <ul>
      <li>provides a set of asynchronous I/O primitives</li>
      <li>using non-blocking paradigms, making blocking behaviour the exception rather than the norm.</li>
    </ul>
  </li>
  <li>Reading network, database, file system: resume the operation when response is comeback</li>
  <li>AdonisJS, Egg.js, Express, Fastify, featherJs, Gastby, hapi, koa, loopback.io, meteor, micro, nestjs, nextjs, NX, Remix, Sapper, socker.io, strapi.</li>
</ul>

<pre><code class="language-JS">const http = require('http')
const hostname = '127.0.0.1'
const port = 3000

const server = http.createServer((req, res) =&gt; {
    res.statusCode = 200
    res.setHeader('Content-Type', 'text/plain')
    res.end('Hello World\n')
})

server.listen(port, hostname, () =&gt; {
    console.log(`Server running at http://${hostname}:${port}/`)
})

</code></pre>
<h2 id="pros">Pros</h2>
<p>Handle thousands of concurrent connection with a single server withou introducing the burden of managing thread concurency, which could be a significant source of bugs.</p>
<ul>
  <li>unique advantage because milions of frontend developers that write javascript for the browser are now able to write client-server.</li>
  <li>ECMAScript can be used by specifics NodeJs version.
    <h2 id="install">Install</h2>
  </li>
  <li>NVM is a popular way to run Node.js. It allows you to easily switch the Node.Js version and install new version to try and easily rollback if something breaks.
    <h2 id="javascript-topics">Javascript Topics</h2>
  </li>
  <li>Lexical Structure
    <ul>
      <li>Unicode</li>
      <li>Semicolons</li>
      <li>White space</li>
      <li>Case sensitive</li>
      <li>Comments</li>
      <li>Literals and Identifiers</li>
      <li>Reserved words</li>
    </ul>
  </li>
  <li>Expressions</li>
</ul>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Shorthand operator</th>
      <th>Meaning</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment">Assignment</a></td>
      <td><code class="language-plaintext highlighter-rouge">x = f()</code></td>
      <td><code class="language-plaintext highlighter-rouge">x = f()</code></td>
    </tr>
    <tr>
      <td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition_assignment">Addition assignment</a></td>
      <td><code class="language-plaintext highlighter-rouge">x += f()</code></td>
      <td><code class="language-plaintext highlighter-rouge">x = x + f()</code></td>
    </tr>
    <tr>
      <td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment">Subtraction assignment</a></td>
      <td><code class="language-plaintext highlighter-rouge">x -= f()</code></td>
      <td><code class="language-plaintext highlighter-rouge">x = x - f()</code></td>
    </tr>
    <tr>
      <td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment">Multiplication assignment</a></td>
      <td><code class="language-plaintext highlighter-rouge">x *= f()</code></td>
      <td><code class="language-plaintext highlighter-rouge">x = x * f()</code></td>
    </tr>
    <tr>
      <td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Division_assignment">Division assignment</a></td>
      <td><code class="language-plaintext highlighter-rouge">x /= f()</code></td>
      <td><code class="language-plaintext highlighter-rouge">x = x / f()</code></td>
    </tr>
    <tr>
      <td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder_assignment">Remainder assignment</a></td>
      <td><code class="language-plaintext highlighter-rouge">x %= f()</code></td>
      <td><code class="language-plaintext highlighter-rouge">x = x % f()</code></td>
    </tr>
    <tr>
      <td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment">Exponentiation assignment</a></td>
      <td><code class="language-plaintext highlighter-rouge">x **= f()</code></td>
      <td><code class="language-plaintext highlighter-rouge">x = x ** f()</code></td>
    </tr>
    <tr>
      <td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment">Left shift assignment</a></td>
      <td><code class="language-plaintext highlighter-rouge">x &lt;&lt;= f()</code></td>
      <td><code class="language-plaintext highlighter-rouge">x = x &lt;&lt; f()</code></td>
    </tr>
    <tr>
      <td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment">Right shift assignment</a></td>
      <td><code class="language-plaintext highlighter-rouge">x &gt;&gt;= f()</code></td>
      <td><code class="language-plaintext highlighter-rouge">x = x &gt;&gt; f()</code></td>
    </tr>
    <tr>
      <td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment">Unsigned right shift assignment</a></td>
      <td><code class="language-plaintext highlighter-rouge">x &gt;&gt;&gt;= f()</code></td>
      <td><code class="language-plaintext highlighter-rouge">x = x &gt;&gt;&gt; f()</code></td>
    </tr>
    <tr>
      <td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment">Bitwise AND assignment</a></td>
      <td><code class="language-plaintext highlighter-rouge">x &amp;= f()</code></td>
      <td><code class="language-plaintext highlighter-rouge">x = x &amp; f()</code></td>
    </tr>
    <tr>
      <td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment">Bitwise XOR assignment</a></td>
      <td><code class="language-plaintext highlighter-rouge">x ^= f()</code></td>
      <td><code class="language-plaintext highlighter-rouge">x = x ^ f()</code></td>
    </tr>
    <tr>
      <td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment">Bitwise OR assignment</a></td>
      <td><code class="language-plaintext highlighter-rouge">x \|= f()</code></td>
      <td><code class="language-plaintext highlighter-rouge">x = x \| f()</code></td>
    </tr>
    <tr>
      <td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment">Logical AND assignment</a></td>
      <td><code class="language-plaintext highlighter-rouge">x &amp;&amp;= f()</code></td>
      <td><code class="language-plaintext highlighter-rouge">x &amp;&amp; (x = f())</code></td>
    </tr>
    <tr>
      <td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment">Logical OR assignment</a></td>
      <td><code class="language-plaintext highlighter-rouge">x \|\|= f()</code></td>
      <td><code class="language-plaintext highlighter-rouge">x \|\| (x = f())</code></td>
    </tr>
    <tr>
      <td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment">Logical nullish assignment</a></td>
      <td><code class="language-plaintext highlighter-rouge">x ??= f()</code></td>
      <td><code class="language-plaintext highlighter-rouge">x ?? (x = f())</code></td>
    </tr>
  </tbody>
</table>

<ul>
  <li>Types
JavaScript Types are Dynamic. String, Numbers, Booleans, Arrays, Objects, Undefined, Typeof</li>
  <li>Classes
Classes are a template for creating objects. They encapsulate data with code to work on that data.
    <pre><code class="language-JS">// unnamed
let Rectangle = class {
constructor(height, width) {
  this.height = height;
  this.width = width;
}
};
console.log(Rectangle.name);
// output: "Rectangle"
</code></pre>
  </li>
  <li>Variables
4 Ways to Declare a JavaScript Variable:
    <ul>
      <li>Using var</li>
      <li>Using let</li>
      <li>Using const</li>
      <li>Using nothing</li>
    </ul>
  </li>
  <li>Functions
A JavaScript function is a block of code designed to perform a particular task.</li>
  <li>this
In JavaScript, the this keyword refers to an object.
Which object depends on how this is being invoked (used or called).</li>
  <li>Arrow Functions
An arrow function expression is a compact alternative to a traditional function expression, but is limited and can’t be used in all situations.
```JS
// ———————-
// Arrow Example
// ———————-</li>
</ul>

<p>// A simplistic object with its very own “this”.
const obj = {
  num: 100,
};</p>

<p>// Setting “num” on window to show how it gets picked up.
window.num = 2020; // yikes!</p>

<p>// Arrow Function
const add = (a, b, c) =&gt; this.num + a + b + c;</p>

<p>// call
console.log(add.call(obj, 1, 2, 3)); // result 2026</p>

<p>// apply
const arr = [1, 2, 3];
console.log(add.apply(obj, arr)); // result 2026</p>

<p>// bind
const bound = add.bind(obj);
console.log(bound(1, 2, 3)); // result 2026</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
</pre></td><td class="rouge-code"><pre>Arrow functions cannot be used as constructors and will throw an error when used with new.
Arrow functions do not have a prototype property.
The yield keyword may not be used in an arrow function's body
Arrow functions can have either a concise body or the usual block body.
```JS
// An empty arrow function returns undefined
const empty = () =&gt; {};

(() =&gt; 'foobar')();
// Returns "foobar"
// (this is an Immediately Invoked Function Expression)

const simple = (a) =&gt; a &gt; 15 ? 15 : a;
simple(16); // 15
simple(10); // 10

const max = (a, b) =&gt; a &gt; b ? a : b;

// Easy array filtering, mapping, etc.

const arr = [5, 6, 13, 0, 1, 18, 23];

const sum = arr.reduce((a, b) =&gt; a + b);
// 66

const even = arr.filter((v) =&gt; v % 2 === 0);
// [6, 0, 18]

const double = arr.map((v) =&gt; v * 2);
// [10, 12, 26, 0, 2, 36, 46]

// More concise promise chains
promise
  .then((a) =&gt; {
  // …
  })
  .then((b) =&gt; {
    // …
  });

// Parameterless arrow functions that are visually easier to parse
setTimeout(() =&gt; {
  console.log('I happen sooner');
  setTimeout(() =&gt; {
    // deeper code
    console.log('I happen later');
  }, 1);
}, 1);
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>Loops
    <ul>
      <li>for - loops through a block of code a number of times</li>
      <li>for/in - loops through the properties of an object</li>
      <li>for/of - loops through the values of an iterable object</li>
      <li>while - loops through a block of code while a specified condition is true</li>
      <li>do/while - also loops through a block of code while a specified condition is true</li>
    </ul>
  </li>
  <li>Scopes
    <ul>
      <li>Block scope</li>
      <li>Function scope</li>
      <li>Global scope</li>
    </ul>
  </li>
  <li>Arrays
    <pre><code class="language-JS">const person = [];
person["firstName"] = "John";
person["lastName"] = "Doe";
person["age"] = 46;
person.length;     // Will return 0
person[0];         // Will return undefined
</code></pre>
  </li>
  <li>Template Literals
Template literals are literals delimited with blacktick (`) characters, allowing for multi-line string, for string interpolation with embedded expressions, and for special constructs called tagged templates.
    <pre><code class="language-JS">`string text ${expression} string text`
</code></pre>
  </li>
  <li>Semicolons
Semicolons are an essential part of javascript code. They are read and used by the compiler to distinguising between separate statements so that statements do not lead into other parts of the code. The good news is that JavaScript includes an automatic semicolon feature.</li>
  <li>Strict Mode
Strict <strong>directive</strong> was new in ECMA Script version 5.
It is not a statement, but a literal expression, ignored by earlier versions of JavaScript.
The purpose of <code class="language-plaintext highlighter-rouge">"use strict"</code> is to indicate that the code should be executed in “strict mode”.
    <pre><code class="language-JS">"use strict";
x = 3.14;       // This will cause an error because x is not declared
function myFunction() {
"use strict";
y = 3.14;   // This will cause an error
}
x = {p1:10, p2:20};      // This will cause an error
delete x;                // This will cause an error
</code></pre>
    <p>not allowed: duplicated, deleted, undeclare, octal number, octal escape, Writing to a read-only property, Writing to a get-only property , delete undeleteable properties, cant use <code class="language-plaintext highlighter-rouge">eval</code> word,  a variable can not be used before it is declared,eval() can not declare a variable using the var keyword, eval() can not declare a variable using the let keyword, the arguments, with cant be used as a variable.</p>
  </li>
  <li>ECMAScript 6, 2016, 2017
With those concept in mind, you are well on your road to become a proficient javascript developer in both browser and in Node.js.</li>
</ul>

<h2 id="fundamental-part-of-nodejs">Fundamental part of Node.js:</h2>
<ul>
  <li><a href="https://nodejs.dev/learn/javascript-asynchronous-programming-and-callbacks">Asynchronous programming and callbacks</a></li>
  <li><a href="https://nodejs.dev/learn/discover-javascript-timers">Timers</a></li>
  <li><a href="https://nodejs.dev/learn/understanding-javascript-promises">Promises</a></li>
  <li><a href="https://nodejs.dev/learn/modern-asynchronous-javascript-with-async-and-await">Async and Await</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures">Closures</a></li>
  <li><a href="https://nodejs.dev/learn/the-nodejs-event-loop">The Event Loop</a>
    <h3 id="asynchronous-programming-and-callbacks">Asynchronous programming and callbacks</h3>
    <p><strong>Asynchronous</strong> means that things can happen independently of the main program flow.
In the current consumer computers, every program runs for a specific time slot and then it stops its exceution to let another program continue their execution. This thing runs in a cycle so fast that it’s impossible to notice. We thing our computer run many programs simultaneously, but this is an illusion.
Programs internally use interrupts, a signal that’s emitted to the processor to gain the attention of the system.
<strong>JavaScript</strong> is synchronous by default and is single threaded. This means that code cannot create new threads and run in parallel.
The browser provides a way to do it by providing a set of APIs that can handle this kind of functionality. More recently, Node.js introduced a non-blocking I/O environment to extend this concept to file access, network calls and so on.
<strong>Callback</strong> You define an event handler for the click event. This event handler accpet a function, which will be called when the event is triggered</p>
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">XMLHttpRequest</span><span class="p">();</span>
<span class="nx">xhr</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="k">if </span><span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">===</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">200</span> <span class="p">?</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">responseText</span><span class="p">)</span> <span class="p">:</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">error</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span>
<span class="p">};</span>
<span class="nx">xhr</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">https://yoursite.com</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">xhr</span><span class="p">.</span><span class="nf">send</span><span class="p">();</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>browser event(DOM)</li>
  <li>access file and make XHR request</li>
  <li>setTimeOut function
    <h4 id="handling-errors-in-callbacks">Handling errors in callbacks</h4>
    <p>The first parameter in any callback function is the error object: error-first callbacks</p>
    <h4 id="the-problem-with-callbacks">The problem with callbacks</h4>
    <p>However every callback adds a level of nesting, and when you have lots of callbacks, the code starts to be complicated very quickly
```js
function doStep1(init) {
return init + 1;
}</p>
  </li>
</ul>

<p>function doStep2(init) {
  return init + 2;
}</p>

<p>function doStep3(init) {
  return init + 3;
}</p>

<p>function doOperation() {
  let result = 0;
  result = doStep1(result);
  result = doStep2(result);
  result = doStep3(result);
  console.log(<code class="language-plaintext highlighter-rouge">result: ${result}</code>);
}</p>

<p>doOperation();</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre>Because we have to call callbacks inside callbacks, we get a deeply nested doOperation() function, which is much harder to read and debug. This is sometimes called "callback hell" or the "pyramid of doom" (because the indentation looks like a pyramid on its side).
For these reasons, most modern asynchronous APIs don't use callbacks. Instead, the foundation of asynchronous programming in JavaScript is the Promise
### Timers
- SetTimeout : you soecify a callback function to execute later and value expressing how later you want it to run, in milisecons.
```JS
const myFunction = (firstParam, secondParam) =&gt; {
  // do something
};

// runs after 2 seconds
setTimeout(myFunction, 2000, firstParam, secondParam);
// I changed my mind
clearTimeout(id);
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="promise">Promise</h3>
<p><img src="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/promises.png" alt="Chain promise" title="Chain promise" /></p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">done</span> <span class="o">=</span> <span class="kc">true</span>

<span class="kd">const</span> <span class="nx">isItDoneYet</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">workDone</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Here is the thing I built</span><span class="dl">'</span>
    <span class="nf">resolve</span><span class="p">(</span><span class="nx">workDone</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">why</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Still working on something else</span><span class="dl">'</span>
    <span class="nf">reject</span><span class="p">(</span><span class="nx">why</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">})</span>

<span class="kd">const</span> <span class="nx">checkIfItsDone</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">isItDoneYet</span>
    <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">ok</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">ok</span><span class="p">)</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    <span class="p">})</span>
<span class="p">}</span>

<span class="nf">checkIfItsDone</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>A promise is commonly defined as a proxy for a value that will eventually become avaiable. promise is oneway to deal with asynchronous code.</p>
<h4 id="how-promise-working">How promise working</h4>
<ul>
  <li>When a promise called, it will start in a pending state. This means that the calling function continues executing, while the promise is pending until it resolves, giving the calling function whatever data was being requested.</li>
  <li>The created promise will end in <strong>resolved</strong> state or <strong>rejected</strong> state. Calling the respective callback function upon finishing.</li>
  <li><strong>Promisifying</strong>
This technique is a way to be able to use a classic JavaScript function that takes a callback, and have it return a promise.
```js
const fs = require(‘fs’);</li>
</ul>

<p>const getFile = fileName =&gt; {
  return new Promise((resolve, reject) =&gt; {
    fs.readFile(fileName, (err, data) =&gt; {
      if (err) {
        reject(err); // calling <code class="language-plaintext highlighter-rouge">reject</code> will cause the promise to fail with or without the error passed as an argument
        return; // and we don’t want to go any further
      }
      resolve(data);
    });
  });
};</p>

<p>getFile(‘/etc/passwd’)
  .then(data =&gt; console.log(data))
  .catch(err =&gt; console.error(err));</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre>**Consuming a promise**
```js
const isItDoneYet = new Promise(/* ... as above ... */);
// ...

const checkIfItsDone = () =&gt; {
  isItDoneYet
    .then(ok =&gt; {
      console.log(ok);
    })
    .catch(err =&gt; {
      console.error(err);
    });
};
</pre></td></tr></tbody></table></code></pre></div></div>
<p><strong>Chaining promises</strong></p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">status</span> <span class="o">=</span> <span class="nx">response</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">status</span> <span class="o">&lt;</span> <span class="mi">300</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nf">resolve</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nf">reject</span><span class="p">(</span><span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">statusText</span><span class="p">));</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">json</span> <span class="o">=</span> <span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">();</span>

<span class="nf">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">/todos.json</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="c1">// note that the `status` function is actually **called** here, and that it **returns a promise***</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">json</span><span class="p">)</span> <span class="c1">// likewise, the only difference here is that the `json` function here returns a promise that resolves with `data`</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// ... which is why `data` shows up here as the first parameter to the anonymous function</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Request succeeded with JSON response</span><span class="dl">'</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Request failed</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
  <span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><strong>Cascading Error</strong></p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error</span><span class="dl">'</span><span class="p">);</span>
<span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
  <span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><strong>Orchestrating promise</strong>
Promise have two function synchonized</p>
<ul>
  <li>Promise.all()
```js
const f1 = fetch(‘/something.json’);
const f2 = fetch(‘/something2.json’);</li>
</ul>

<p>Promise.all([f1, f2])
  .then(res =&gt; {
    console.log(‘Array of results’, res);
  })
  .catch(err =&gt; {
    console.error(err);
  });</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre>- Promise.race()
Promise.race() runs when the first of the promises you pass to it settles
- Promise.any()
Promise settle when any of the promise you pass to it fulfill or all of promise is get rejected(AggregateError)

**Common errors**
- Uncaught TypeError: undefined is not a promise
- UnhandledPromiseRejectionWarning
### Thenables
The JavaScript ecosystem had made multiple Promise implementations long before it became part of the language. Despite being represented differently internally, at the minimum, all Promise-like objects implement the Thenable interface. A thenable implements the .then() method, which is called with two callbacks: one for when the promise is fulfilled, one for when it's rejected. Promises are thenables as well.
```js
const aThenable = {
  then(onFulfilled, onRejected) {
    onFulfilled({
      // The thenable is fulfilled with another thenable
      then(onFulfilled, onRejected) {
        onFulfilled(42);
      },
    });
  },
};

Promise.resolve(aThenable); // A promise fulfilled with 42
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li><strong>Complex promise</strong>
```js
“use strict”;
let promiseCount = 0;</li>
</ul>

<p>function testPromise() {
  const thisPromiseCount = ++promiseCount;
  const log = document.getElementById(“log”);
  // begin
  log.insertAdjacentHTML(“beforeend”, <code class="language-plaintext highlighter-rouge">${thisPromiseCount}) Started&lt;br&gt;</code>);
  // We make a new promise: we promise a numeric count of this promise, starting from 1 (after waiting 3s)
  const p1 = new Promise((resolve, reject) =&gt; {
    // The executor function is called with the ability to resolve or reject the promise
    log.insertAdjacentHTML(
      “beforeend”,
      <code class="language-plaintext highlighter-rouge">${thisPromiseCount}) Promise constructor&lt;br&gt;</code>
    );
    // This is only an example to create asynchronism
    setTimeout(() =&gt; {
      // We fulfill the promise !
      resolve(thisPromiseCount);
    }, Math.random() * 2000 + 1000);
  });</p>

<p>// We define what to do when the promise is resolved with the then() call,
  // and what to do when the promise is rejected with the catch() call
  p1.then((val) =&gt; {
    // Log the fulfillment value
    log.insertAdjacentHTML(“beforeend”, <code class="language-plaintext highlighter-rouge">${val}) Promise fulfilled&lt;br&gt;</code>);
  }).catch((reason) =&gt; {
    // Log the rejection reason
    console.log(<code class="language-plaintext highlighter-rouge">Handle rejected promise (${reason}) here.</code>);
  });
  // end
  log.insertAdjacentHTML(“beforeend”, <code class="language-plaintext highlighter-rouge">${thisPromiseCount}) Promise made&lt;br&gt;</code>);
}</p>

<p>const btn = document.getElementById(“make-promise”);
btn.addEventListener(“click”, testPromise);</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>```html
&lt;button id="make-promise"&gt;Make a promise!&lt;/button&gt;
&lt;div id="log"&gt;&lt;/div&gt;
</pre></td></tr></tbody></table></code></pre></div></div>
<h2 id="modern-asynchronous-javascript-with-async-and-await">Modern Asynchronous JavaScript with Async and Await</h2>
<p>Async function are a combination of promise and generators, and basically, they are higher level abstraction over promises. <strong>async/await is built on promise</strong></p>
<ul>
  <li>Example when async function return a promise. An await function is calling <strong>until the promise is resolved or rejected</strong>.
```js
const doSomethingAsync = () =&gt; {
return new Promise(resolve =&gt; {
  setTimeout(() =&gt; resolve(‘I did something’), 3000)
})
}</li>
</ul>

<p>const doSomething = async () =&gt; {
  console.log(await doSomethingAsync())
}</p>

<p>console.log(‘Before’)
doSomething()
console.log(‘After’)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre>- **Promise vs async/await**
```js
// thenable
const getFirstUserData = () =&gt; {
  return fetch('/users.json') // get users list
    .then(response =&gt; response.json()) // parse JSON
    .then(users =&gt; users[0]) // pick first user
    .then(user =&gt; fetch(`/users/${user.name}`)) // get user data
    .then(userResponse =&gt; userResponse.json()); // parse JSON
};

getFirstUserData();
// implemented by async/await
const getFirstUserData = async () =&gt; {
  const response = await fetch('/users.json'); // get users list
  const users = await response.json(); // parse JSON
  const user = users[0]; // pick first user
  const userResponse = await fetch(`/users/${user.name}`); // get user data
  const userData = await userResponse.json(); // parse JSON
  return userData;
};

getFirstUserData();
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>Multiple async functions in series
```js
const promiseToDoSomething = () =&gt; {
return new Promise(resolve =&gt; {
  setTimeout(() =&gt; resolve(‘I did something’), 10000)
})
}</li>
</ul>

<p>const watchOverSomeoneDoingSomething = async () =&gt; {
  const something = await promiseToDoSomething()
  return something + ‘\nand I watched’
}</p>

<p>const watchOverSomeoneWatchingSomeoneDoingSomething = async () =&gt; {
  const something = await watchOverSomeoneDoingSomething()
  return something + ‘\nand I watched as well’
}</p>

<p>watchOverSomeoneWatchingSomeoneDoingSomething().then(res =&gt; {
  console.log(res)
})</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="rouge-code"><pre>### Closures
The combination of function bundled together (enclosed) with references to it surround state (THE LEXICAL environment). a closure gives you access to an outer function's scope from an inner function.

```js
function showHelp(help) {
  document.getElementById('help').textContent = help;
}

function makeHelpCallback(help) {
  return function () {
    showHelp(help);
  };
}

function setupHelp() {
  var helpText = [
    { id: 'email', help: 'Your e-mail address' },
    { id: 'name', help: 'Your full name' },
    { id: 'age', help: 'Your age (you must be over 16)' },
  ];

  for (var i = 0; i &lt; helpText.length; i++) {
    var item = helpText[i];
    document.getElementById(item.id).onfocus = makeHelpCallback(item.help);
  }
}

setupHelp();
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="scoping-with-let-and-const">Scoping with let and const</h4>
<p>Traditionally (before ES6), javascript only had two kind of scope: function scope and global scope. Variables declare with var are either function scoped and global scope, depending on whether they are declared within a function or outside function. This can be tricky, because blocks with curly braces do not create scope</p>
<ul>
  <li>With <code class="language-plaintext highlighter-rouge">const</code> you can create a block scoped: <code class="language-plaintext highlighter-rouge">temporal dead zone</code>!</li>
  <li>A closure is the combination of a function and the lexical environment within which that function was declared. This environment consits of any local variables that were in-scope at the time the closure was created.
    <h4 id="emulating-private-methods-with-closures">Emulating private methods with closures</h4>
    <p>```JS
const counter = (function () {
let privateCounter = 0;
function changeBy(val) {
  privateCounter += val;
}</p>

    <p>return {
  increment() {
    changeBy(1);
  },</p>

    <p>decrement() {
    changeBy(-1);
  },</p>

    <p>value() {
    return privateCounter;
  },
};
})();</p>
  </li>
</ul>

<p>console.log(counter.value()); // 0.</p>

<p>counter.increment();
counter.increment();
console.log(counter.value()); // 2.</p>

<p>counter.decrement();
console.log(counter.value()); // 1.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre>JS, prior to class, didn't have a native way of declaring private methods, but it was possible to emulate private methods using closure. Private methods aren't just useful fo restricting access to code. They also prove a powerful way of managing your global namespace.
#### Closure scope
- Local scope (own scope)
- Enclosing scope (can be block, function, or module scope)
- Global scope
```JS
// global scope
const e = 10;
function sum(a) {
  return function (b) {
    return function (c) {
      // outer functions scope
      return function (d) {
        // local scope
        return a + b + c + d + e;
      };
    };
  };
}

console.log(sum(1)(2)(3)(4)); // log 20
</pre></td></tr></tbody></table></code></pre></div></div>
<p>You can also write without anonymous functions:</p>
<pre><code class="language-JS">// global scope
const e = 10;
function sum(a) {
  return function sum2(b) {
    return function sum3(c) {
      // outer functions scope
      return function sum4(d) {
        // local scope
        return a + b + c + d + e;
      };
    };
  };
}

const sum2 = sum(1);
const sum3 = sum2(2);
const sum4 = sum3(3);
const result = sum4(4);
console.log(result); //log 20
</code></pre>
<h2 id="event-loop">Event loop</h2>
<p>In Nodejs Javascript, event loop is the “killer features” while nodejs run on single thread. There is just one thing happening at a time
That’s actually helpful as it simplifier alot how a program without worry about concurrency issues. You just need to pay attention to write your code and avoid anything that could block the tread, like synchronous network call and infinite loops.</p>
<ul>
  <li>In general, in most broswer there is an event loop for every browser tab, to make every process isolated and avoid webpage with infinite loop and heavy processsing to block your entire broswer.</li>
  <li>The environment manages multiple concurent event loops, to handle API call for examples. Webworker can handler multiple event loop as well</li>
  <li>So you need to concerned that your code will run on a single event loop, and write code with this thing in mind  to avoid blocking it.
    <h3 id="blocking-the-event-loop">Blocking the event loop</h3>
    <p>Any javascript code that take long to return back control to the event loop will block the execution of any javascript code in the page, event block the UI page, and the user cannot click around, scroll page, and so on.
All I/O primitive in JS are non-blocking. Network requests, filesystems operation, and so on. Being blocking is the exception, and this is why javascript is based so much on callback, and more recently on promise and async/await.</p>
    <h3 id="the-call-stacklifo">The call stack(LIFO)</h3>
    <p>The event loop continously check the call stack to see if there’s any function that need to run.
While doing so, it adds any function call it find in the call stack and executes each one in order.
You know the error stack trace you might be familiar.</p>
    <h3 id="a-simple-event-loop-explanation">A simple event loop explanation</h3>
    <p>The event loop on every iteration looks if there’s something in the call stack, and executes it until the call stack is empty.
```js
const bar = () =&gt; console.log(‘bar’)</p>
  </li>
</ul>

<p>const baz = () =&gt; console.log(‘baz’)</p>

<p>const foo = () =&gt; {
  console.log(‘foo’)
  bar()
  baz()
}</p>

<p>foo()</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre>### Queuing function execution
The above example looks normal, there's nothing special about it: JavaScript finds things to execute, runs them in order.
Let's see how to defer a function until the stack is clear.
The use case of setTimeout(() =&gt; {}, 0) is to call a function, but execute it once every other function in the code has executed.
```JS
const bar = () =&gt; console.log('bar')

const baz = () =&gt; console.log('baz')

const foo = () =&gt; {
  console.log('foo')
  setTimeout(bar, 0)
  baz()
}

foo()
</pre></td></tr></tbody></table></code></pre></div></div>
<p>When this code runs, first foo() is called. Inside foo() we first call setTimeout, passing bar as an argument, and we instruct it to run immediately as fast as it can, passing 0 as the timer. Then we call baz().
<img src="https://nodejs.dev/static/be55515b9343074d00b43de88c495331/fcda8/call-stack-second-example.png" alt="Queue call stack function example" title="Queue call stack function example" /></p>
<h3 id="the-message-queue">The Message Queue</h3>
<p>When setTimeOut is called. Browser or Node.JS start a timer. Once the timer expire as in this case we put 0 as the timeout. The call backfunction intermediately put in the <strong>Message queue</strong>.
Message queue is also where user initiated event like click, scroll, mouse or keyboard, fetch reponse before your code has opportunity to reach to them. Or also DOM event like <code class="language-plaintext highlighter-rouge">onload</code>.
The loop gives the priority to the callstack, and it’s first find in the callstack, and once there’s nothing in there. Ir’s goes to pich up things in the message queue.</p>
<h3 id="es6-job-queue">ES6 Job Queue</h3>
<p>ECMA script 2015 introduced concept of the job queue, which is used by Promise. It’s a way to execute a result of an async function as soon as posible, rather puting the end of the call stack.
Promise is resole the current function ends will execute right after the function current function.
Similar to a rollercoaster ride at an amusement park: the message queue puts you at the back of the queue, behind all the other people, where you will have to wait for your turn, while the job queue is the fastpass ticket that lets you take another ride right after you finished the previous one.</p>
<pre><code class="language-JS">const bar = () =&gt; console.log('bar')

const baz = () =&gt; console.log('baz')

const foo = () =&gt; {
  console.log('foo')
  setTimeout(bar, 0)
  new Promise((resolve, reject) =&gt;
    resolve('should be right after baz, before bar')
  ).then(resolve =&gt; console.log(resolve))
  baz()
}
foo()
</code></pre>
<p>That’s a big difference between Promises (and Async/await, which is built on promises) and plain old asynchronous functions through setTimeout() or other platform APIs.
Finally, here’s what the call stack looks like for the example above:</p>
<h2 id="differences-between-nodejs-and-the-browser">Differences between Node.js and the Browser</h2>
<ul>
  <li>NodeJs give Huge advance, you can perform all your work on the web, both client and server. The confor of programming everything - the frontend and the backend in a single languages.</li>
  <li>Another big difference is that in Node.js you control the environment. Unless you are building an open source application that anyone can deploy anywhere, you know which version of Node.js you will run the application on. This means that you can write all the modern ES6-7-8-9 JavaScript that your Node.js version supports.</li>
  <li>Node.js supports both the CommonJS and ES module systems (since Node.js v12), while in the browser we are starting to see the ES Modules standard being implemented. This means that you can use both require() and import in Node.js, while you are limited to import in the browser.
    <h2 id="the-v8-javascript-engine">The V8 JavaScript Engine</h2>
  </li>
  <li>V8 is the name of the JavaScript engine that powers Google Chrome.</li>
  <li>Firefox has SpiderMonkey</li>
  <li>Safari has JavaScriptCore (also called Nitro)</li>
  <li>Edge was originally based on Chakra but has more recently been rebuilt using Chromium and the V8 engine.
    <h3 id="the-quest-for-performance">The quest for performance</h3>
    <p>V8 is written in C++, and it’s continously improved. It is portable and runs on Mac, Windows, Linux and several other systems. V8 is always evolving, just like the other javascript engines around, to speed up the Web and the Node.js ecosystem.</p>
    <h3 id="compilation">Compilation</h3>
    <p>Javascript is internally compiled by V8 with <strong>just in time</strong>(JIT), and <strong>compilation</strong> to speed up the excecution.</p>
    <h2 id="run-nodejs-scripts">Run Node.js scripts</h2>
    <p>The usual way to run a Node.js program is to run globally available <code class="language-plaintext highlighter-rouge">node</code> command.
If your main Node.js application file is <code class="language-plaintext highlighter-rouge">app.js</code>, you can call it by typing:</p>
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nb">chmod </span>u+x app.js
node app.js
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>The content of file <code class="language-plaintext highlighter-rouge">app.js</code>
```js
#!/usr/bin/env node</p>
  </li>
</ul>

<p>// your code</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>### Restart the application automatically
Install `nodemon` module
### How to exit from a Node.js program
```JS
process.exit(1);
process.exitCode = 1;
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Another example:</p>
<pre><code class="language-JS">const express = require('express');

const app = express();

app.get('/', (req, res) =&gt; {
  res.send('Hi!');
});

const server = app.listen(3000, () =&gt; console.log('Server ready'));

process.on('SIGTERM', () =&gt; {
  server.close(() =&gt; {
    console.log('Process terminated');
  });
});
</code></pre>
<p><em><strong>Express</strong> is a framework that uses the http module under the hood, app.listen() returns an instance of http. You would use https.createServer if you needed to serve your app using HTTPS, as app.listen only uses the http module.</em></p>
<h3 id="nodejs-accept-arguments-from-the-command-line">Node.js, accept arguments from the command line</h3>
<pre><code class="language-JS">node app.js var_1=abc
</code></pre>
<h3 id="how-to-read-environment-variables-from-nodejs">How to read environment variables from Node.js</h3>
<pre><code class="language-JS">USER_ID=239482 USER_KEY=foobar node app.js
// process by JS
process.env.USER_ID; // "239482"
process.env.USER_KEY; // "foobar"
</code></pre>
<blockquote>
  <p>Note: process does not require a “require”, it’s automatically available.
If you have multiple environment variables in your node project, you can create <code class="language-plaintext highlighter-rouge">.env</code> file in the root directory of your project, and use the <code class="language-plaintext highlighter-rouge">dotenv</code> package to load them during runtime.</p>
  <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="c"># .env file</span>
<span class="nv">USER_ID</span><span class="o">=</span><span class="s2">"239482"</span>
<span class="nv">USER_KEY</span><span class="o">=</span><span class="s2">"foobar"</span>
<span class="nv">NODE_ENV</span><span class="o">=</span><span class="s2">"development"</span>
</pre></td></tr></tbody></table></code></pre></div>  </div>
  <p>The way you retrieve it is using the <code class="language-plaintext highlighter-rouge">process</code> object built into Node.js
It exposes an <code class="language-plaintext highlighter-rouge">argv</code> property, which is an array that contains all the command line invocation arguments.</p>
  <pre><code class="language-JS">process.argv.forEach((val, index) =&gt; {
    console.log(`${index}: ${val}`);
});
const args = require('minimist')(process.argv.slice(2));
args.name;
</code></pre>
  <p>```JS
require(‘dotenv’).config();</p>
</blockquote>

<p>process.env.USER_ID; // “239482”
process.env.USER_KEY; // “foobar”
process.env.NODE_ENV; // “development”</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre>&gt; You can also run your js file with `node -r dotenv/config index.js` command if you don't want to import the package in your code.
You can install `minimist` package using `npm`. and when retrieve variable from nodejs use: `node app.js --name=joe`
### Output to the command line using Node.js
You can pass multiple variables to `console.log`
```JS
const x = 'x';
const y = 'y';
console.log(x, y);
console.log('My %s has %d ears', 'cat', 2);
console.clear()
const x = 1
const y = 2
const z = 3
console.count(
  'The value of x is ' + x +
  ' and has been checked .. how many times?'
)
console.count(
  'The value of x is ' + x +
  ' and has been checked .. how many times?'
)
console.count(
  'The value of y is ' + y +
  ' and has been checked .. how many times?'
)
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Print stach trace</p>
<pre><code class="language-JS">function2 = () =&gt; {
    console.trace()
}
function1 = () =&gt; function2();
function1();
</code></pre>
<p>Output console</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre>Trace
    at function2 <span class="o">(</span>repl:1:33<span class="o">)</span>
    at function1 <span class="o">(</span>repl:1:25<span class="o">)</span>
    at repl:1:1
    at ContextifyScript.Script.runInThisContext <span class="o">(</span>vm.js:44:33<span class="o">)</span>
    at REPLServer.defaultEval <span class="o">(</span>repl.js:239:29<span class="o">)</span>
    at bound <span class="o">(</span>domain.js:301:14<span class="o">)</span>
    at REPLServer.runBound <span class="o">[</span>as <span class="nb">eval</span><span class="o">]</span> <span class="o">(</span>domain.js:314:12<span class="o">)</span>
    at REPLServer.onLine <span class="o">(</span>repl.js:440:10<span class="o">)</span>
    at emitOne <span class="o">(</span>events.js:120:20<span class="o">)</span>
    at REPLServer.emit <span class="o">(</span>events.js:210:7<span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="calculate-time-spent">Calculate time spent</h4>
<p>Calculate how much time a function you take to run: time<code class="language-plaintext highlighter-rouge">time</code>, <code class="language-plaintext highlighter-rouge">timeEnd</code></p>
<pre><code class="language-JS">const doSomething = () =&gt; console.log('test');
const measureDoingSomething = () =&gt; {
  console.time('doSomething()');
  // do something, and measure the time it takes
  doSomething();
  console.timeEnd('doSomething()');
};
measureDoingSomething();
</code></pre>
<h3 id="create-a-progress-bar">Create a progress bar</h3>
<p><a href="https://www.npmjs.com/package/progress">Progress</a> is an awesome package that help create an progress bar in console. Installing it using <code class="language-plaintext highlighter-rouge">npm install progress</code>.</p>
<pre><code class="language-JS">const ProgressBar = require('progress');

const bar = new ProgressBar(':bar', { total: 10 });
const timer = setInterval(() =&gt; {
  bar.tick();
  if (bar.complete) {
    clearInterval(timer);
  }
}, 100);
</code></pre>
<h2 id="server-side-pagination-in-nodejs-with-sequelize--mysql">Server side Pagination in Node.js with Sequelize &amp; MySQL</h2>
<p>Server side pagination is better for:</p>
<ul>
  <li>Larger data set</li>
  <li>Faster initial page load</li>
  <li>Accessibility for those running javascript</li>
  <li>Complex view running
    <h3 id="nodejs-pagination-with-sequelize-and-mysql-overview">Node.js Pagination with Sequelize and MySQL overview</h3>
    <p>Assume display a table below</p>
  </li>
</ul>

<p><img src="https://www.bezkoder.com/wp-content/uploads/2020/06/pagination-node-js-mysql-sequelize-database-table.png" alt="Pagination table" title="pagination table" />
Node.js Express Server will exports API for pagination (with/without filter), here are some url samples:</p>
<ul>
  <li>/api/tutorials?page=1&amp;size=5</li>
  <li>/api/tutorials?size=5: using default value for page</li>
  <li>/api/tutorials?title=data&amp;page=1&amp;size=3: pagination &amp; filter by title containing ‘data’</li>
  <li>/api/tutorials/published?page=2: pagination &amp; filter by ‘published’ status
Result by json:
    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="w">
  </span><span class="nl">"totalItems"</span><span class="p">:</span><span class="w"> </span><span class="mi">8</span><span class="p">,</span><span class="w">
  </span><span class="nl">"tutorials"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="err">...</span><span class="p">],</span><span class="w">
  </span><span class="nl">"totalPages"</span><span class="p">:</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w">
  </span><span class="nl">"currentPage"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div>    </div>
    <h3 id="nodejs-sequelize-for-pagination">Node.js Sequelize for Pagination</h3>
    <p>Sequelize provide way to implement pagination with <code class="language-plaintext highlighter-rouge">offset</code> and <code class="language-plaintext highlighter-rouge">limit</code></p>
  </li>
  <li>offset: quantity of items to skip</li>
  <li>limit: quantity of items to fetch
Example:</li>
  <li>{ offset: 3, limit: 2 }: skip first 3 items, fetch 4th and 5th items.
    <h3 id="sequelize-findall">Sequelize findAll</h3>
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="nx">model</span><span class="p">.</span><span class="nf">findAll</span><span class="p">({</span>
<span class="na">limit</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
<span class="na">offset</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
<span class="na">where</span><span class="p">:</span> <span class="p">{</span> <span class="na">title</span><span class="p">:</span> <span class="p">{</span> <span class="p">[</span><span class="nx">Op</span><span class="p">.</span><span class="nx">like</span><span class="p">]:</span> <span class="s2">`%js%`</span> <span class="p">}</span> <span class="p">},</span> <span class="c1">// conditions</span>
<span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>The result:</p>
    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="p">[</span><span class="w">
  </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w">
      </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bezkoder Tut#4 Rest Apis"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Tut#4 Description"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"createdAt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2020-06-05T11:55:07.000Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"updatedAt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2020-06-05T11:55:07.000Z"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w">
      </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bezkoder Tut#5 MySQL"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Tut#5 Description"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"createdAt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2020-06-05T11:55:11.000Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"updatedAt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2020-06-05T11:55:11.000Z"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div>    </div>
    <h3 id="sequelize-findandcountall">Sequelize findAndCountAll</h3>
    <p>Template</p>
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="nx">model</span><span class="p">.</span><span class="nf">findAndCountAll</span><span class="p">({</span>
<span class="na">limit</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
<span class="na">offset</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
<span class="na">where</span><span class="p">:</span> <span class="p">{},</span> <span class="c1">// conditions</span>
<span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>Result</p>
    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="w">
  </span><span class="nl">"count"</span><span class="p">:</span><span class="w"> </span><span class="mi">8</span><span class="p">,</span><span class="w">
  </span><span class="nl">"rows"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="p">{</span><span class="w">
          </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w">
          </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bezkoder Tut#4 Rest Apis"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Tut#4 Description"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
          </span><span class="nl">"createdAt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2020-06-05T11:55:07.000Z"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"updatedAt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2020-06-05T11:55:07.000Z"</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w">
          </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w">
          </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bezkoder Tut#5 MySQL"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Tut#5 Description"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
          </span><span class="nl">"createdAt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2020-06-05T11:55:11.000Z"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"updatedAt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2020-06-05T11:55:11.000Z"</span><span class="w">
      </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div>    </div>
    <h3 id="setup-nodejs-express-application">Setup Node.js Express Application</h3>
    <p>Install necessary modules: <code class="language-plaintext highlighter-rouge">express</code>, <code class="language-plaintext highlighter-rouge">sequelize</code>, <code class="language-plaintext highlighter-rouge">mysql2</code>
Run the command:</p>
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>npm <span class="nb">install </span>express sequelize mysql2 cors <span class="nt">--save</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>The Node.js project structure that we only need to add some changes to make the pagination work well.
<img src="https://www.bezkoder.com/wp-content/uploads/2020/06/pagination-node-js-mysql-sequelize-project-structure.png" alt="Project structure" title="Project structure" /></p>
    <h3 id="configure-mysql-database--sequelize">Configure MySQL database &amp; Sequelize</h3>
    <p>DB configure</p>
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
<span class="na">HOST</span><span class="p">:</span> <span class="dl">"</span><span class="s2">localhost</span><span class="dl">"</span><span class="p">,</span>
<span class="na">USER</span><span class="p">:</span> <span class="dl">"</span><span class="s2">root</span><span class="dl">"</span><span class="p">,</span>
<span class="na">PASSWORD</span><span class="p">:</span> <span class="dl">"</span><span class="s2">123456</span><span class="dl">"</span><span class="p">,</span>
<span class="na">DB</span><span class="p">:</span> <span class="dl">"</span><span class="s2">testdb</span><span class="dl">"</span><span class="p">,</span>
<span class="na">dialect</span><span class="p">:</span> <span class="dl">"</span><span class="s2">mysql</span><span class="dl">"</span><span class="p">,</span>
<span class="na">pool</span><span class="p">:</span> <span class="p">{</span>
  <span class="na">max</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
  <span class="na">min</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="na">acquire</span><span class="p">:</span> <span class="mi">30000</span><span class="p">,</span>
  <span class="na">idle</span><span class="p">:</span> <span class="mi">10000</span>
<span class="p">}</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <h3 id="initialize-sequelize">Initialize Sequelize</h3>
    <p>Create app/models/index.js with the following code:</p>
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">dbConfig</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../config/db.config.js</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">Sequelize</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">sequelize</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">sequelize</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Sequelize</span><span class="p">(</span><span class="nx">dbConfig</span><span class="p">.</span><span class="nx">DB</span><span class="p">,</span> <span class="nx">dbConfig</span><span class="p">.</span><span class="nx">USER</span><span class="p">,</span> <span class="nx">dbConfig</span><span class="p">.</span><span class="nx">PASSWORD</span><span class="p">,</span> <span class="p">{</span>
<span class="na">host</span><span class="p">:</span> <span class="nx">dbConfig</span><span class="p">.</span><span class="nx">HOST</span><span class="p">,</span>
<span class="na">dialect</span><span class="p">:</span> <span class="nx">dbConfig</span><span class="p">.</span><span class="nx">dialect</span><span class="p">,</span>
<span class="na">operatorsAliases</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
<span class="na">pool</span><span class="p">:</span> <span class="p">{</span>
  <span class="na">max</span><span class="p">:</span> <span class="nx">dbConfig</span><span class="p">.</span><span class="nx">pool</span><span class="p">.</span><span class="nx">max</span><span class="p">,</span>
  <span class="na">min</span><span class="p">:</span> <span class="nx">dbConfig</span><span class="p">.</span><span class="nx">pool</span><span class="p">.</span><span class="nx">min</span><span class="p">,</span>
  <span class="na">acquire</span><span class="p">:</span> <span class="nx">dbConfig</span><span class="p">.</span><span class="nx">pool</span><span class="p">.</span><span class="nx">acquire</span><span class="p">,</span>
  <span class="na">idle</span><span class="p">:</span> <span class="nx">dbConfig</span><span class="p">.</span><span class="nx">pool</span><span class="p">.</span><span class="nx">idle</span>
<span class="p">}</span>
<span class="p">});</span>
<span class="kd">const</span> <span class="nx">db</span> <span class="o">=</span> <span class="p">{};</span>
<span class="nx">db</span><span class="p">.</span><span class="nx">Sequelize</span> <span class="o">=</span> <span class="nx">Sequelize</span><span class="p">;</span>
<span class="nx">db</span><span class="p">.</span><span class="nx">sequelize</span> <span class="o">=</span> <span class="nx">sequelize</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>Don’t forget to call <code class="language-plaintext highlighter-rouge">sync()</code> method in server.js</p>
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="p">...</span>
<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nf">express</span><span class="p">();</span>
<span class="nx">app</span><span class="p">.</span><span class="nf">use</span><span class="p">(...);</span>
<span class="kd">const</span> <span class="nx">db</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">./app/models</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">db</span><span class="p">.</span><span class="nx">sequelize</span><span class="p">.</span><span class="nf">sync</span><span class="p">();</span>
<span class="cm">/*
db.sequelize.sync({ force: true }).then(() =&gt; {
console.log("Drop and re-sync db.");
});
*/</span>
<span class="p">...</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <h3 id="create-data-model">Create Data Model</h3>
    <p>In models folder, create tutorial.model.js file like this:</p>
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="nx">odule</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">(</span><span class="nx">sequelize</span><span class="p">,</span> <span class="nx">Sequelize</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="kd">const</span> <span class="nx">Tutorial</span> <span class="o">=</span> <span class="nx">sequelize</span><span class="p">.</span><span class="nf">define</span><span class="p">(</span><span class="dl">"</span><span class="s2">tutorial</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">title</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nx">Sequelize</span><span class="p">.</span><span class="nx">STRING</span>
  <span class="p">},</span>
  <span class="na">description</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nx">Sequelize</span><span class="p">.</span><span class="nx">STRING</span>
  <span class="p">},</span>
  <span class="na">published</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nx">Sequelize</span><span class="p">.</span><span class="nx">BOOLEAN</span>
  <span class="p">}</span>
<span class="p">});</span>
<span class="k">return</span> <span class="nx">Tutorial</span><span class="p">;</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>After initializing Sequelize, we don’t need to write CRUD functions, Sequelize supports all of them. Now you can easily use following methods with pagination:</p>
  </li>
  <li>get all Tutorials: findAll({ limit, offsCreate Node.js Express API layeret })</li>
  <li>find all Tutorials by title: findAll({ where: { title: … }, limit, offset })</li>
  <li>find and count all Tutorials: findAndCountAll({ limit, offset })</li>
  <li>find and count all Tutorials by title: findAndCountAll({ where: { title: … }, limit, offset })
    <h3 id="controller-with-pagination">Controller with Pagination</h3>
    <p>So, let’s write the function to map default response to desired structure:</p>
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">getPagination</span> <span class="o">=</span> <span class="p">(</span><span class="nx">page</span><span class="p">,</span> <span class="nx">size</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="kd">const</span> <span class="nx">limit</span> <span class="o">=</span> <span class="nx">size</span> <span class="p">?</span> <span class="o">+</span><span class="nx">size</span> <span class="p">:</span> <span class="mi">3</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">offset</span> <span class="o">=</span> <span class="nx">page</span> <span class="p">?</span> <span class="nx">page</span> <span class="o">*</span> <span class="nx">limit</span> <span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">return</span> <span class="p">{</span> <span class="nx">limit</span><span class="p">,</span> <span class="nx">offset</span> <span class="p">};</span>
<span class="p">};</span>
<span class="kd">const</span> <span class="nx">getPagingData</span> <span class="o">=</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">page</span><span class="p">,</span> <span class="nx">limit</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="kd">const</span> <span class="p">{</span> <span class="na">count</span><span class="p">:</span> <span class="nx">totalItems</span><span class="p">,</span> <span class="na">rows</span><span class="p">:</span> <span class="nx">tutorials</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">currentPage</span> <span class="o">=</span> <span class="nx">page</span> <span class="p">?</span> <span class="o">+</span><span class="nx">page</span> <span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">totalPages</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">ceil</span><span class="p">(</span><span class="nx">totalItems</span> <span class="o">/</span> <span class="nx">limit</span><span class="p">);</span>
<span class="k">return</span> <span class="p">{</span> <span class="nx">totalItems</span><span class="p">,</span> <span class="nx">tutorials</span><span class="p">,</span> <span class="nx">totalPages</span><span class="p">,</span> <span class="nx">currentPage</span> <span class="p">};</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>Now the code in tutorial.controller.js will look like this:</p>
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">db</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../models</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">Tutorial</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">tutorials</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">Op</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">Sequelize</span><span class="p">.</span><span class="nx">Op</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">getPagination</span> <span class="o">=</span> <span class="p">...;</span>
<span class="kd">const</span> <span class="nx">getPagingData</span> <span class="o">=</span> <span class="p">...;</span>
<span class="c1">// Retrieve all Tutorials from the database.</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">findAll</span> <span class="o">=</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">page</span><span class="p">,</span> <span class="nx">size</span><span class="p">,</span> <span class="nx">title</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">condition</span> <span class="o">=</span> <span class="nx">title</span> <span class="p">?</span> <span class="p">{</span> <span class="na">title</span><span class="p">:</span> <span class="p">{</span> <span class="p">[</span><span class="nx">Op</span><span class="p">.</span><span class="nx">like</span><span class="p">]:</span> <span class="s2">`%</span><span class="p">${</span><span class="nx">title</span><span class="p">}</span><span class="s2">%`</span> <span class="p">}</span> <span class="p">}</span> <span class="p">:</span> <span class="kc">null</span><span class="p">;</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">limit</span><span class="p">,</span> <span class="nx">offset</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">getPagination</span><span class="p">(</span><span class="nx">page</span><span class="p">,</span> <span class="nx">size</span><span class="p">);</span>
<span class="nx">Tutorial</span><span class="p">.</span><span class="nf">findAndCountAll</span><span class="p">({</span> <span class="na">where</span><span class="p">:</span> <span class="nx">condition</span><span class="p">,</span> <span class="nx">limit</span><span class="p">,</span> <span class="nx">offset</span> <span class="p">})</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="nf">getPagingData</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">page</span><span class="p">,</span> <span class="nx">limit</span><span class="p">);</span>
    <span class="nx">res</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="mi">500</span><span class="p">).</span><span class="nf">send</span><span class="p">({</span>
      <span class="na">message</span><span class="p">:</span>
        <span class="nx">err</span><span class="p">.</span><span class="nx">message</span> <span class="o">||</span> <span class="dl">"</span><span class="s2">Some error occurred while retrieving tutorials.</span><span class="dl">"</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">};</span>
<span class="c1">// find all published Tutorial</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <h3 id="create-nodejs-express-api-layer">Create Node.js Express API layer</h3>
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">app</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="kd">const</span> <span class="nx">tutorials</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../controllers/tutorial.controller.js</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">).</span><span class="nc">Router</span><span class="p">();</span>
<span class="c1">// Retrieve all Tutorials</span>
<span class="nx">router</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="nx">tutorials</span><span class="p">.</span><span class="nx">findAll</span><span class="p">);</span>
<span class="c1">// Retrieve all published Tutorials</span>
<span class="nx">router</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/published</span><span class="dl">"</span><span class="p">,</span> <span class="nx">tutorials</span><span class="p">.</span><span class="nx">findAllPublished</span><span class="p">);</span>
<span class="p">...</span>
<span class="nx">app</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/tutorials</span><span class="dl">'</span><span class="p">,</span> <span class="nx">router</span><span class="p">);</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <h2 id="accept-input-from-the-command-line-in-nodejs">Accept input from the command line in Node.js</h2>
    <p>readable stream such as <code class="language-plaintext highlighter-rouge">process.stdin</code> and use module <code class="language-plaintext highlighter-rouge">readline</code> to perform access input from the command line
```JS
const readline = require(‘readline’).createInterface({
input: process.stdin,
output: process.stdout,
});</p>
  </li>
</ul>

<p>readline.question(<code class="language-plaintext highlighter-rouge">What's your name?</code>, name =&gt; {
  console.log(<code class="language-plaintext highlighter-rouge">Hi ${name}!</code>);
  readline.close();
});</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre>Another example to perform by `inquirer`
```js
const inquirer = require('inquirer');

const questions = [
  {
    type: 'input',
    name: 'name',
    message: "What's your name?",
  },
];

inquirer.prompt(questions).then(answers =&gt; {
  console.log(`Hi ${answers.name}!`);
});
</pre></td></tr></tbody></table></code></pre></div></div>
<h2 id="expose-functionality-from-a-nodejs-file-using-exports">Expose functionality from a Node.js file using exports</h2>
<p>When you want to import something you use</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">library</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">.library</span><span class="dl">'</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>This is what the <code class="language-plaintext highlighter-rouge">module.exports</code> API offfered by the <code class="language-plaintext highlighter-rouge">module</code> system to allow us to do.
You can do so in 2 ways</p>
<pre><code class="language-JS">// car.js
const car = {
  brand: 'Ford',
  model: 'Fiesta',
};

module.exports = car;
</code></pre>
<pre><code class="language-JS">// index.js
const car = require('./car')
</code></pre>
<p>The second way is to add the exported object as a property of exports. This way allows you to export multiple objects, functions or data:</p>
<pre><code class="language-JS">const car = {
  brand: 'Ford',
  model: 'Fiesta',
};

exports.car = car;
</code></pre>
<p>Or directly</p>
<pre><code class="language-JS">exports.car = {
  brand: 'Ford',
  model: 'Fiesta',
};
</code></pre>
<p>And in the other file, you’ll use it by referencing a property of your import:</p>
<pre><code class="language-JS">const items = require('./car');

const { car } = items;
</code></pre>
<p>Or you can use a destructuring assigement</p>
<pre><code class="language-JS">const { car } = require('./car')
</code></pre>
<p>Example</p>
<pre><code class="language-JS">// car.js
exports.car = {
  brand: 'Ford',
  model: 'Fiesta',
};

module.exports = {
  brand: 'Tesla',
  model: 'Model S',
};

// app.js
const tesla = require('./car');
const ford = require('./car').car;

console.log(tesla, ford);
</code></pre>
<p>This will print { brand: ‘Tesla’, model: ‘Model S’ } undefined since the require function’s return value has been updated to the object that module.exports points to, so the property that exports added can’t be accessed.</p>
<h2 id="an-introduction-to-the-npm-package-manager">An introduction to the npm package manager</h2>
<ul>
  <li>npm</li>
  <li>yarn</li>
  <li>pnpm
Install from single package
Often you’ll see more flags added to this command:</li>
  <li>–save-dev installs and adds the entry to the package.json file devDependencies</li>
  <li>–no-save installs but does not add the entry to the package.json file dependencies</li>
  <li>–save-optional installs and adds the entry to the package.json file optionalDependencies</li>
  <li>
    <p>–no-optional will prevent optional dependencies from being installed
Shorthands of the flags can also be used:</p>
  </li>
  <li>-S: –save</li>
  <li>-D: –save-dev</li>
  <li>-O: –save-optional
<strong>To Update</strong>
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>npm update
npm update &lt;package-name&gt;
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>You can manage version by <code class="language-plaintext highlighter-rouge">npm</code>. Install or update package with version by command</p>
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>npm <span class="nb">install</span> &lt;package-name&gt;@&lt;version&gt;
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <h3 id="running-tasks">Running Tasks</h3>
    <pre><code class="language-JS">npm run &lt;task-name&gt;
</code></pre>
    <pre><code class="language-JSON">{
"scripts": {
  "watch": "webpack --watch --progress --colors --config webpack.conf.js",
  "dev": "webpack --progress --colors --config webpack.conf.js",
  "prod": "NODE_ENV=production webpack -p --config webpack.conf.js",
}
}
</code></pre>
    <h2 id="where-does-npm-install-the-packages">Where does npm install the packages?</h2>
  </li>
  <li>a local install</li>
  <li>a global install
By default, the package is installed in the current file tree, under the node_modules subfolder. A global installation is performed using the <code class="language-plaintext highlighter-rouge">-g</code> flag
    <h2 id="the-packagejson-guide">The package.json guide</h2>
    <p>The file structure of <code class="language-plaintext highlighter-rouge">package.json</code> is present in Json file</p>
    <pre><code class="language-Json">copy
{
"name": "test-project",
"version": "1.0.0",
"description": "A Vue.js project",
"main": "src/main.js",
"private": true,
"scripts": {
  "dev": "webpack-dev-server --inline --progress --config build/webpack.dev.conf.js",
  "start": "npm run dev",
  "unit": "jest --config test/unit/jest.conf.js --coverage",
  "test": "npm run unit",
  "lint": "eslint --ext .js,.vue src test/unit",
  "build": "node build/build.js"
},
"dependencies": {
  "vue": "^2.5.2"
},
"devDependencies": {
  "autoprefixer": "^7.1.2",
  "babel-core": "^6.22.1",
  "babel-eslint": "^8.2.1",
  "babel-helper-vue-jsx-merge-props": "^2.0.3",
  "babel-jest": "^21.0.2",
  "babel-loader": "^7.1.1",
  "babel-plugin-dynamic-import-node": "^1.2.0",
  "babel-plugin-syntax-jsx": "^6.18.0",
  "babel-plugin-transform-es2015-modules-commonjs": "^6.26.0",
  "babel-plugin-transform-runtime": "^6.22.0",
  "babel-plugin-transform-vue-jsx": "^3.5.0",
  "babel-preset-env": "^1.3.2",
  "babel-preset-stage-2": "^6.22.0",
  "chalk": "^2.0.1",
  "copy-webpack-plugin": "^4.0.1",
  "css-loader": "^0.28.0",
  "eslint": "^4.15.0",
  "eslint-config-airbnb-base": "^11.3.0",
  "eslint-friendly-formatter": "^3.0.0",
  "eslint-import-resolver-webpack": "^0.8.3",
  "eslint-loader": "^1.7.1",
  "eslint-plugin-import": "^2.7.0",
  "eslint-plugin-vue": "^4.0.0",
  "extract-text-webpack-plugin": "^3.0.0",
  "file-loader": "^1.1.4",
  "friendly-errors-webpack-plugin": "^1.6.1",
  "html-webpack-plugin": "^2.30.1",
  "jest": "^22.0.4",
  "jest-serializer-vue": "^0.3.0",
  "node-notifier": "^5.1.2",
  "optimize-css-assets-webpack-plugin": "^3.2.0",
  "ora": "^1.2.0",
  "portfinder": "^1.0.13",
  "postcss-import": "^11.0.0",
  "postcss-loader": "^2.0.8",
  "postcss-url": "^7.2.1",
  "rimraf": "^2.6.0",
  "semver": "^5.3.0",
  "shelljs": "^0.7.6",
  "uglifyjs-webpack-plugin": "^1.1.1",
  "url-loader": "^0.5.8",
  "vue-jest": "^1.0.2",
  "vue-loader": "^13.3.0",
  "vue-style-loader": "^3.0.1",
  "vue-template-compiler": "^2.5.2",
  "webpack": "^3.6.0",
  "webpack-bundle-analyzer": "^2.9.0",
  "webpack-dev-server": "^2.9.1",
  "webpack-merge": "^4.1.0"
},
"engines": {
  "node": "&gt;= 6.0.0",
  "npm": "&gt;= 3.0.0"
},
"browserslist": ["&gt; 1%", "last 2 versions", "not ie &lt;= 8"]
}
</code></pre>
    <p>There are lots of things going on here:</p>
  </li>
  <li>version indicates the current version</li>
  <li>name sets the application/package name</li>
  <li>description is a brief description of the app/package</li>
  <li>main sets the entry point for the application</li>
  <li>private if set to true prevents the app/package to be accidentally published on npm</li>
  <li>scripts defines a set of node scripts you can run</li>
  <li>dependencies sets a list of npm packages installed as dependencies</li>
  <li>devDependencies sets a list of npm packages installed as development dependencies</li>
  <li>engines sets which versions of Node.js this package/app works on</li>
  <li>browserslist is used to tell which browsers (and their versions) you want to support
    <h2 id="the-package-lockjson-file">The package-lock.json file</h2>
    <p>The goal of <code class="language-plaintext highlighter-rouge">package-lock.json</code> file is to keep track of the exact version of every package that is installed so that a product is 100% reproducible in the same way even if packages are updated by their maintainers.</p>
    <h2 id="find-the-installed-version-of-an-npm-package">Find the installed version of an npm package</h2>
    <p>To see the version of all installed npm packages, including their dependencies</p>
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>npm list
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>for example</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre>❯ npm list
/Users/joe/dev/node/cowsay
└─┬ cowsay@1.3.1
├── get-stdin@5.0.1
├─┬ optimist@0.6.1
│ ├── minimist@0.0.10
│ └── wordwrap@0.0.3
├─┬ string-width@2.1.1
│ ├── is-fullwidth-code-point@2.0.0
│ └─┬ strip-ansi@4.0.0
│   └── ansi-regex@3.0.0
└── strip-eof@1.0.0
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>To get only your top-level packages (basically, the ones you told npm to install and you listed in the package.json), run npm list –depth=0:</p>
    <h2 id="install-an-older-version-of-an-npm-package">Install an older version of an npm package</h2>
    <p>You might also be interested in listing all the previous versions of a package. You can do it with npm view <package> versions:
```bash
❯ npm view cowsay versions</package></p>
  </li>
</ul>

<p>[ ‘1.0.0’,
  ‘1.0.1’,
  ‘1.0.2’,
  ‘1.0.3’,
  ‘1.1.0’,
  ‘1.1.1’,
  ‘1.1.2’,
  ‘1.1.3’,
  ‘1.1.4’,
  ‘1.1.5’,
  ‘1.1.6’,
  ‘1.1.7’,
  ‘1.1.8’,
  ‘1.1.9’,
  ‘1.2.0’,
  ‘1.2.1’,
  ‘1.3.0’,
  ‘1.3.1’ ]</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>Install package
```bash
npm install &lt;package&gt;@&lt;version&gt;
</pre></td></tr></tbody></table></code></pre></div></div>
<h2 id="semantic-versioning-using-npm">Semantic Versioning using npm</h2>
<p>All versions have 3 digits: x.y.z</p>
<ul>
  <li>the first digit is the major version</li>
  <li>the second digit is the minor version</li>
  <li>the third digit is the patch version
<strong>Let’s see those rules in detail</strong>:</li>
  <li>^: It will only do updates that do not change the leftmost non-zero number i.e there can be changes in minor version or patch version but not in major version. If you write ^13.1.0, when running npm update, it can update to 13.2.0, 13.3.0 even 13.3.1, 13.3.2 and so on, but not to 14.0.0 or above.</li>
  <li>~: if you write ~0.13.0 when running npm update it can update to patch releases: 0.13.1 is ok, but 0.14.0 is not.</li>
  <li>&gt;: you accept any version higher than the one you specify</li>
  <li>&gt;=: you accept any version equal to or higher than the one you specify</li>
  <li>&lt;=: you accept any version equal or lower to the one you specify</li>
  <li>&lt;: you accept any version lower than the one you specify</li>
  <li>=: you accept that exact version</li>
  <li>-: you accept a range of versions. Example: 2.1.0 - 2.6.2</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td> </td>
          <td>: you combine sets. Example: &lt; 2.1</td>
          <td> </td>
          <td>&gt; 2.6</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>no symbol: you accept only that specific version you specify (1.2.1)</li>
  <li>latest: you want to use the latest version available
    <h2 id="uninstalling-npm-packages">Uninstalling npm packages</h2>
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nx">npm</span> <span class="nx">uninstall</span> <span class="o">&lt;</span><span class="kr">package</span><span class="o">-</span><span class="nx">name</span><span class="o">&gt;</span>
<span class="nx">npm</span> <span class="nx">uninstall</span> <span class="o">-</span><span class="nx">g</span> <span class="o">&lt;</span><span class="kr">package</span><span class="o">-</span><span class="nx">name</span><span class="o">&gt;</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <h2 id="npm-global-or-local-packages">npm global or local packages</h2>
    <p>In your code you can only require local packages:</p>
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">package-name</span><span class="dl">'</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>A package should be installed globally when it provides an executable command that you run from the shell (CLI), and it’s reused across projects.
Great examples of popular global packages which you might know are</p>
  </li>
  <li>npm</li>
  <li>vue-cli</li>
  <li>grunt-cli</li>
  <li>mocha</li>
  <li>react-native-cli</li>
  <li>gatsby-cli</li>
  <li>forever</li>
  <li>nodemon
You probably have some packages installed globally already on your system. You can see them by running
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>npm list <span class="nt">-g</span> <span class="nt">--depth</span> 0
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <h2 id="npm-dependencies-and-devdependencies">npm dependencies and devDependencies</h2>
    <p>When you install an npm package, you are installing it as a dependency.
When you install with option <code class="language-plaintext highlighter-rouge">--save-dev</code>, you are installing it as a development dependency.
development dependencies are intended as development-only packages, that are unneeded in production. So when you run comman <code class="language-plaintext highlighter-rouge">npm install</code> in production you should need include flag <code class="language-plaintext highlighter-rouge">production</code> such as <code class="language-plaintext highlighter-rouge">npm install --production</code>.</p>
    <h2 id="the-npx-nodejs-package-runner">The npx Node.js Package Runner</h2>
    <p>npm allow you to run that npm command without installing it first. If the command isn’t found, <code class="language-plaintext highlighter-rouge">npx</code> will install it into a central cache</p>
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>npx cowsay <span class="s2">"Hello"</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>Now, this is a funny useless command. Other scenarios include:</p>
  </li>
  <li>running the vue CLI tool to create new applications and run them: npx @vue/cli create my-vue-app</li>
  <li>creating a new React app using create-react-app: npx create-react-app my-react-app
    <h3 id="run-some-code-using-a-different-nodejs-version">Run some code using a different Node.js version</h3>
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>npx node@10 <span class="nt">-v</span> <span class="c">#v10.18.1</span>
npx node@12 <span class="nt">-v</span> <span class="c">#v12.14.1</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <h3 id="run-arbitrary-code-snippets-directly-from-a-url">Run arbitrary code snippets directly from a URL</h3>
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>npx https://gist.github.com/zkat/4bc19503fe9e9309e2bfaa2c58074d32
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <h2 id="understanding-processnexttick">Understanding process.nextTick()</h2>
    <p>Every time the event loop takes a full trip, we call it a tick.</p>
    <pre><code class="language-JS">process.nextTick(() =&gt; {
// do something
});
</code></pre>
    <p>The event loop is busy to run the current code. When this operation ends, the JS engine runs all the functions passed to <code class="language-plaintext highlighter-rouge">nextTick</code> calls during that operation.
It the way we can tell the JS engine to process a function asynchronously, but as soon as possible, not queue it.
Calling <code class="language-plaintext highlighter-rouge">setTimeout(() =&gt; {}, 0)</code> will execute the function at the end of <code class="language-plaintext highlighter-rouge">next tick</code>, much later than when using <code class="language-plaintext highlighter-rouge">nextTick()</code> which <strong>prioritizes</strong> the call and executes it just before the beginning of <strong>the next tick</strong>.</p>
  </li>
</ul>

<p>Use nextTick() when you want to make sure that in <strong>the next event loop</strong> iteration that code is already executed.</p>
<h2 id="understanding-setimmediate">Understanding setImmediate()</h2>
<p>Any function passed as the setImmediate() argument is a callback that’s executed in the next iteration of the event loop.
How is setImmediate() different from setTimeout(() =&gt; {}, 0) (passing a 0ms timeout), and from process.nextTick() and Promise.then()?
A function passed to process.nextTick() is going to be executed on the current iteration of the event loop, after the current operation ends. This means it will always execute before setTimeout and setImmediate.
A <code class="language-plaintext highlighter-rouge">setTimeout()</code> callback with a 0ms delay is very similar to <code class="language-plaintext highlighter-rouge">setImmediate</code>. The execution order will depend on various factors, but they will be both run in the next iteration of the event loop.
A <code class="language-plaintext highlighter-rouge">process.nextTick</code> callback is added to <code class="language-plaintext highlighter-rouge">process.nextTick queue</code>. A <code class="language-plaintext highlighter-rouge">Promise.then()</code> callback is added to <code class="language-plaintext highlighter-rouge">promise.microtask queue</code>. A <code class="language-plaintext highlighter-rouge">setTimeou</code>, <code class="language-plaintext highlighter-rouge">setImmediate</code> callback is added to <code class="language-plaintext highlighter-rouge">macrotask queue</code></p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">baz</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">baz</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">foo</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">foo</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">zoo</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">zoo</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">start</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">start</span><span class="dl">'</span><span class="p">);</span>
  <span class="nf">setImmediate</span><span class="p">(</span><span class="nx">baz</span><span class="p">);</span>
  <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">resolve</span><span class="p">(</span><span class="dl">'</span><span class="s1">bar</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}).</span><span class="nf">then</span><span class="p">((</span><span class="nx">resolve</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">resolve</span><span class="p">);</span>
    <span class="nx">process</span><span class="p">.</span><span class="nf">nextTick</span><span class="p">(</span><span class="nx">zoo</span><span class="p">);</span>
  <span class="p">});</span>
  <span class="nx">process</span><span class="p">.</span><span class="nf">nextTick</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span>
<span class="p">};</span>
<span class="nf">start</span><span class="p">();</span>
<span class="c1">// start foo bar zoo baz</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>This code will first call start(), then call foo() in process.nextTick queue. After that, it will handle promises microtask queue, which prints bar and adds zoo() in process.nextTick queue at the same time. Then it will call zoo() which has just been added. In the end, the baz() in macrotask queue is called.</p>
<h2 id="the-nodejs-event-emitter">The Node.js Event emitter</h2>
<p>On the backend side, Node.js offers us the option to build a similar system using <code class="language-plaintext highlighter-rouge">event</code> module.
This module, inparticular, offers the <code class="language-plaintext highlighter-rouge">EventEmitter</code> class, which we’ll use to handle our events.
You initializa that using</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">EventEmitter</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">events</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">eventEmitter</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">EventEmitter</span><span class="p">();</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>This object exposes, among many others, the <code class="language-plaintext highlighter-rouge">on</code> and <code class="language-plaintext highlighter-rouge">emit</code> methods.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">emit</code> is used to trigger an event</li>
  <li><code class="language-plaintext highlighter-rouge">on</code> is used to add a callback function that’s going to be executed when the event is triggered.
For example, let’s create a <code class="language-plaintext highlighter-rouge">start</code> event, and as a matter of providing a sample, we react to that by just logging to the console:
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nx">eventEmitter</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">start</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">started</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>When we run</p>
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">eventEmitter</span><span class="p">.</span><span class="nf">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">start</span><span class="dl">'</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>You can pass argument to the event handler by passing them as additional argument to <code class="language-plaintext highlighter-rouge">emit</code>
```js
eventEmitter.on(‘start’, (start, end) =&gt; {
console.log(<code class="language-plaintext highlighter-rouge">started from ${start} to ${end}</code>);
});</p>
  </li>
</ul>

<p>eventEmitter.emit(‘start’, 1, 100);</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre>The EventEmitter object also exposes several other methods to interact with events, like

- once(): add a one-time listener
- removeListener() / off(): remove an event listener from an event
- removeAllListeners(): remove all listeners for an event.

References [docs](https://nodejs.org/api/events.html)
## REST API Development with Node.js, Express, and MongoDB
Tutorial basic to help create a rest api framework with node.js by express and mongodb using JavaScript ES2015. References to [github project](https://github.com/maitraysuthar/rest-api-nodejs-mongodb)
### Software Requirements
- Node.js 8+
- MongoDB 3.6+ (Recommended 4+)
### How to install
- b1
```sh
git clone https://github.com/maitraysuthar/rest-api-nodejs-mongodb.git
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>b2
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nb">cd </span>rest-api-nodejs-mongodb
npm <span class="nb">install</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>b3 Setting up environments
    <ol>
      <li>You will find a file named .env.example on root directory of project.</li>
      <li>Create a new file by copying and pasting the file and then renaming it to just .env
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">cp</span> .env.example .env
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
      <li>The file .env is already ignored, so you never commit your credentials.</li>
      <li>Change the values of the file to your environment. Helpful comments added to .env.example file to understand the constants.
        <h4 id="project-structure">Project structure</h4>
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="nb">.</span>
├── app.js
├── package.json
├── bin
│   └── www
├── controllers
│   ├── AuthController.js
│   └── BookController.js
├── models
│   ├── BookModel.js
│   └── UserModel.js
├── routes
│   ├── api.js
│   ├── auth.js
│   └── book.js
├── middlewares
│   ├── jwt.js
├── helpers
│   ├── apiResponse.js
│   ├── constants.js
│   ├── mailer.js
│   └── utility.js
├── <span class="nb">test</span>
│   ├── testConfig.js
│   ├── auth.js
│   └── book.js
└── public
  ├── index.html
  └── stylesheets
   └── style.css
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
    </ol>
  </li>
  <li>b5: Running API server locally
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>npm run dev
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <h4 id="integration">Integration</h4>
  </li>
  <li>Write new model: If you need to add more models to the project just create a new file in <code class="language-plaintext highlighter-rouge">/models/</code> and use them in the controllers.</li>
  <li>Creating new routes: If you need to add more routes to the project just create a new file in <code class="language-plaintext highlighter-rouge">/routes/</code> and add it in <code class="language-plaintext highlighter-rouge">/routes/api.js</code> it will be loaded dynamically.</li>
  <li>Creating new controllers: If you need to add more controllers to the project just create a new file in <code class="language-plaintext highlighter-rouge">/controllers/</code> and use them in the routes.
    <h4 id="running-test-cases">Running Test Cases</h4>
    <p>Running Eslint</p>
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>npm run lint
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <h3 id="prequise">Prequise</h3>
  </li>
  <li>npm</li>
  <li>Express JS</li>
  <li>Mongo DB</li>
  <li>Rest API integrate Authentication and CRUD
package.json example package manage installed
    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="rouge-code"><pre><span class="p">{</span><span class="w">
</span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"rest-api-nodejs-mongodb"</span><span class="p">,</span><span class="w">
</span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0.0"</span><span class="p">,</span><span class="w">
</span><span class="nl">"private"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
</span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"node ./bin/www"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"dev"</span><span class="p">:</span><span class="w"> </span><span class="s2">"nodemon ./bin/www"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"nyc _mocha --timeout 10000 --exit --report lcovonly -- -R spec"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"lint"</span><span class="p">:</span><span class="w"> </span><span class="s2">"eslint --fix --config .eslintrc.json </span><span class="se">\"</span><span class="s2">**/*.js</span><span class="se">\"</span><span class="s2">"</span><span class="w">
</span><span class="p">},</span><span class="w">
</span><span class="nl">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"bcrypt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^3.0.6"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"codacy-coverage"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^3.4.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"cookie-parser"</span><span class="p">:</span><span class="w"> </span><span class="s2">"~1.4.3"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"cors"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^2.8.5"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"debug"</span><span class="p">:</span><span class="w"> </span><span class="s2">"~2.6.9"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"dotenv"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^8.2.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"express"</span><span class="p">:</span><span class="w"> </span><span class="s2">"~4.16.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"express-jwt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^5.3.1"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"express-validator"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^6.2.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"jsonwebtoken"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^8.5.1"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"mocha-lcov-reporter"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^1.3.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"moment"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^2.24.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"mongoose"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^5.7.6"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"morgan"</span><span class="p">:</span><span class="w"> </span><span class="s2">"~1.9.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"nodemailer"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^6.3.1"</span><span class="w">
</span><span class="p">},</span><span class="w">
</span><span class="nl">"devDependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"chai"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.2.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"chai-http"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.3.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"eslint"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^6.5.1"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"mocha"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^6.2.2"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"nodemon"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^1.19.4"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"nyc"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^14.1.1"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div>    </div>
    <h3 id="authentication">Authentication</h3>
    <p>NodeJs package <code class="language-plaintext highlighter-rouge">express</code> is popular package help to create server.</p>
    <h4 id="jwt">JWT</h4>
    <p>```js
const jwt = require(“express-jwt”);
const secret = process.env.JWT_SECRET;</p>
  </li>
</ul>

<p>const authenticate = jwt({
    secret: secret
});</p>

<p>module.exports = authenticate;</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>The mechanism of authentication when user register or login into server that user will receive a token was generated by server in response to user. To generate token by JWT, nodejs provide a package `express-jwt`.
Both `JWT_SECRET` and `JWT_TIMEOUT_DURATION` variable is configure in `.env` file.
</pre></td></tr></tbody></table></code></pre></div></div>
<p>MONGODB_URL=mongodb://127.0.0.1:27017/rest-api-nodejs-mongodb</p>
<h1 id="example-connection-string-">Example Connection String:-</h1>
<h1 id="mongodb12700127017rest-api-nodejs-mongodb">mongodb://127.0.0.1:27017/rest-api-nodejs-mongodb</h1>
<h1 id="mongodbmongodbhostportdatabasename">mongodb://[MongodbHost]:[PORT]/[DatabaseName]</h1>

<p>JWT_SECRET=abcdefghijklmnopqrstuvwxyz1234567890</p>
<h1 id="example-secret---abcdefghijklmnopqrstuvwxyz1234567890">Example Secret:-  abcdefghijklmnopqrstuvwxyz1234567890</h1>

<p>JWT_TIMEOUT_DURATION=”2 hours”</p>
<h1 id="you-can-place-duration-available-here-httpsgithubcomauth0node-jsonwebtokenusage">You can place duration available here: https://github.com/auth0/node-jsonwebtoken#usage</h1>
<h1 id="search-for-expiresin-option-on-above-link">Search for “expiresIn” option on above link.</h1>

<p>EMAIL_SMTP_HOST=YourSMTPHost
EMAIL_SMTP_PORT=YourSMTPPort
EMAIL_SMTP_USERNAME=YourSMTPUsername
EMAIL_SMTP_PASSWORD=YourSMTPPassword</p>
<h1 id="true-for-465-false-for-other-ports">true for 465, false for other ports</h1>
<p>EMAIL_SMTP_SECURE=false</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre>#### Router
create file `auth.js` inside `routes` folder with content:
```js
var express = require("express");
const AuthController = require("../controllers/AuthController");

var router = express.Router();

router.post("/register", AuthController.register);
router.post("/login", AuthController.login);
router.post("/verify-otp", AuthController.verifyConfirm);
router.post("/resend-verify-otp", AuthController.resendConfirmOtp);

module.exports = router;
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>Import <code class="language-plaintext highlighter-rouge">express</code> module and controller <code class="language-plaintext highlighter-rouge">AuthController</code>
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">AuthController</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../controllers/AuthController</span><span class="dl">"</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>Router apis: <code class="language-plaintext highlighter-rouge">register</code>, <code class="language-plaintext highlighter-rouge">login</code>, <code class="language-plaintext highlighter-rouge">verify-otp</code>, ‘resend-verify-otp’. Such apis was require package <code class="language-plaintext highlighter-rouge">nodemailer</code> and variable configure in <code class="language-plaintext highlighter-rouge">.env</code>.</li>
</ul>

<p><strong>index serve</strong></p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nc">Router</span><span class="p">();</span>

<span class="cm">/* GET home page. */</span>
<span class="nx">router</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span><span class="dl">"</span><span class="s2">index</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Express</span><span class="dl">"</span> <span class="p">});</span>
<span class="p">});</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>api router</strong></p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">authRouter</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">./auth</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">bookRouter</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">./book</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nf">express</span><span class="p">();</span>

<span class="nx">app</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="dl">"</span><span class="s2">/auth/</span><span class="dl">"</span><span class="p">,</span> <span class="nx">authRouter</span><span class="p">);</span>
<span class="nx">app</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="dl">"</span><span class="s2">/book/</span><span class="dl">"</span><span class="p">,</span> <span class="nx">bookRouter</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">app</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><strong>book router</strong></p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">BookController</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../controllers/BookController</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nc">Router</span><span class="p">();</span>

<span class="nx">router</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="nx">BookController</span><span class="p">.</span><span class="nx">bookList</span><span class="p">);</span>
<span class="nx">router</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/:id</span><span class="dl">"</span><span class="p">,</span> <span class="nx">BookController</span><span class="p">.</span><span class="nx">bookDetail</span><span class="p">);</span>
<span class="nx">router</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="nx">BookController</span><span class="p">.</span><span class="nx">bookStore</span><span class="p">);</span>
<span class="nx">router</span><span class="p">.</span><span class="nf">put</span><span class="p">(</span><span class="dl">"</span><span class="s2">/:id</span><span class="dl">"</span><span class="p">,</span> <span class="nx">BookController</span><span class="p">.</span><span class="nx">bookUpdate</span><span class="p">);</span>
<span class="nx">router</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="dl">"</span><span class="s2">/:id</span><span class="dl">"</span><span class="p">,</span> <span class="nx">BookController</span><span class="p">.</span><span class="nx">bookDelete</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="authcontroller">AuthController</h4>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">UserModel</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../models/UserModel</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">body</span><span class="p">,</span><span class="nx">validationResult</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express-validator</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">sanitizeBody</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express-validator</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">//helper file to prepare responses.</span>
<span class="kd">const</span> <span class="nx">apiResponse</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../helpers/apiResponse</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">utility</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../helpers/utility</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">bcrypt</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">bcrypt</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">jwt</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">jsonwebtoken</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">mailer</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../helpers/mailer</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">constants</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../helpers/constants</span><span class="dl">"</span><span class="p">);</span>

<span class="cm">/**
 * User registration.
 *
 * @param {string}      firstName
 * @param {string}      lastName
 * @param {string}      email
 * @param {string}      password
 *
 * @returns {Object}
 */</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">register</span> <span class="o">=</span> <span class="p">[</span>
    <span class="c1">// Validate fields.</span>
    <span class="nf">body</span><span class="p">(</span><span class="dl">"</span><span class="s2">firstName</span><span class="dl">"</span><span class="p">).</span><span class="nf">isLength</span><span class="p">({</span> <span class="na">min</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}).</span><span class="nf">trim</span><span class="p">().</span><span class="nf">withMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">First name must be specified.</span><span class="dl">"</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">isAlphanumeric</span><span class="p">().</span><span class="nf">withMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">First name has non-alphanumeric characters.</span><span class="dl">"</span><span class="p">),</span>
    <span class="nf">body</span><span class="p">(</span><span class="dl">"</span><span class="s2">lastName</span><span class="dl">"</span><span class="p">).</span><span class="nf">isLength</span><span class="p">({</span> <span class="na">min</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}).</span><span class="nf">trim</span><span class="p">().</span><span class="nf">withMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">Last name must be specified.</span><span class="dl">"</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">isAlphanumeric</span><span class="p">().</span><span class="nf">withMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">Last name has non-alphanumeric characters.</span><span class="dl">"</span><span class="p">),</span>
    <span class="nf">body</span><span class="p">(</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span><span class="p">).</span><span class="nf">isLength</span><span class="p">({</span> <span class="na">min</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}).</span><span class="nf">trim</span><span class="p">().</span><span class="nf">withMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">Email must be specified.</span><span class="dl">"</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">isEmail</span><span class="p">().</span><span class="nf">withMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">Email must be a valid email address.</span><span class="dl">"</span><span class="p">).</span><span class="nf">custom</span><span class="p">((</span><span class="nx">value</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">UserModel</span><span class="p">.</span><span class="nf">findOne</span><span class="p">({</span><span class="na">email</span> <span class="p">:</span> <span class="nx">value</span><span class="p">}).</span><span class="nf">then</span><span class="p">((</span><span class="nx">user</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">if </span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nf">reject</span><span class="p">(</span><span class="dl">"</span><span class="s2">E-mail already in use</span><span class="dl">"</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">});</span>
        <span class="p">}),</span>
    <span class="nf">body</span><span class="p">(</span><span class="dl">"</span><span class="s2">password</span><span class="dl">"</span><span class="p">).</span><span class="nf">isLength</span><span class="p">({</span> <span class="na">min</span><span class="p">:</span> <span class="mi">6</span> <span class="p">}).</span><span class="nf">trim</span><span class="p">().</span><span class="nf">withMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">Password must be 6 characters or greater.</span><span class="dl">"</span><span class="p">),</span>
    <span class="c1">// Sanitize fields.</span>
    <span class="nf">sanitizeBody</span><span class="p">(</span><span class="dl">"</span><span class="s2">firstName</span><span class="dl">"</span><span class="p">).</span><span class="nf">escape</span><span class="p">(),</span>
    <span class="nf">sanitizeBody</span><span class="p">(</span><span class="dl">"</span><span class="s2">lastName</span><span class="dl">"</span><span class="p">).</span><span class="nf">escape</span><span class="p">(),</span>
    <span class="nf">sanitizeBody</span><span class="p">(</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span><span class="p">).</span><span class="nf">escape</span><span class="p">(),</span>
    <span class="nf">sanitizeBody</span><span class="p">(</span><span class="dl">"</span><span class="s2">password</span><span class="dl">"</span><span class="p">).</span><span class="nf">escape</span><span class="p">(),</span>
    <span class="c1">// Process request after validation and sanitization.</span>
    <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="c1">// Extract the validation errors from a request.</span>
            <span class="kd">const</span> <span class="nx">errors</span> <span class="o">=</span> <span class="nf">validationResult</span><span class="p">(</span><span class="nx">req</span><span class="p">);</span>
            <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">errors</span><span class="p">.</span><span class="nf">isEmpty</span><span class="p">())</span> <span class="p">{</span>
                <span class="c1">// Display sanitized values/errors messages.</span>
                <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">validationErrorWithData</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Validation Error.</span><span class="dl">"</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">array</span><span class="p">());</span>
            <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
                <span class="c1">//hash input password</span>
                <span class="nx">bcrypt</span><span class="p">.</span><span class="nf">hash</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">password</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">hash</span><span class="p">)</span> <span class="p">{</span>
                    <span class="c1">// generate OTP for confirmation</span>
                    <span class="kd">let</span> <span class="nx">otp</span> <span class="o">=</span> <span class="nx">utility</span><span class="p">.</span><span class="nf">randomNumber</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
                    <span class="c1">// Create User object with escaped and trimmed data</span>
                    <span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UserModel</span><span class="p">(</span>
                        <span class="p">{</span>
                            <span class="na">firstName</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span>
                            <span class="na">lastName</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">lastName</span><span class="p">,</span>
                            <span class="na">email</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span>
                            <span class="na">password</span><span class="p">:</span> <span class="nx">hash</span><span class="p">,</span>
                            <span class="na">confirmOTP</span><span class="p">:</span> <span class="nx">otp</span>
                        <span class="p">}</span>
                    <span class="p">);</span>
                    <span class="c1">// Html email body</span>
                    <span class="kd">let</span> <span class="nx">html</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">&lt;p&gt;Please Confirm your Account.&lt;/p&gt;&lt;p&gt;OTP: </span><span class="dl">"</span><span class="o">+</span><span class="nx">otp</span><span class="o">+</span><span class="dl">"</span><span class="s2">&lt;/p&gt;</span><span class="dl">"</span><span class="p">;</span>
                    <span class="c1">// Send confirmation email</span>
                    <span class="nx">mailer</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span>
                        <span class="nx">constants</span><span class="p">.</span><span class="nx">confirmEmails</span><span class="p">.</span><span class="k">from</span><span class="p">,</span>
                        <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span>
                        <span class="dl">"</span><span class="s2">Confirm Account</span><span class="dl">"</span><span class="p">,</span>
                        <span class="nx">html</span>
                    <span class="p">).</span><span class="nf">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
                        <span class="c1">// Save user.</span>
                        <span class="nx">user</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="nf">function </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
                            <span class="k">if </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span> <span class="p">}</span>
                            <span class="kd">let</span> <span class="nx">userData</span> <span class="o">=</span> <span class="p">{</span>
                                <span class="na">_id</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">_id</span><span class="p">,</span>
                                <span class="na">firstName</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span>
                                <span class="na">lastName</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">lastName</span><span class="p">,</span>
                                <span class="na">email</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">email</span>
                            <span class="p">};</span>
                            <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">successResponseWithData</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span><span class="dl">"</span><span class="s2">Registration Success.</span><span class="dl">"</span><span class="p">,</span> <span class="nx">userData</span><span class="p">);</span>
                        <span class="p">});</span>
                    <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
                        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
                        <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span><span class="nx">err</span><span class="p">);</span>
                    <span class="p">})</span> <span class="p">;</span>
                <span class="p">});</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//throw error in json response with status 500.</span>
            <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}];</span>

<span class="cm">/**
 * User login.
 *
 * @param {string}      email
 * @param {string}      password
 *
 * @returns {Object}
 */</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">login</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nf">body</span><span class="p">(</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span><span class="p">).</span><span class="nf">isLength</span><span class="p">({</span> <span class="na">min</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}).</span><span class="nf">trim</span><span class="p">().</span><span class="nf">withMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">Email must be specified.</span><span class="dl">"</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">isEmail</span><span class="p">().</span><span class="nf">withMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">Email must be a valid email address.</span><span class="dl">"</span><span class="p">),</span>
    <span class="nf">body</span><span class="p">(</span><span class="dl">"</span><span class="s2">password</span><span class="dl">"</span><span class="p">).</span><span class="nf">isLength</span><span class="p">({</span> <span class="na">min</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}).</span><span class="nf">trim</span><span class="p">().</span><span class="nf">withMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">Password must be specified.</span><span class="dl">"</span><span class="p">),</span>
    <span class="nf">sanitizeBody</span><span class="p">(</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span><span class="p">).</span><span class="nf">escape</span><span class="p">(),</span>
    <span class="nf">sanitizeBody</span><span class="p">(</span><span class="dl">"</span><span class="s2">password</span><span class="dl">"</span><span class="p">).</span><span class="nf">escape</span><span class="p">(),</span>
    <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">errors</span> <span class="o">=</span> <span class="nf">validationResult</span><span class="p">(</span><span class="nx">req</span><span class="p">);</span>
            <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">errors</span><span class="p">.</span><span class="nf">isEmpty</span><span class="p">())</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">validationErrorWithData</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Validation Error.</span><span class="dl">"</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">array</span><span class="p">());</span>
            <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
                <span class="nx">UserModel</span><span class="p">.</span><span class="nf">findOne</span><span class="p">({</span><span class="na">email</span> <span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">email</span><span class="p">}).</span><span class="nf">then</span><span class="p">(</span><span class="nx">user</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="k">if </span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
                        <span class="c1">//Compare given password with db's hash.</span>
                        <span class="nx">bcrypt</span><span class="p">.</span><span class="nf">compare</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">password</span><span class="p">,</span><span class="nx">user</span><span class="p">.</span><span class="nx">password</span><span class="p">,</span><span class="nf">function </span><span class="p">(</span><span class="nx">err</span><span class="p">,</span><span class="nx">same</span><span class="p">)</span> <span class="p">{</span>
                            <span class="k">if</span><span class="p">(</span><span class="nx">same</span><span class="p">){</span>
                                <span class="c1">//Check account confirmation.</span>
                                <span class="k">if</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">isConfirmed</span><span class="p">){</span>
                                    <span class="c1">// Check User's account active or not.</span>
                                    <span class="k">if</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
                                        <span class="kd">let</span> <span class="nx">userData</span> <span class="o">=</span> <span class="p">{</span>
                                            <span class="na">_id</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">_id</span><span class="p">,</span>
                                            <span class="na">firstName</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span>
                                            <span class="na">lastName</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">lastName</span><span class="p">,</span>
                                            <span class="na">email</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span>
                                        <span class="p">};</span>
                                        <span class="c1">//Prepare JWT token for authentication</span>
                                        <span class="kd">const</span> <span class="nx">jwtPayload</span> <span class="o">=</span> <span class="nx">userData</span><span class="p">;</span>
                                        <span class="kd">const</span> <span class="nx">jwtData</span> <span class="o">=</span> <span class="p">{</span>
                                            <span class="na">expiresIn</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">JWT_TIMEOUT_DURATION</span><span class="p">,</span>
                                        <span class="p">};</span>
                                        <span class="kd">const</span> <span class="nx">secret</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">JWT_SECRET</span><span class="p">;</span>
                                        <span class="c1">//Generated JWT token with Payload and secret.</span>
                                        <span class="nx">userData</span><span class="p">.</span><span class="nx">token</span> <span class="o">=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nf">sign</span><span class="p">(</span><span class="nx">jwtPayload</span><span class="p">,</span> <span class="nx">secret</span><span class="p">,</span> <span class="nx">jwtData</span><span class="p">);</span>
                                        <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">successResponseWithData</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span><span class="dl">"</span><span class="s2">Login Success.</span><span class="dl">"</span><span class="p">,</span> <span class="nx">userData</span><span class="p">);</span>
                                    <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
                                        <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">unauthorizedResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Account is not active. Please contact admin.</span><span class="dl">"</span><span class="p">);</span>
                                    <span class="p">}</span>
                                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                                    <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">unauthorizedResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Account is not confirmed. Please confirm your account.</span><span class="dl">"</span><span class="p">);</span>
                                <span class="p">}</span>
                            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                                <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">unauthorizedResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Email or Password wrong.</span><span class="dl">"</span><span class="p">);</span>
                            <span class="p">}</span>
                        <span class="p">});</span>
                    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                        <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">unauthorizedResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Email or Password wrong.</span><span class="dl">"</span><span class="p">);</span>
                    <span class="p">}</span>
                <span class="p">});</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}];</span>

<span class="cm">/**
 * Verify Confirm otp.
 *
 * @param {string}      email
 * @param {string}      otp
 *
 * @returns {Object}
 */</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">verifyConfirm</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nf">body</span><span class="p">(</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span><span class="p">).</span><span class="nf">isLength</span><span class="p">({</span> <span class="na">min</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}).</span><span class="nf">trim</span><span class="p">().</span><span class="nf">withMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">Email must be specified.</span><span class="dl">"</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">isEmail</span><span class="p">().</span><span class="nf">withMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">Email must be a valid email address.</span><span class="dl">"</span><span class="p">),</span>
    <span class="nf">body</span><span class="p">(</span><span class="dl">"</span><span class="s2">otp</span><span class="dl">"</span><span class="p">).</span><span class="nf">isLength</span><span class="p">({</span> <span class="na">min</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}).</span><span class="nf">trim</span><span class="p">().</span><span class="nf">withMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">OTP must be specified.</span><span class="dl">"</span><span class="p">),</span>
    <span class="nf">sanitizeBody</span><span class="p">(</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span><span class="p">).</span><span class="nf">escape</span><span class="p">(),</span>
    <span class="nf">sanitizeBody</span><span class="p">(</span><span class="dl">"</span><span class="s2">otp</span><span class="dl">"</span><span class="p">).</span><span class="nf">escape</span><span class="p">(),</span>
    <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">errors</span> <span class="o">=</span> <span class="nf">validationResult</span><span class="p">(</span><span class="nx">req</span><span class="p">);</span>
            <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">errors</span><span class="p">.</span><span class="nf">isEmpty</span><span class="p">())</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">validationErrorWithData</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Validation Error.</span><span class="dl">"</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">array</span><span class="p">());</span>
            <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
                <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="p">{</span><span class="na">email</span> <span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">email</span><span class="p">};</span>
                <span class="nx">UserModel</span><span class="p">.</span><span class="nf">findOne</span><span class="p">(</span><span class="nx">query</span><span class="p">).</span><span class="nf">then</span><span class="p">(</span><span class="nx">user</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="k">if </span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
                        <span class="c1">//Check already confirm or not.</span>
                        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">user</span><span class="p">.</span><span class="nx">isConfirmed</span><span class="p">){</span>
                            <span class="c1">//Check account confirmation.</span>
                            <span class="k">if</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">confirmOTP</span> <span class="o">==</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">otp</span><span class="p">){</span>
                                <span class="c1">//Update user as confirmed</span>
                                <span class="nx">UserModel</span><span class="p">.</span><span class="nf">findOneAndUpdate</span><span class="p">(</span><span class="nx">query</span><span class="p">,</span> <span class="p">{</span>
                                    <span class="na">isConfirmed</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
                                    <span class="na">confirmOTP</span><span class="p">:</span> <span class="kc">null</span>
                                <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
                                    <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
                                <span class="p">});</span>
                                <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">successResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span><span class="dl">"</span><span class="s2">Account confirmed success.</span><span class="dl">"</span><span class="p">);</span>
                            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                                <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">unauthorizedResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Otp does not match</span><span class="dl">"</span><span class="p">);</span>
                            <span class="p">}</span>
                        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                            <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">unauthorizedResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Account already confirmed.</span><span class="dl">"</span><span class="p">);</span>
                        <span class="p">}</span>
                    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                        <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">unauthorizedResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Specified email not found.</span><span class="dl">"</span><span class="p">);</span>
                    <span class="p">}</span>
                <span class="p">});</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}];</span>

<span class="cm">/**
 * Resend Confirm otp.
 *
 * @param {string}      email
 *
 * @returns {Object}
 */</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">resendConfirmOtp</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nf">body</span><span class="p">(</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span><span class="p">).</span><span class="nf">isLength</span><span class="p">({</span> <span class="na">min</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}).</span><span class="nf">trim</span><span class="p">().</span><span class="nf">withMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">Email must be specified.</span><span class="dl">"</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">isEmail</span><span class="p">().</span><span class="nf">withMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">Email must be a valid email address.</span><span class="dl">"</span><span class="p">),</span>
    <span class="nf">sanitizeBody</span><span class="p">(</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span><span class="p">).</span><span class="nf">escape</span><span class="p">(),</span>
    <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">errors</span> <span class="o">=</span> <span class="nf">validationResult</span><span class="p">(</span><span class="nx">req</span><span class="p">);</span>
            <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">errors</span><span class="p">.</span><span class="nf">isEmpty</span><span class="p">())</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">validationErrorWithData</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Validation Error.</span><span class="dl">"</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">array</span><span class="p">());</span>
            <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
                <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="p">{</span><span class="na">email</span> <span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">email</span><span class="p">};</span>
                <span class="nx">UserModel</span><span class="p">.</span><span class="nf">findOne</span><span class="p">(</span><span class="nx">query</span><span class="p">).</span><span class="nf">then</span><span class="p">(</span><span class="nx">user</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="k">if </span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
                        <span class="c1">//Check already confirm or not.</span>
                        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">user</span><span class="p">.</span><span class="nx">isConfirmed</span><span class="p">){</span>
                            <span class="c1">// Generate otp</span>
                            <span class="kd">let</span> <span class="nx">otp</span> <span class="o">=</span> <span class="nx">utility</span><span class="p">.</span><span class="nf">randomNumber</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
                            <span class="c1">// Html email body</span>
                            <span class="kd">let</span> <span class="nx">html</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">&lt;p&gt;Please Confirm your Account.&lt;/p&gt;&lt;p&gt;OTP: </span><span class="dl">"</span><span class="o">+</span><span class="nx">otp</span><span class="o">+</span><span class="dl">"</span><span class="s2">&lt;/p&gt;</span><span class="dl">"</span><span class="p">;</span>
                            <span class="c1">// Send confirmation email</span>
                            <span class="nx">mailer</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span>
                                <span class="nx">constants</span><span class="p">.</span><span class="nx">confirmEmails</span><span class="p">.</span><span class="k">from</span><span class="p">,</span>
                                <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span>
                                <span class="dl">"</span><span class="s2">Confirm Account</span><span class="dl">"</span><span class="p">,</span>
                                <span class="nx">html</span>
                            <span class="p">).</span><span class="nf">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
                                <span class="nx">user</span><span class="p">.</span><span class="nx">isConfirmed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                                <span class="nx">user</span><span class="p">.</span><span class="nx">confirmOTP</span> <span class="o">=</span> <span class="nx">otp</span><span class="p">;</span>
                                <span class="c1">// Save user.</span>
                                <span class="nx">user</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="nf">function </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
                                    <span class="k">if </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span> <span class="p">}</span>
                                    <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">successResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span><span class="dl">"</span><span class="s2">Confirm otp sent.</span><span class="dl">"</span><span class="p">);</span>
                                <span class="p">});</span>
                            <span class="p">});</span>
                        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                            <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">unauthorizedResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Account already confirmed.</span><span class="dl">"</span><span class="p">);</span>
                        <span class="p">}</span>
                    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                        <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">unauthorizedResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Specified email not found.</span><span class="dl">"</span><span class="p">);</span>
                    <span class="p">}</span>
                <span class="p">});</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}];</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>ExpressJs support MVC architechture, In controller have actions provide authen such as <code class="language-plaintext highlighter-rouge">register</code>, <code class="language-plaintext highlighter-rouge">login</code>, <code class="language-plaintext highlighter-rouge">confirmOTP</code>, <code class="language-plaintext highlighter-rouge">resendConfirm</code></li>
  <li>Model <code class="language-plaintext highlighter-rouge">UserModel</code> store and query data from mongoDB.
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">UserModel</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../models/UserModel</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">body</span><span class="p">,</span><span class="nx">validationResult</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express-validator</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">sanitizeBody</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express-validator</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">//helper file to prepare responses.</span>
<span class="kd">const</span> <span class="nx">apiResponse</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../helpers/apiResponse</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">utility</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../helpers/utility</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">bcrypt</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">bcrypt</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">jwt</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">jsonwebtoken</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">mailer</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../helpers/mailer</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">constants</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../helpers/constants</span><span class="dl">"</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>Validation package <code class="language-plaintext highlighter-rouge">express-validator</code> take the <code class="language-plaintext highlighter-rouge">body</code> and <code class="language-plaintext highlighter-rouge">validation</code> module
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre>  <span class="nf">body</span><span class="p">(</span><span class="dl">"</span><span class="s2">firstName</span><span class="dl">"</span><span class="p">).</span><span class="nf">isLength</span><span class="p">({</span> <span class="na">min</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}).</span><span class="nf">trim</span><span class="p">().</span><span class="nf">withMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">First name must be specified.</span><span class="dl">"</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">isAlphanumeric</span><span class="p">().</span><span class="nf">withMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">First name has non-alphanumeric characters.</span><span class="dl">"</span><span class="p">),</span>
  <span class="nf">body</span><span class="p">(</span><span class="dl">"</span><span class="s2">lastName</span><span class="dl">"</span><span class="p">).</span><span class="nf">isLength</span><span class="p">({</span> <span class="na">min</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}).</span><span class="nf">trim</span><span class="p">().</span><span class="nf">withMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">Last name must be specified.</span><span class="dl">"</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">isAlphanumeric</span><span class="p">().</span><span class="nf">withMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">Last name has non-alphanumeric characters.</span><span class="dl">"</span><span class="p">),</span>
  <span class="nf">body</span><span class="p">(</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span><span class="p">).</span><span class="nf">isLength</span><span class="p">({</span> <span class="na">min</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}).</span><span class="nf">trim</span><span class="p">().</span><span class="nf">withMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">Email must be specified.</span><span class="dl">"</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">isEmail</span><span class="p">().</span><span class="nf">withMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">Email must be a valid email address.</span><span class="dl">"</span><span class="p">).</span><span class="nf">custom</span><span class="p">((</span><span class="nx">value</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">UserModel</span><span class="p">.</span><span class="nf">findOne</span><span class="p">({</span><span class="na">email</span> <span class="p">:</span> <span class="nx">value</span><span class="p">}).</span><span class="nf">then</span><span class="p">((</span><span class="nx">user</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
              <span class="k">if </span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
                  <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nf">reject</span><span class="p">(</span><span class="dl">"</span><span class="s2">E-mail already in use</span><span class="dl">"</span><span class="p">);</span>
              <span class="p">}</span>
          <span class="p">});</span>
      <span class="p">}),</span>
  <span class="nf">body</span><span class="p">(</span><span class="dl">"</span><span class="s2">password</span><span class="dl">"</span><span class="p">).</span><span class="nf">isLength</span><span class="p">({</span> <span class="na">min</span><span class="p">:</span> <span class="mi">6</span> <span class="p">}).</span><span class="nf">trim</span><span class="p">().</span><span class="nf">withMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">Password must be 6 characters or greater.</span><span class="dl">"</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>Each line is element of array impement by <code class="language-plaintext highlighter-rouge">export</code> function. Express will run through each element and store variable in memory and same stack. The validation, The request parameter, The process element, so on.
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
</pre></td><td class="rouge-code"><pre><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">try</span> <span class="p">{</span>
          <span class="c1">// Extract the validation errors from a request.</span>
          <span class="kd">const</span> <span class="nx">errors</span> <span class="o">=</span> <span class="nf">validationResult</span><span class="p">(</span><span class="nx">req</span><span class="p">);</span>
          <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">errors</span><span class="p">.</span><span class="nf">isEmpty</span><span class="p">())</span> <span class="p">{</span>
              <span class="c1">// Display sanitized values/errors messages.</span>
              <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">validationErrorWithData</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Validation Error.</span><span class="dl">"</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">array</span><span class="p">());</span>
          <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
              <span class="c1">//hash input password</span>
              <span class="nx">bcrypt</span><span class="p">.</span><span class="nf">hash</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">password</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">hash</span><span class="p">)</span> <span class="p">{</span>
                  <span class="c1">// generate OTP for confirmation</span>
                  <span class="kd">let</span> <span class="nx">otp</span> <span class="o">=</span> <span class="nx">utility</span><span class="p">.</span><span class="nf">randomNumber</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
                  <span class="c1">// Create User object with escaped and trimmed data</span>
                  <span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UserModel</span><span class="p">(</span>
                      <span class="p">{</span>
                          <span class="na">firstName</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span>
                          <span class="na">lastName</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">lastName</span><span class="p">,</span>
                          <span class="na">email</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span>
                          <span class="na">password</span><span class="p">:</span> <span class="nx">hash</span><span class="p">,</span>
                          <span class="na">confirmOTP</span><span class="p">:</span> <span class="nx">otp</span>
                      <span class="p">}</span>
                  <span class="p">);</span>
                  <span class="c1">// Html email body</span>
                  <span class="kd">let</span> <span class="nx">html</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">&lt;p&gt;Please Confirm your Account.&lt;/p&gt;&lt;p&gt;OTP: </span><span class="dl">"</span><span class="o">+</span><span class="nx">otp</span><span class="o">+</span><span class="dl">"</span><span class="s2">&lt;/p&gt;</span><span class="dl">"</span><span class="p">;</span>
                  <span class="c1">// Send confirmation email</span>
                  <span class="nx">mailer</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span>
                      <span class="nx">constants</span><span class="p">.</span><span class="nx">confirmEmails</span><span class="p">.</span><span class="k">from</span><span class="p">,</span>
                      <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span>
                      <span class="dl">"</span><span class="s2">Confirm Account</span><span class="dl">"</span><span class="p">,</span>
                      <span class="nx">html</span>
                  <span class="p">).</span><span class="nf">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
                      <span class="c1">// Save user.</span>
                      <span class="nx">user</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="nf">function </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
                          <span class="k">if </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span> <span class="p">}</span>
                          <span class="kd">let</span> <span class="nx">userData</span> <span class="o">=</span> <span class="p">{</span>
                              <span class="na">_id</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">_id</span><span class="p">,</span>
                              <span class="na">firstName</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span>
                              <span class="na">lastName</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">lastName</span><span class="p">,</span>
                              <span class="na">email</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">email</span>
                          <span class="p">};</span>
                          <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">successResponseWithData</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span><span class="dl">"</span><span class="s2">Registration Success.</span><span class="dl">"</span><span class="p">,</span> <span class="nx">userData</span><span class="p">);</span>
                      <span class="p">});</span>
                  <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
                      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
                      <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span><span class="nx">err</span><span class="p">);</span>
                  <span class="p">})</span> <span class="p">;</span>
              <span class="p">});</span>
          <span class="p">}</span>
      <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
          <span class="c1">//throw error in json response with status 500.</span>
          <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
      <span class="p">}</span>
  <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>code inside is same with JS code. After validation, the action <code class="language-plaintext highlighter-rouge">register</code> move to process logic register with user attribute save to DB. A mail send to user when sucessful saved. Try catch for unexpected errors:</li>
  <li><code class="language-plaintext highlighter-rouge">bcrypt</code> module for hash password and this is a function js in ECMASCRIPT 2015
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="nx">bcrypt</span><span class="p">.</span><span class="nf">hash</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">password</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">hash</span><span class="p">)</span> <span class="p">{</span> <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span><span class="nx">err</span><span class="p">);</span>
<span class="p">})</span> <span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">(req, res)</code> is object request and response and parameters of function <code class="language-plaintext highlighter-rouge">register</code>. Response send to user
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="c1">// sucess</span>
<span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">successResponseWithData</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span><span class="dl">"</span><span class="s2">Registration Success.</span><span class="dl">"</span><span class="p">,</span> <span class="nx">userData</span><span class="p">);</span>
<span class="c1">// error</span>
<span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span><span class="nx">err</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>About the api resonpose structure in json format and js code, used <code class="language-plaintext highlighter-rouge">jsonwebtoken</code> and <code class="language-plaintext highlighter-rouge">express-jwt</code> module for generate token and authentication user request.
```js
exports.successResponse = function (res, msg) {
  var data = {
      status: 1,
      message: msg
  };
  return res.status(200).json(data);
};</li>
</ul>

<p>exports.successResponseWithData = function (res, msg, data) {
    var resData = {
        status: 1,
        message: msg,
        data: data
    };
    return res.status(200).json(resData);
};</p>

<p>exports.ErrorResponse = function (res, msg) {
    var data = {
        status: 0,
        message: msg,
    };
    return res.status(500).json(data);
};</p>

<p>exports.notFoundResponse = function (res, msg) {
    var data = {
        status: 0,
        message: msg,
    };
    return res.status(404).json(data);
};</p>

<p>exports.validationErrorWithData = function (res, msg, data) {
    var resData = {
        status: 0,
        message: msg,
        data: data
    };
    return res.status(400).json(resData);
};</p>

<p>exports.unauthorizedResponse = function (res, msg) {
    var data = {
        status: 0,
        message: msg,
    };
    return res.status(401).json(data);
};</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre>- Register function is trigger a procedure send email to user register with otp in a email, after email register and confirm otp send a user register save to db and api response register api send to user
```js
mailer.send(
                        constants.confirmEmails.from,
                        req.body.email,
                        "Confirm Account",
                        html
                    ).then(function(){
                        // Save user.
                        user.save(function (err) {
                            if (err) { return apiResponse.ErrorResponse(res, err); }
                            let userData = {
                                _id: user._id,
                                firstName: user.firstName,
                                lastName: user.lastName,
                                email: user.email
                            };
                            return apiResponse.successResponseWithData(res,"Registration Success.", userData);
                        });
                    }).catch(err =&gt; {
                        console.log(err);
                        return apiResponse.ErrorResponse(res,err);
                    }) ;
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="login-method">Login method</h4>
<p>Js code</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
</pre></td><td class="rouge-code"><pre><span class="nx">exports</span><span class="p">.</span><span class="nx">login</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nf">body</span><span class="p">(</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span><span class="p">).</span><span class="nf">isLength</span><span class="p">({</span> <span class="na">min</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}).</span><span class="nf">trim</span><span class="p">().</span><span class="nf">withMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">Email must be specified.</span><span class="dl">"</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">isEmail</span><span class="p">().</span><span class="nf">withMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">Email must be a valid email address.</span><span class="dl">"</span><span class="p">),</span>
    <span class="nf">body</span><span class="p">(</span><span class="dl">"</span><span class="s2">password</span><span class="dl">"</span><span class="p">).</span><span class="nf">isLength</span><span class="p">({</span> <span class="na">min</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}).</span><span class="nf">trim</span><span class="p">().</span><span class="nf">withMessage</span><span class="p">(</span><span class="dl">"</span><span class="s2">Password must be specified.</span><span class="dl">"</span><span class="p">),</span>
    <span class="nf">sanitizeBody</span><span class="p">(</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span><span class="p">).</span><span class="nf">escape</span><span class="p">(),</span>
    <span class="nf">sanitizeBody</span><span class="p">(</span><span class="dl">"</span><span class="s2">password</span><span class="dl">"</span><span class="p">).</span><span class="nf">escape</span><span class="p">(),</span>
    <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">errors</span> <span class="o">=</span> <span class="nf">validationResult</span><span class="p">(</span><span class="nx">req</span><span class="p">);</span>
            <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">errors</span><span class="p">.</span><span class="nf">isEmpty</span><span class="p">())</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">validationErrorWithData</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Validation Error.</span><span class="dl">"</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">array</span><span class="p">());</span>
            <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
                <span class="nx">UserModel</span><span class="p">.</span><span class="nf">findOne</span><span class="p">({</span><span class="na">email</span> <span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">email</span><span class="p">}).</span><span class="nf">then</span><span class="p">(</span><span class="nx">user</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="k">if </span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
                        <span class="c1">//Compare given password with db's hash.</span>
                        <span class="nx">bcrypt</span><span class="p">.</span><span class="nf">compare</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">password</span><span class="p">,</span><span class="nx">user</span><span class="p">.</span><span class="nx">password</span><span class="p">,</span><span class="nf">function </span><span class="p">(</span><span class="nx">err</span><span class="p">,</span><span class="nx">same</span><span class="p">)</span> <span class="p">{</span>
                            <span class="k">if</span><span class="p">(</span><span class="nx">same</span><span class="p">){</span>
                                <span class="c1">//Check account confirmation.</span>
                                <span class="k">if</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">isConfirmed</span><span class="p">){</span>
                                    <span class="c1">// Check User's account active or not.</span>
                                    <span class="k">if</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
                                        <span class="kd">let</span> <span class="nx">userData</span> <span class="o">=</span> <span class="p">{</span>
                                            <span class="na">_id</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">_id</span><span class="p">,</span>
                                            <span class="na">firstName</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span>
                                            <span class="na">lastName</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">lastName</span><span class="p">,</span>
                                            <span class="na">email</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span>
                                        <span class="p">};</span>
                                        <span class="c1">//Prepare JWT token for authentication</span>
                                        <span class="kd">const</span> <span class="nx">jwtPayload</span> <span class="o">=</span> <span class="nx">userData</span><span class="p">;</span>
                                        <span class="kd">const</span> <span class="nx">jwtData</span> <span class="o">=</span> <span class="p">{</span>
                                            <span class="na">expiresIn</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">JWT_TIMEOUT_DURATION</span><span class="p">,</span>
                                        <span class="p">};</span>
                                        <span class="kd">const</span> <span class="nx">secret</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">JWT_SECRET</span><span class="p">;</span>
                                        <span class="c1">//Generated JWT token with Payload and secret.</span>
                                        <span class="nx">userData</span><span class="p">.</span><span class="nx">token</span> <span class="o">=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nf">sign</span><span class="p">(</span><span class="nx">jwtPayload</span><span class="p">,</span> <span class="nx">secret</span><span class="p">,</span> <span class="nx">jwtData</span><span class="p">);</span>
                                        <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">successResponseWithData</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span><span class="dl">"</span><span class="s2">Login Success.</span><span class="dl">"</span><span class="p">,</span> <span class="nx">userData</span><span class="p">);</span>
                                    <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
                                        <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">unauthorizedResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Account is not active. Please contact admin.</span><span class="dl">"</span><span class="p">);</span>
                                    <span class="p">}</span>
                                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                                    <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">unauthorizedResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Account is not confirmed. Please confirm your account.</span><span class="dl">"</span><span class="p">);</span>
                                <span class="p">}</span>
                            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                                <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">unauthorizedResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Email or Password wrong.</span><span class="dl">"</span><span class="p">);</span>
                            <span class="p">}</span>
                        <span class="p">});</span>
                    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                        <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">unauthorizedResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Email or Password wrong.</span><span class="dl">"</span><span class="p">);</span>
                    <span class="p">}</span>
                <span class="p">});</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}];</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">bcrypt</code> module provide function compare password with <code class="language-plaintext highlighter-rouge">user.password</code>. Promise function search in DB and find user exist with email.
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nx">UserModel</span><span class="p">.</span><span class="nf">findOne</span><span class="p">({</span><span class="na">email</span> <span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">email</span><span class="p">}).</span><span class="nf">then</span><span class="p">(</span><span class="nx">user</span> <span class="o">=&gt;</span> <span class="p">{...});</span>
<span class="nx">bcrypt</span><span class="p">.</span><span class="nf">compare</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">password</span><span class="p">,</span><span class="nx">user</span><span class="p">.</span><span class="nx">password</span><span class="p">,</span><span class="nf">function </span><span class="p">(</span><span class="nx">err</span><span class="p">,</span><span class="nx">same</span><span class="p">)</span> <span class="p">{});</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>Check User status and send response with JWT token generate for user: <code class="language-plaintext highlighter-rouge">userData.token = jwt.sign(jwtPayload, secret, jwtData);</code> in expired time.
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre>  <span class="k">if</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">userData</span> <span class="o">=</span> <span class="p">{</span>
          <span class="na">_id</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">_id</span><span class="p">,</span>
          <span class="na">firstName</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span>
          <span class="na">lastName</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">lastName</span><span class="p">,</span>
          <span class="na">email</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span>
      <span class="p">};</span>
      <span class="c1">//Prepare JWT token for authentication</span>
      <span class="kd">const</span> <span class="nx">jwtPayload</span> <span class="o">=</span> <span class="nx">userData</span><span class="p">;</span>
      <span class="kd">const</span> <span class="nx">jwtData</span> <span class="o">=</span> <span class="p">{</span>
          <span class="na">expiresIn</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">JWT_TIMEOUT_DURATION</span><span class="p">,</span>
      <span class="p">};</span>
      <span class="kd">const</span> <span class="nx">secret</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">JWT_SECRET</span><span class="p">;</span>
      <span class="c1">//Generated JWT token with Payload and secret.</span>
      <span class="nx">userData</span><span class="p">.</span><span class="nx">token</span> <span class="o">=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nf">sign</span><span class="p">(</span><span class="nx">jwtPayload</span><span class="p">,</span> <span class="nx">secret</span><span class="p">,</span> <span class="nx">jwtData</span><span class="p">);</span>
      <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">successResponseWithData</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span><span class="dl">"</span><span class="s2">Login Success.</span><span class="dl">"</span><span class="p">,</span> <span class="nx">userData</span><span class="p">);</span>
  <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">unauthorizedResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Account is not active. Please contact admin.</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <h4 id="verify-otp">Verify OTP</h4>
    <p>verify otp from user with database.</p>
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="p">{</span><span class="na">email</span> <span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">email</span><span class="p">};</span>
<span class="nx">UserModel</span><span class="p">.</span><span class="nf">findOne</span><span class="p">(</span><span class="nx">query</span><span class="p">).</span><span class="nf">then</span><span class="p">(</span><span class="nx">user</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">//Check already confirm or not.</span>
      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">user</span><span class="p">.</span><span class="nx">isConfirmed</span><span class="p">){</span>
          <span class="c1">//Check account confirmation.</span>
          <span class="k">if</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">confirmOTP</span> <span class="o">==</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">otp</span><span class="p">){</span>
              <span class="c1">//Update user as confirmed</span>
              <span class="nx">UserModel</span><span class="p">.</span><span class="nf">findOneAndUpdate</span><span class="p">(</span><span class="nx">query</span><span class="p">,</span> <span class="p">{</span>
                  <span class="na">isConfirmed</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
                  <span class="na">confirmOTP</span><span class="p">:</span> <span class="kc">null</span>
              <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
                  <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
              <span class="p">});</span>
              <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">successResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span><span class="dl">"</span><span class="s2">Account confirmed success.</span><span class="dl">"</span><span class="p">);</span>
          <span class="p">}</span><span class="k">else</span><span class="p">{</span>
              <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">unauthorizedResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Otp does not match</span><span class="dl">"</span><span class="p">);</span>
          <span class="p">}</span>
      <span class="p">}</span><span class="k">else</span><span class="p">{</span>
          <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">unauthorizedResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Account already confirmed.</span><span class="dl">"</span><span class="p">);</span>
      <span class="p">}</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
      <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">unauthorizedResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Specified email not found.</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <h4 id="resend-otp">Resend OTP</h4>
    <p>query to get email searching email on db and resend otp to user request resend otp.</p>
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="rouge-code"><pre><span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="p">{</span><span class="na">email</span> <span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">email</span><span class="p">};</span>
<span class="nx">UserModel</span><span class="p">.</span><span class="nf">findOne</span><span class="p">(</span><span class="nx">query</span><span class="p">).</span><span class="nf">then</span><span class="p">(</span><span class="nx">user</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">//Check already confirm or not.</span>
      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">user</span><span class="p">.</span><span class="nx">isConfirmed</span><span class="p">){</span>
          <span class="c1">// Generate otp</span>
          <span class="kd">let</span> <span class="nx">otp</span> <span class="o">=</span> <span class="nx">utility</span><span class="p">.</span><span class="nf">randomNumber</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
          <span class="c1">// Html email body</span>
          <span class="kd">let</span> <span class="nx">html</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">&lt;p&gt;Please Confirm your Account.&lt;/p&gt;&lt;p&gt;OTP: </span><span class="dl">"</span><span class="o">+</span><span class="nx">otp</span><span class="o">+</span><span class="dl">"</span><span class="s2">&lt;/p&gt;</span><span class="dl">"</span><span class="p">;</span>
          <span class="c1">// Send confirmation email</span>
          <span class="nx">mailer</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span>
              <span class="nx">constants</span><span class="p">.</span><span class="nx">confirmEmails</span><span class="p">.</span><span class="k">from</span><span class="p">,</span>
              <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span>
              <span class="dl">"</span><span class="s2">Confirm Account</span><span class="dl">"</span><span class="p">,</span>
              <span class="nx">html</span>
          <span class="p">).</span><span class="nf">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
              <span class="nx">user</span><span class="p">.</span><span class="nx">isConfirmed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
              <span class="nx">user</span><span class="p">.</span><span class="nx">confirmOTP</span> <span class="o">=</span> <span class="nx">otp</span><span class="p">;</span>
              <span class="c1">// Save user.</span>
              <span class="nx">user</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="nf">function </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
                  <span class="k">if </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span> <span class="p">}</span>
                  <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">successResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span><span class="dl">"</span><span class="s2">Confirm otp sent.</span><span class="dl">"</span><span class="p">);</span>
              <span class="p">});</span>
          <span class="p">});</span>
      <span class="p">}</span><span class="k">else</span><span class="p">{</span>
          <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">unauthorizedResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Account already confirmed.</span><span class="dl">"</span><span class="p">);</span>
      <span class="p">}</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
      <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">unauthorizedResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Specified email not found.</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>Promise function in request often used in <code class="language-plaintext highlighter-rouge">Express</code> to asynchronous request nodejs.</p>
    <h3 id="mailer-function">Mailer function</h3>
    <p>Mailer to send email is support by <code class="language-plaintext highlighter-rouge">nodemailer</code> module. <code class="language-plaintext highlighter-rouge">send</code> function was eported
```js
const nodemailer = require(“nodemailer”);</p>
  </li>
</ul>

<p>// create reusable transporter object using the default SMTP transport
let transporter = nodemailer.createTransport({
    host: process.env.EMAIL_SMTP_HOST,
    port: process.env.EMAIL_SMTP_PORT,
    //secure: process.env.EMAIL_SMTP_SECURE, // lack of ssl commented this. You can uncomment it.
    auth: {
        user: process.env.EMAIL_SMTP_USERNAME,
        pass: process.env.EMAIL_SMTP_PASSWORD
    }
});</p>

<p>exports.send = function (from, to, subject, html)
{
    // send mail with defined transport object
    // visit https://nodemailer.com/ for more options
    return transporter.sendMail({
        from: from, // sender address e.g. no-reply@xyz.com or “Fred Foo 👻” <a href="mailto:foo@example.com">foo@example.com</a>
        to: to, // list of receivers e.g. bar@example.com, baz@example.com
        subject: subject, // Subject line e.g. ‘Hello ✔’
        //text: text, // plain text body e.g. Hello world?
        html: html // html body e.g. ‘<b>Hello world?</b>’
    });
};</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre>### Utily to generate OTP
Generate otp for confirm user request
```js
exports.randomNumber = function (length) {
    var text = "";
    var possible = "123456789";
    for (var i = 0; i &lt; length; i++) {
        var sup = Math.floor(Math.random() * possible.length);
        text += i &gt; 0 &amp;&amp; sup == i ? "0" : possible.charAt(sup);
    }
    return Number(text);
};
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="constants-data">Constants data</h3>
<p>ConfirmEmails from, admin.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="nx">exports</span><span class="p">.</span><span class="nx">constants</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">admin</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">admin</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">email</span><span class="p">:</span> <span class="dl">"</span><span class="s2">admin@admin.com</span><span class="dl">"</span>
    <span class="p">},</span>
    <span class="na">confirmEmails</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">from</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">no-reply@test-app.com</span><span class="dl">"</span>
    <span class="p">}</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="user-model">User model</h3>
<p>User model to query data from monggodb</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">mongoose</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">UserSchema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nc">Schema</span><span class="p">({</span>
    <span class="na">firstName</span><span class="p">:</span> <span class="p">{</span><span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">},</span>
    <span class="na">lastName</span><span class="p">:</span> <span class="p">{</span><span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">},</span>
    <span class="na">email</span><span class="p">:</span> <span class="p">{</span><span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">},</span>
    <span class="na">password</span><span class="p">:</span> <span class="p">{</span><span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">},</span>
    <span class="na">isConfirmed</span><span class="p">:</span> <span class="p">{</span><span class="na">type</span><span class="p">:</span> <span class="nb">Boolean</span><span class="p">,</span> <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">default</span><span class="p">:</span> <span class="mi">0</span><span class="p">},</span>
    <span class="na">confirmOTP</span><span class="p">:</span> <span class="p">{</span><span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="na">required</span><span class="p">:</span><span class="kc">false</span><span class="p">},</span>
    <span class="na">otpTries</span><span class="p">:</span> <span class="p">{</span><span class="na">type</span><span class="p">:</span> <span class="nb">Number</span><span class="p">,</span> <span class="na">required</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span> <span class="na">default</span><span class="p">:</span> <span class="mi">0</span><span class="p">},</span>
    <span class="na">status</span><span class="p">:</span> <span class="p">{</span><span class="na">type</span><span class="p">:</span> <span class="nb">Boolean</span><span class="p">,</span> <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">default</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
<span class="p">},</span> <span class="p">{</span><span class="na">timestamps</span><span class="p">:</span> <span class="kc">true</span><span class="p">});</span>

<span class="c1">// Virtual for user's full name</span>
<span class="nx">UserSchema</span>
    <span class="p">.</span><span class="nf">virtual</span><span class="p">(</span><span class="dl">"</span><span class="s2">fullName</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> </span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>
    <span class="p">});</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nf">model</span><span class="p">(</span><span class="dl">"</span><span class="s2">User</span><span class="dl">"</span><span class="p">,</span> <span class="nx">UserSchema</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="http-server-handle-request-and-response">HTTP server handle request and response</h3>
<pre><code class="language-JS">#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('rest-api-nodejs-mongodb:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port &gt;= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
</code></pre>
<h3 id="book-rest-api-handle">Book rest api handle</h3>
<p>Bookcontroller will handle function as actions: <code class="language-plaintext highlighter-rouge">book list</code>, <code class="language-plaintext highlighter-rouge">book detail</code>, <code class="language-plaintext highlighter-rouge">book store</code>, <code class="language-plaintext highlighter-rouge">book update</code>, and <code class="language-plaintext highlighter-rouge">book delete</code>.</p>
<h4 id="book-controller">Book controller</h4>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">Book</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../models/BookModel</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">body</span><span class="p">,</span><span class="nx">validationResult</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express-validator</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">sanitizeBody</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express-validator</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">apiResponse</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../helpers/apiResponse</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">auth</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../middlewares/jwt</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">mongoose</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">mongoose</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="dl">"</span><span class="s2">useFindAndModify</span><span class="dl">"</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>

<span class="c1">// Book Schema</span>
<span class="kd">function</span> <span class="nf">BookData</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">_id</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">title</span><span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">title</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">description</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">description</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">isbn</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">isbn</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">createdAt</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">createdAt</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 * Book List.
 *
 * @returns {Object}
 */</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">bookList</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nx">auth</span><span class="p">,</span>
    <span class="nf">function </span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="nx">Book</span><span class="p">.</span><span class="nf">find</span><span class="p">({</span><span class="na">user</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">_id</span><span class="p">},</span><span class="dl">"</span><span class="s2">_id title description isbn createdAt</span><span class="dl">"</span><span class="p">).</span><span class="nf">then</span><span class="p">((</span><span class="nx">books</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="nx">books</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
                    <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">successResponseWithData</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Operation success</span><span class="dl">"</span><span class="p">,</span> <span class="nx">books</span><span class="p">);</span>
                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                    <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">successResponseWithData</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Operation success</span><span class="dl">"</span><span class="p">,</span> <span class="p">[]);</span>
                <span class="p">}</span>
            <span class="p">});</span>
        <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//throw error in json response with status 500.</span>
            <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">];</span>

<span class="cm">/**
 * Book Detail.
 *
 * @param {string}      id
 *
 * @returns {Object}
 */</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">bookDetail</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nx">auth</span><span class="p">,</span>
    <span class="nf">function </span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">mongoose</span><span class="p">.</span><span class="nx">Types</span><span class="p">.</span><span class="nx">ObjectId</span><span class="p">.</span><span class="nf">isValid</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">)){</span>
            <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">successResponseWithData</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Operation success</span><span class="dl">"</span><span class="p">,</span> <span class="p">{});</span>
        <span class="p">}</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="nx">Book</span><span class="p">.</span><span class="nf">findOne</span><span class="p">({</span><span class="na">_id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span><span class="na">user</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">_id</span><span class="p">},</span><span class="dl">"</span><span class="s2">_id title description isbn createdAt</span><span class="dl">"</span><span class="p">).</span><span class="nf">then</span><span class="p">((</span><span class="nx">book</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="nx">book</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">){</span>
                    <span class="kd">let</span> <span class="nx">bookData</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BookData</span><span class="p">(</span><span class="nx">book</span><span class="p">);</span>
                    <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">successResponseWithData</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Operation success</span><span class="dl">"</span><span class="p">,</span> <span class="nx">bookData</span><span class="p">);</span>
                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                    <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">successResponseWithData</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Operation success</span><span class="dl">"</span><span class="p">,</span> <span class="p">{});</span>
                <span class="p">}</span>
            <span class="p">});</span>
        <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//throw error in json response with status 500.</span>
            <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">];</span>

<span class="cm">/**
 * Book store.
 *
 * @param {string}      title
 * @param {string}      description
 * @param {string}      isbn
 *
 * @returns {Object}
 */</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">bookStore</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nx">auth</span><span class="p">,</span>
    <span class="nf">body</span><span class="p">(</span><span class="dl">"</span><span class="s2">title</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Title must not be empty.</span><span class="dl">"</span><span class="p">).</span><span class="nf">isLength</span><span class="p">({</span> <span class="na">min</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}).</span><span class="nf">trim</span><span class="p">(),</span>
    <span class="nf">body</span><span class="p">(</span><span class="dl">"</span><span class="s2">description</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Description must not be empty.</span><span class="dl">"</span><span class="p">).</span><span class="nf">isLength</span><span class="p">({</span> <span class="na">min</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}).</span><span class="nf">trim</span><span class="p">(),</span>
    <span class="nf">body</span><span class="p">(</span><span class="dl">"</span><span class="s2">isbn</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">ISBN must not be empty</span><span class="dl">"</span><span class="p">).</span><span class="nf">isLength</span><span class="p">({</span> <span class="na">min</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}).</span><span class="nf">trim</span><span class="p">().</span><span class="nf">custom</span><span class="p">((</span><span class="nx">value</span><span class="p">,{</span><span class="nx">req</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">Book</span><span class="p">.</span><span class="nf">findOne</span><span class="p">({</span><span class="na">isbn</span> <span class="p">:</span> <span class="nx">value</span><span class="p">,</span><span class="na">user</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">_id</span><span class="p">}).</span><span class="nf">then</span><span class="p">(</span><span class="nx">book</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">if </span><span class="p">(</span><span class="nx">book</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nf">reject</span><span class="p">(</span><span class="dl">"</span><span class="s2">Book already exist with this ISBN no.</span><span class="dl">"</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">});</span>
    <span class="p">}),</span>
    <span class="nf">sanitizeBody</span><span class="p">(</span><span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">).</span><span class="nf">escape</span><span class="p">(),</span>
    <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">errors</span> <span class="o">=</span> <span class="nf">validationResult</span><span class="p">(</span><span class="nx">req</span><span class="p">);</span>
            <span class="kd">var</span> <span class="nx">book</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Book</span><span class="p">(</span>
                <span class="p">{</span> <span class="na">title</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span>
                    <span class="na">user</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">,</span>
                    <span class="na">description</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">description</span><span class="p">,</span>
                    <span class="na">isbn</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">isbn</span>
                <span class="p">});</span>

            <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">errors</span><span class="p">.</span><span class="nf">isEmpty</span><span class="p">())</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">validationErrorWithData</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Validation Error.</span><span class="dl">"</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">array</span><span class="p">());</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="c1">//Save book.</span>
                <span class="nx">book</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="nf">function </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">if </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span> <span class="p">}</span>
                    <span class="kd">let</span> <span class="nx">bookData</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BookData</span><span class="p">(</span><span class="nx">book</span><span class="p">);</span>
                    <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">successResponseWithData</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span><span class="dl">"</span><span class="s2">Book add Success.</span><span class="dl">"</span><span class="p">,</span> <span class="nx">bookData</span><span class="p">);</span>
                <span class="p">});</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//throw error in json response with status 500.</span>
            <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">];</span>

<span class="cm">/**
 * Book update.
 *
 * @param {string}      title
 * @param {string}      description
 * @param {string}      isbn
 *
 * @returns {Object}
 */</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">bookUpdate</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nx">auth</span><span class="p">,</span>
    <span class="nf">body</span><span class="p">(</span><span class="dl">"</span><span class="s2">title</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Title must not be empty.</span><span class="dl">"</span><span class="p">).</span><span class="nf">isLength</span><span class="p">({</span> <span class="na">min</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}).</span><span class="nf">trim</span><span class="p">(),</span>
    <span class="nf">body</span><span class="p">(</span><span class="dl">"</span><span class="s2">description</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Description must not be empty.</span><span class="dl">"</span><span class="p">).</span><span class="nf">isLength</span><span class="p">({</span> <span class="na">min</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}).</span><span class="nf">trim</span><span class="p">(),</span>
    <span class="nf">body</span><span class="p">(</span><span class="dl">"</span><span class="s2">isbn</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">ISBN must not be empty</span><span class="dl">"</span><span class="p">).</span><span class="nf">isLength</span><span class="p">({</span> <span class="na">min</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}).</span><span class="nf">trim</span><span class="p">().</span><span class="nf">custom</span><span class="p">((</span><span class="nx">value</span><span class="p">,{</span><span class="nx">req</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">Book</span><span class="p">.</span><span class="nf">findOne</span><span class="p">({</span><span class="na">isbn</span> <span class="p">:</span> <span class="nx">value</span><span class="p">,</span><span class="na">user</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">_id</span><span class="p">,</span> <span class="na">_id</span><span class="p">:</span> <span class="p">{</span> <span class="dl">"</span><span class="s2">$ne</span><span class="dl">"</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span> <span class="p">}}).</span><span class="nf">then</span><span class="p">(</span><span class="nx">book</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">if </span><span class="p">(</span><span class="nx">book</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nf">reject</span><span class="p">(</span><span class="dl">"</span><span class="s2">Book already exist with this ISBN no.</span><span class="dl">"</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">});</span>
    <span class="p">}),</span>
    <span class="nf">sanitizeBody</span><span class="p">(</span><span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">).</span><span class="nf">escape</span><span class="p">(),</span>
    <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">errors</span> <span class="o">=</span> <span class="nf">validationResult</span><span class="p">(</span><span class="nx">req</span><span class="p">);</span>
            <span class="kd">var</span> <span class="nx">book</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Book</span><span class="p">(</span>
                <span class="p">{</span> <span class="na">title</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span>
                    <span class="na">description</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">description</span><span class="p">,</span>
                    <span class="na">isbn</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">isbn</span><span class="p">,</span>
                    <span class="na">_id</span><span class="p">:</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span>
                <span class="p">});</span>

            <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">errors</span><span class="p">.</span><span class="nf">isEmpty</span><span class="p">())</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">validationErrorWithData</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Validation Error.</span><span class="dl">"</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">array</span><span class="p">());</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">mongoose</span><span class="p">.</span><span class="nx">Types</span><span class="p">.</span><span class="nx">ObjectId</span><span class="p">.</span><span class="nf">isValid</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">)){</span>
                    <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">validationErrorWithData</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Invalid Error.</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Invalid ID</span><span class="dl">"</span><span class="p">);</span>
                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                    <span class="nx">Book</span><span class="p">.</span><span class="nf">findById</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nf">function </span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">foundBook</span><span class="p">)</span> <span class="p">{</span>
                        <span class="k">if </span><span class="p">(</span><span class="nx">foundBook</span> <span class="o">===</span> <span class="kc">null</span><span class="p">){</span>
                            <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">notFoundResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span><span class="dl">"</span><span class="s2">Book not exists with this id</span><span class="dl">"</span><span class="p">);</span>
                        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                            <span class="c1">//Check authorized user</span>
                            <span class="k">if</span><span class="p">(</span><span class="nx">foundBook</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nf">toString</span><span class="p">()</span> <span class="o">!==</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">_id</span><span class="p">){</span>
                                <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">unauthorizedResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">You are not authorized to do this operation.</span><span class="dl">"</span><span class="p">);</span>
                            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                                <span class="c1">//update book.</span>
                                <span class="nx">Book</span><span class="p">.</span><span class="nf">findByIdAndUpdate</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">book</span><span class="p">,</span> <span class="p">{},</span><span class="nf">function </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
                                    <span class="k">if </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
                                        <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
                                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                                        <span class="kd">let</span> <span class="nx">bookData</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BookData</span><span class="p">(</span><span class="nx">book</span><span class="p">);</span>
                                        <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">successResponseWithData</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span><span class="dl">"</span><span class="s2">Book update Success.</span><span class="dl">"</span><span class="p">,</span> <span class="nx">bookData</span><span class="p">);</span>
                                    <span class="p">}</span>
                                <span class="p">});</span>
                            <span class="p">}</span>
                        <span class="p">}</span>
                    <span class="p">});</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//throw error in json response with status 500.</span>
            <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">];</span>

<span class="cm">/**
 * Book Delete.
 *
 * @param {string}      id
 *
 * @returns {Object}
 */</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">bookDelete</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nx">auth</span><span class="p">,</span>
    <span class="nf">function </span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">mongoose</span><span class="p">.</span><span class="nx">Types</span><span class="p">.</span><span class="nx">ObjectId</span><span class="p">.</span><span class="nf">isValid</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">)){</span>
            <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">validationErrorWithData</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Invalid Error.</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Invalid ID</span><span class="dl">"</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="nx">Book</span><span class="p">.</span><span class="nf">findById</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nf">function </span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">foundBook</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="nx">foundBook</span> <span class="o">===</span> <span class="kc">null</span><span class="p">){</span>
                    <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">notFoundResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span><span class="dl">"</span><span class="s2">Book not exists with this id</span><span class="dl">"</span><span class="p">);</span>
                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                    <span class="c1">//Check authorized user</span>
                    <span class="k">if</span><span class="p">(</span><span class="nx">foundBook</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nf">toString</span><span class="p">()</span> <span class="o">!==</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">_id</span><span class="p">){</span>
                        <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">unauthorizedResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">You are not authorized to do this operation.</span><span class="dl">"</span><span class="p">);</span>
                    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                        <span class="c1">//delete book.</span>
                        <span class="nx">Book</span><span class="p">.</span><span class="nf">findByIdAndRemove</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span><span class="nf">function </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
                            <span class="k">if </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
                                <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
                            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                                <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">successResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span><span class="dl">"</span><span class="s2">Book delete Success.</span><span class="dl">"</span><span class="p">);</span>
                            <span class="p">}</span>
                        <span class="p">});</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">});</span>
        <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//throw error in json response with status 500.</span>
            <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">];</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Mongodb will manage by <code class="language-plaintext highlighter-rouge">mongoose</code> module.
set mode <code class="language-plaintext highlighter-rouge">useFindAndModify</code>. Create schema</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="c1">// Book Schema</span>
<span class="kd">function</span> <span class="nf">BookData</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">_id</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">title</span><span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">title</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">description</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">description</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">isbn</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">isbn</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">createdAt</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">createdAt</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Book controller require authenticate from middleware <code class="language-plaintext highlighter-rouge">jwt</code> and found user of request. Implement <code class="language-plaintext highlighter-rouge">auth</code> such as a element and export in controller action.
<strong>Book list</strong></p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="nx">exports</span><span class="p">.</span><span class="nx">bookList</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nx">auth</span><span class="p">,</span>
    <span class="nf">function </span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="nx">Book</span><span class="p">.</span><span class="nf">find</span><span class="p">({</span><span class="na">user</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">_id</span><span class="p">},</span><span class="dl">"</span><span class="s2">_id title description isbn createdAt</span><span class="dl">"</span><span class="p">).</span><span class="nf">then</span><span class="p">((</span><span class="nx">books</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="nx">books</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
                    <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">successResponseWithData</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Operation success</span><span class="dl">"</span><span class="p">,</span> <span class="nx">books</span><span class="p">);</span>
                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                    <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">successResponseWithData</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Operation success</span><span class="dl">"</span><span class="p">,</span> <span class="p">[]);</span>
                <span class="p">}</span>
            <span class="p">});</span>
        <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//throw error in json response with status 500.</span>
            <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">];</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><strong>bookDetail</strong></p>
<pre><code class="language-JS">Book.findOne({_id: req.params.id,user: req.user._id},"_id title description isbn createdAt").then((book)=&gt;{
    if(book !== null){
        let bookData = new BookData(book);
        return apiResponse.successResponseWithData(res, "Operation success", bookData);
    }else{
        return apiResponse.successResponseWithData(res, "Operation success", {});
    }
});
</code></pre>
<p>Used promise <code class="language-plaintext highlighter-rouge">Book.findOne({_id: req.params.id,user: req.user._id},"_id title description isbn createdAt").then((book)=&gt;{});</code>. id of book is param of request, and <code class="language-plaintext highlighter-rouge">user</code> is param of request after authenticated.</p>

<p><strong>bookUpdate</strong></p>
<ul>
  <li>params santizied input by function <code class="language-plaintext highlighter-rouge">sanitizeBody("*").escape()</code></li>
  <li>Use <code class="language-plaintext highlighter-rouge">mongoose.Types.ObjectId.isValid(req.params.id)</code> to validate ID in request params.</li>
</ul>

<p><strong>bookDelete</strong></p>
<ul>
  <li>Promise for find and delete book
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="nx">Book</span><span class="p">.</span><span class="nf">findByIdAndRemove</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span><span class="nf">function </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nc">ErrorResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
      <span class="k">return</span> <span class="nx">apiResponse</span><span class="p">.</span><span class="nf">successResponse</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span><span class="dl">"</span><span class="s2">Book delete Success.</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <h3 id="book-model">Book Model</h3>
    <p>```js
var mongoose = require(“mongoose”);</p>
  </li>
</ul>

<p>var Schema = mongoose.Schema;</p>

<p>var BookSchema = new Schema({
    title: {type: String, required: true},
    description: {type: String, required: true},
    isbn: {type: String, required: true},
    user: { type: Schema.ObjectId, ref: “User”, required: true },
}, {timestamps: true});</p>

<p>module.exports = mongoose.model(“Book”, BookSchema);</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre>### Test
- testConfig.js
```js
//During the automated test the env variable, We will set it to "test"
process.env.NODE_ENV = "test";
process.env.MONGODB_URL = "mongodb://127.0.0.1:27017/rest-api-nodejs-mongodb-test";

//Require the dev-dependencies
let chai = require("chai");
let chaiHttp = require("chai-http");
let server = require("../app");
let should = chai.should();
chai.use(chaiHttp);

//Export this to use in multiple files
module.exports = {
    chai: chai,
    server: server,
    should: should
};
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Import necessary module for test. Add these lines before test code.</p>
<pre><code class="language-JS">const { chai, server, should } = require("./testConfig");
const UserModel = require("../models/UserModel");
const BookModel = require("../models/BookModel");
</code></pre>
<ul>
  <li>auth.js
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="nf">describe</span><span class="p">(</span><span class="dl">"</span><span class="s2">Auth</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>

  <span class="c1">// Before each test we empty the database</span>
  <span class="nf">before</span><span class="p">((</span><span class="nx">done</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">UserModel</span><span class="p">.</span><span class="nf">deleteMany</span><span class="p">({},</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nf">done</span><span class="p">();</span>
      <span class="p">});</span>
  <span class="p">});</span>

  <span class="c1">// Prepare data for testing</span>
  <span class="kd">const</span> <span class="nx">testData</span> <span class="o">=</span> <span class="p">{</span>
      <span class="dl">"</span><span class="s2">firstName</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">test</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">lastName</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">testing</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">password</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">Test@123</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">email</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">maitraysuthar@test12345.com</span><span class="dl">"</span>
  <span class="p">};</span>

  <span class="cm">/*
* Test the /POST route
*/</span>
  <span class="nf">describe</span><span class="p">(</span><span class="dl">"</span><span class="s2">/POST Register</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nf">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">It should send validation error for Register</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">chai</span><span class="p">.</span><span class="nf">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
              <span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="dl">"</span><span class="s2">/api/auth/register</span><span class="dl">"</span><span class="p">)</span>
              <span class="p">.</span><span class="nf">send</span><span class="p">({</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span><span class="p">:</span> <span class="nx">testData</span><span class="p">.</span><span class="nx">email</span><span class="p">})</span>
              <span class="p">.</span><span class="nf">end</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                  <span class="nx">res</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="mi">400</span><span class="p">);</span>
                  <span class="nf">done</span><span class="p">();</span>
              <span class="p">});</span>
      <span class="p">});</span>
  <span class="p">});</span>
<span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>book.js</li>
</ul>

<pre><code class="language-JS">describe("Book", () =&gt; {
    //Before each test we empty the database
    before((done) =&gt; {
        BookModel.deleteMany({}, (err) =&gt; {
            done();
        });
    });

    // Prepare data for testing
    const userTestData = {
        "password":"Test@123",
        "email":"maitraysuthar@test12345.com"
    };

    // Prepare data for testing
    const testData = {
        "title":"testing book",
        "description":"testing book desc",
        "isbn":"3214htrff4"
    };

    /*
  * Test the /POST route
  */
    describe("/POST Login", () =&gt; {
        it("it should do user Login for book", (done) =&gt; {
            chai.request(server)
                .post("/api/auth/login")
                .send({"email": userTestData.email,"password": userTestData.password})
                .end((err, res) =&gt; {
                    res.should.have.status(200);
                    res.body.should.have.property("message").eql("Login Success.");
                    userTestData.token = res.body.data.token;
                    done();
                });
        });
    });
});
</code></pre>
<ul>
  <li>app.js
File to configure app and config variables
```JS
var express = require(“express”);
var path = require(“path”);
var cookieParser = require(“cookie-parser”);
var logger = require(“morgan”);
require(“dotenv”).config();
var indexRouter = require(“./routes/index”);
var apiRouter = require(“./routes/api”);
var apiResponse = require(“./helpers/apiResponse”);
var cors = require(“cors”);</li>
</ul>

<p>// DB connection
var MONGODB_URL = process.env.MONGODB_URL;
var mongoose = require(“mongoose”);
mongoose.connect(MONGODB_URL, { useNewUrlParser: true, useUnifiedTopology: true }).then(() =&gt; {
    //don’t show the log when it is test
    if(process.env.NODE_ENV !== “test”) {
        console.log(“Connected to %s”, MONGODB_URL);
        console.log(“App is running … \n”);
        console.log(“Press CTRL + C to stop the process. \n”);
    }
})
    .catch(err =&gt; {
        console.error(“App starting error:”, err.message);
        process.exit(1);
    });
var db = mongoose.connection;</p>

<p>var app = express();</p>

<p>//don’t show the log when it is test
if(process.env.NODE_ENV !== “test”) {
    app.use(logger(“dev”));
}
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, “public”)));</p>

<p>//To allow cross-origin requests
app.use(cors());</p>

<p>//Route Prefixes
app.use(“/”, indexRouter);
app.use(“/api/”, apiRouter);</p>

<p>// throw 404 if URL not found
app.all(“*”, function(req, res) {
    return apiResponse.notFoundResponse(res, “Page not found”);
});</p>

<p>app.use((err, req, res) =&gt; {
    if(err.name == “UnauthorizedError”){
        return apiResponse.unauthorizedResponse(res, err.message);
    }
});</p>

<p>module.exports = app;</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre>- DB configure from monggo DB
```js
// DB connection
var MONGODB_URL = process.env.MONGODB_URL;
var mongoose = require("mongoose");
mongoose.connect(MONGODB_URL, { useNewUrlParser: true, useUnifiedTopology: true }).then(() =&gt; {
    //don't show the log when it is test
    if(process.env.NODE_ENV !== "test") {
        console.log("Connected to %s", MONGODB_URL);
        console.log("App is running ... \n");
        console.log("Press CTRL + C to stop the process. \n");
    }
})
    .catch(err =&gt; {
        console.error("App starting error:", err.message);
        process.exit(1);
    });
var db = mongoose.connection;
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="build-an-http-server">Build an HTTP Server</h3>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">http</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">http</span><span class="dl">'</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span>

<span class="kd">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">createServer</span><span class="p">((</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span>
  <span class="nx">res</span><span class="p">.</span><span class="nf">setHeader</span><span class="p">(</span><span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">text/html</span><span class="dl">'</span><span class="p">)</span>
  <span class="nx">res</span><span class="p">.</span><span class="nf">end</span><span class="p">(</span><span class="dl">'</span><span class="s1">&lt;h1&gt;Hello, World!&lt;/h1&gt;</span><span class="dl">'</span><span class="p">)</span>
<span class="p">})</span>

<span class="nx">server</span><span class="p">.</span><span class="nf">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Server running at port </span><span class="p">${</span><span class="nx">port</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
<span class="p">})</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Let’s analyze it briefly. We include the <code class="language-plaintext highlighter-rouge">http</code> module. We use the module to create an HTTP server. Default port is 3000, the <code class="language-plaintext highlighter-rouge">listen</code> callback function is called.
Whenever a new request is received, the <code class="language-plaintext highlighter-rouge">request</code> event is called, providing two object: a request(an <code class="language-plaintext highlighter-rouge">http.IncomingMessage</code> object) and a response (an <code class="language-plaintext highlighter-rouge">http.ServerResponse</code> object).</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
<span class="nx">res</span><span class="p">.</span><span class="nf">setHeader</span><span class="p">(</span><span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">text/html</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">res</span><span class="p">.</span><span class="nf">end</span><span class="p">(</span><span class="dl">'</span><span class="s1">&lt;h1&gt;Hello, World!&lt;/h1&gt;</span><span class="dl">'</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h2 id="making-http-requests-with-nodejs">Making HTTP requests with Node.js</h2>
<h3 id="get-request">GET request</h3>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">axios</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">axios</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">axios</span>
  <span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://example.com/todos</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`statusCode: </span><span class="p">${</span><span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
  <span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">https</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">https</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">hostname</span><span class="p">:</span> <span class="dl">'</span><span class="s1">example.com</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">port</span><span class="p">:</span> <span class="mi">443</span><span class="p">,</span>
  <span class="na">path</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/todos</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">req</span> <span class="o">=</span> <span class="nx">https</span><span class="p">.</span><span class="nf">request</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="nx">res</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`statusCode: </span><span class="p">${</span><span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>

  <span class="nx">res</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">data</span><span class="dl">'</span><span class="p">,</span> <span class="nx">d</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">process</span><span class="p">.</span><span class="nx">stdout</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="nx">req</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">error</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">req</span><span class="p">.</span><span class="nf">end</span><span class="p">();</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="post-request">Post request</h3>
<p>Similiar to making GET request, you can use Axios library to perform POST request</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">axios</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">axios</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">axios</span>
  <span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://whatever.com/todos</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">todo</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Buy the milk</span><span class="dl">'</span><span class="p">,</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`statusCode: </span><span class="p">${</span><span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
  <span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Or alternative using <code class="language-plaintext highlighter-rouge">https</code> module:</p>
<pre><code class="language-JS">const https = require('https');

const data = JSON.stringify({
  todo: 'Buy the milk',
});

const options = {
  hostname: 'whatever.com',
  port: 443,
  path: '/todos',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': data.length,
  },
};

const req = https.request(options, res =&gt; {
  console.log(`statusCode: ${res.statusCode}`);

  res.on('data', d =&gt; {
    process.stdout.write(d);
  });
});

req.on('error', error =&gt; {
  console.error(error);
});

req.write(data);
req.end();
</code></pre>
<h3 id="put-and-delete">PUT and DELETE</h3>
<p>PUT and DELETE is same with POST and GET method but <code class="language-plaintext highlighter-rouge">method</code> is PUT or DELETE.</p>
<h2 id="get-http-request-body-data-using-nodejs">Get HTTP request body data using Node.js</h2>
<p>If you are using Express, that’s quite simple: use the express.json() middleware which is available is Express v4.16.0 onwards.</p>
<pre><code class="language-JS">const axios = require('axios');
axios.post('https://whatever.com/todos', {
    todo: 'Buy the milk',
});
</code></pre>
<p>This is the matching server side code</p>
<pre><code class="language-JS">const express = require('express');

const app = express();

app.use(
  express.urlencoded({
    extended: true,
  })
);

app.use(express.json());

app.post('/todos', (req, res) =&gt; {
  console.log(req.body.todo);
});
</code></pre>
<p>If you’re not using Express and you want to do this in vanilla Node.js, you need to do a bit more work, of course, as Express abstracts a lot of this for you.</p>
<pre><code class="language-JS">const server = http.createServer((req, res) =&gt; {
  // we can access HTTP headers
  req.on('data', chunk =&gt; {
    console.log(`Data chunk available: ${chunk}`);
  });
  req.on('end', () =&gt; {
    // end of data
  });
});
</code></pre>
<p>So to access the data, assuming we expect to receive a string, we must concatenate the into a string when listening to the stream <code class="language-plaintext highlighter-rouge">data</code>, amd when the stream <code class="language-plaintext highlighter-rouge">end</code>, we parse the string to JSON:</p>
<pre><code class="language-JS">const server = http.createServer(async (req, res) =&gt; {
  const buffers = [];

  for await (const chunk of req) {
    buffers.push(chunk);
  }

  const data = Buffer.concat(buffers).toString();

  console.log(JSON.parse(data).todo); // 'Buy the milk'
  res.end();
});
</code></pre>
<h2 id="nodejs-file-stats">Node.js file stats</h2>
<p>You call it passing a file path, and once Node.js gets the file details it will call the callback function you pass, with 2 parameters: an error message, and the file stats:</p>
<pre><code class="language-JS">const fs = require('fs');
fs.stat('/Users/joe/test.text', (err, stats) =&gt; {
    if (err) {
        console.error(err);
        return;
    }

    stats.isFile();
    stats.isDirectory();
    stats.isSymbolicLink();
    stats.size;
});
</code></pre>
<p>You can use promise-based fsPromises.stat() method offerd by the <code class="language-plaintext highlighter-rouge">fs/promises</code> module if you like:</p>
<pre><code class="language-JS">const fs = require('fs/promises');
async function example() {
    try {
        stats.isFile(); // true
        stats.isDirectory(); // false
        stats.isSymbolicLink(); // false
        stats.size; // 1024000 //= 1MB
    } catch (err) {
        console.log(err);
    }
}

example();
</code></pre>
<h2 id="nodejs-file-paths">Node.js File Paths</h2>
<p>You include this module in your files using</p>
<pre><code class="language-JS">const path = require('path');
const notes = '/users/joe/notes.txt';

path.dirname(notes); // /users/joe
path.basename(notes); // notes.txt
path.extname(notes); // .txt
path.basename(notes, path.extname(notes)); // notes
</code></pre>
<h3 id="working-with-paths">Working with paths</h3>
<pre><code class="language-JS">const name = 'joe';
path.join('/', 'users', name, 'notes.txt'); // '/users/joe/notes.txt'
path.resolve('joe.txt'); // '/Users/joe/joe.txt' if run from my home folder
path.normalize('/users/joe/..//test.txt'); // '/users/test.txt'
</code></pre>
<p>Neither resolve nor normalize will check if the path exists. They just calculate a path based on the information they got.
Check file exists by:</p>
<pre><code class="language-JS">const stats = await fs.stat('/Users/joe/test.txt');
stats.isFile(); // true
stats.isDirectory(); // false
stats.isSymbolicLink(); // false
</code></pre>
<h2 id="reading-files-with-nodejs">Reading files with Node.js</h2>
<p>All three of <code class="language-plaintext highlighter-rouge">fs.readFile()</code>, <code class="language-plaintext highlighter-rouge">fs.readFileSync()</code> and <code class="language-plaintext highlighter-rouge">fsPromises.readFile()</code> read the full content of the file in memory before returning the data.</p>

<p>This means that big files are going to have a major impact on your memory consumption and speed of execution of the program.</p>

<p>In this case, a better option is to read the file content using streams.</p>
<ul>
  <li>fs.readFile
```JS
const fs = require(‘fs’);</li>
</ul>

<p>fs.readFile(‘/Users/joe/test.txt’, ‘utf8’, (err, data) =&gt; {
  if (err) {
    console.error(err);
    return;
  }
  console.log(data);
});</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre>- fs.readFileSync()
```JS
const fs = require('fs');

try {
  const data = fs.readFileSync('/Users/joe/test.txt', 'utf8');
  console.log(data);
} catch (err) {
  console.error(err);
}
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>fsPromises.readFile() and <code class="language-plaintext highlighter-rouge">fs/promises</code> module
```JS
const fs = require(‘fs/promises’);</li>
</ul>

<p>async function example() {
  try {
    const data = await fs.readFile(‘/Users/joe/test.txt’, { encoding: ‘utf8’ });
    console.log(data);
  } catch (err) {
    console.log(err);
  }
}
example();</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre>## Writing files with Node.js
The easiest way to write to files in Node.js is to use the `fs.writeFile()` API.
- fs.writeFile
```JS
const fs = require('fs');

const content = 'Some content!';

fs.writeFile('/Users/joe/test.txt', content, err =&gt; {
  if (err) {
    console.error(err);
  }
  // file written successfully
});
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>fs.writeFileSync()
```JS
const fs = require(‘fs’);</li>
</ul>

<p>const content = ‘Some content!’;</p>

<p>try {
  fs.writeFileSync(‘/Users/joe/test.txt’, content);
  // file written successfully
} catch (err) {
  console.error(err);
}</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre>- fsPromises.writeFile() method offered by the `fs/promises` module:
```JS
const fs = require('fs/promises');

async function example() {
  try {
    const content = 'Some content!';
    await fs.writeFile('/Users/joe/test.txt', content);
  } catch (err) {
    console.log(err);
  }
}
example();
// for modify flag
fs.writeFile('/Users/joe/test.txt', content, { flag: 'a+' }, err =&gt; {});
</pre></td></tr></tbody></table></code></pre></div></div>
<p>The flags you’ll likely use are</p>

<ul>
  <li>r+ open the file for reading and writing</li>
  <li>w+ open the file for reading and writing, positioning the stream at the beginning of the file. The file is created if it does not exist</li>
  <li>a open the file for writing, positioning the stream at the end of the file. The file is created if it does not exist</li>
  <li>a+ open the file for reading and writing, positioning the stream at the end of the file. The file is created if it does not exist
    <h3 id="append-to-a-file">Append to a file</h3>
  </li>
  <li>fs.appendFile()
```JS
const content = ‘Some content!’;</li>
</ul>

<p>fs.appendFile(‘file.log’, content, err =&gt; {
  if (err) {
    console.error(err);
  }
  // done!
});</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre>- fsPromises.appendFile()
```JS
const fs = require('fs/promises');

async function example() {
  try {
    const content = 'Some content!';
    await fs.appendFile('/Users/joe/test.txt', content);
  } catch (err) {
    console.log(err);
  }
}
example();
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="using-streams">Using streams</h3>
<p>All those methods write the full content to the file before returning the control back to your program (in the async version, this means executing the callback)
In this case, a better option is to write the file content using streams.</p>
<h3 id="working-with-folders-in-nodejs">Working with folders in Node.js</h3>
<p>The Node.js fs core module provides many handy methods you can use to work with folders.</p>
<h3 id="check-if-a-folder-exists">Check if a folder exists</h3>
<p>Use <code class="language-plaintext highlighter-rouge">fs.access()</code> (and its promise-based <code class="language-plaintext highlighter-rouge">fsPromises.access()</code> counterpart) to check if the folder exists and Node.js can access it with its permissions.</p>
<pre><code class="language-JS">const fs = require('fs');

const folderName = '/Users/joe/test';

try {
  if (!fs.existsSync(folderName)) {
    fs.mkdirSync(folderName);
  }
} catch (err) {
  console.error(err);
}
</code></pre>
<h3 id="read-the-content-of-a-directory">Read the content of a directory</h3>
<pre><code class="language-JS">const fs = require('fs');
const folderPath = '/Users/joe';
fs.readdirSync(folderPath);
fs.readdirSync(folderPath).map(fileName =&gt; {
  return path.join(folderPath, fileName);
});
const isFile = fileName =&gt; {
  return fs.lstatSync(fileName).isFile();
};

fs.readdirSync(folderPath)
  .map(fileName =&gt; {
    return path.join(folderPath, fileName);
  })
  .filter(isFile);
</code></pre>
<h3 id="rename-a-folder">Rename a folder</h3>
<p><code class="language-plaintext highlighter-rouge">fs.rename()</code> or <code class="language-plaintext highlighter-rouge">fs.renameSync()</code> or <code class="language-plaintext highlighter-rouge">fsPromises.rename()</code>.  The first parameter is the current path, the second the new path:</p>
<pre><code class="language-JS">const fs = require('fs');

fs.rename('/Users/joe', '/Users/roger', err =&gt; {
  if (err) {
    console.error(err);
  }
  // done
});
</code></pre>
<p><code class="language-plaintext highlighter-rouge">fs.renameSync()</code> is synchromous verion</p>
<pre><code class="language-JS">const fs = require('fs');

try {
  fs.renameSync('/Users/joe', '/Users/roger');
} catch (err) {
  console.error(err);
}
</code></pre>
<ul>
  <li><code class="language-plaintext highlighter-rouge">fsPromises.rename()</code> is the promise-based version:
```JS
const fs = require(‘fs/promises’);</li>
</ul>

<p>async function example() {
  try {
    await fs.rename(‘/Users/joe’, ‘/Users/roger’);
  } catch (err) {
    console.log(err);
  }
}
example();</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre>### Remove a folder
Use `fs.rmdir()` or `fs.rmdirSync()` or `fsPromises.rmdir()` to remove a folder.
```JS
const fs = require('fs');

fs.rm(dir, { recursive: true, force: true }, err =&gt; {
  if (err) {
    throw err;
  }

  console.log(`${dir} is deleted!`);
});
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>You can install and make use of the <code class="language-plaintext highlighter-rouge">fs-extra</code> module. It’s a drop-in replacement of the <code class="language-plaintext highlighter-rouge">fs</code> module, which provides more features on top of it.
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>npm <span class="nb">install </span>fs-extra
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>```js
const fs = require(‘fs-extra’);</p>
  </li>
</ul>

<p>const folder = ‘/Users/joe’;</p>

<p>fs.remove(folder, err =&gt; {
  console.error(err);
});
// promise
fs.remove(folder)
  .then(() =&gt; {
    // done
  })
  .catch(err =&gt; {
    console.error(err);
  });
// async/await
async function removeFolder(folder) {
  try {
    await fs.remove(folder);
    // done
  } catch (err) {
    console.error(err);
  }
}</p>

<p>const folder = ‘/Users/joe’;
removeFolder(folder);</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
</pre></td><td class="rouge-code"><pre>## The Node.js fs module
This is core module. When you require module. You can access to all its method, wich include:
- fs.access(): check if the file exists and Node.js can access it with its permissions
- fs.appendFile(): append data to a file. If the file does not exist, it's created
- fs.chmod(): change the permissions of a file specified by the filename passed. Related: fs.lchmod(), fs.fchmod()
- fs.chown(): change the owner and group of a file specified by the filename passed. Related: fs.fchown(), fs.lchown()
- fs.close(): close a file descriptor
- fs.copyFile(): copies a file
- fs.createReadStream(): create a readable file stream
- fs.createWriteStream(): create a writable file stream
- fs.link(): create a new hard link to a file
- fs.mkdir(): create a new folder
- fs.mkdtemp(): create a temporary directory
- fs.open(): opens the file and returns a file descriptor to allow file manipulation
- fs.readdir(): read the contents of a directory
- fs.readFile(): read the content of a file. Related: fs.read()
- fs.readlink(): read the value of a symbolic link
- fs.realpath(): resolve relative file path pointers (., ..) to the full path
- fs.rename(): rename a file or folder
- fs.rmdir(): remove a folder
- fs.stat(): returns the status of the file identified by the filename passed. Related: fs.fstat(), fs.lstat()
- fs.symlink(): create a new symbolic link to a file
- fs.truncate(): truncate to the specified length the file identified by the filename passed. Related: fs.ftruncate()
- fs.unlink(): remove a file or a symbolic link
- fs.unwatchFile(): stop watching for changes on a file
- fs.utimes(): change the timestamp of the file identified by the filename passed. Related: fs.futimes()
- fs.watchFile(): start watching for changes on a file. Related: fs.watch()
- fs.writeFile(): write data to a file. Related: fs.write()
One peculiar thing about the `fs` module is that all the methods are asynchronous by default, but they can also work synchronously by appending `Sync` such as `fs.renameSync`, `fs.writeSync`.
```JS
// Example: Read a file and change its content and read
// it again using callback-based API.
const fs = require('fs');

const fileName = '/Users/joe/test.txt';
fs.readFile(fileName, 'utf8', (err, data) =&gt; {
  if (err) {
    console.log(err);
    return;
  }
  console.log(data);
  const content = 'Some content!';
  fs.writeFile(fileName, content, err2 =&gt; {
    if (err2) {
      console.log(err2);
      return;
    }
    console.log('Wrote some content!');
    fs.readFile(fileName, 'utf8', (err3, data3) =&gt; {
      if (err3) {
        console.log(err3);
        return;
      }
      console.log(data3);
    });
  });
});

</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>for antoher example
```JS
// Example: Read a file and change its content and read
// it again using callback-based API.
const fs = require(‘fs’);</li>
</ul>

<p>const fileName = ‘/Users/joe/test.txt’;
fs.readFile(fileName, ‘utf8’, (err, data) =&gt; {
  if (err) {
    console.log(err);
    return;
  }
  console.log(data);
  const content = ‘Some content!’;
  fs.writeFile(fileName, content, err2 =&gt; {
    if (err2) {
      console.log(err2);
      return;
    }
    console.log(‘Wrote some content!’);
    fs.readFile(fileName, ‘utf8’, (err3, data3) =&gt; {
      if (err3) {
        console.log(err3);
        return;
      }
      console.log(data3);
    });
  });
});</p>

<p>// Example: Read a file and change its content and read
// it again using promise-based API.
const fs = require(‘fs/promises’);</p>

<p>async function example() {
  const fileName = ‘/Users/joe/test.txt’;
  try {
    const data = await fs.readFile(fileName, ‘utf8’);
    console.log(data);
    const content = ‘Some content!’;
    await fs.writeFile(fileName, content);
    console.log(‘Wrote some content!’);
    const newData = await fs.readFile(fileName, ‘utf8’);
    console.log(newData);
  } catch (err) {
    console.log(err);
  }
}
example();</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>### The Node.js os module
This module provides many functions that you can use to retrieve information from the underlying operating system and the computer the program runs on, and interact with it.
```js
const os = require('os');
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>
    <p>os.EOL gives the line delimiter sequence. It’s \n on Linux and macOS, and \r\n on Windows.</p>
  </li>
  <li>
    <p>os.constants.signals tells us all the constants related to handling process signals, like SIGHUP, SIGKILL and so on.</p>
  </li>
  <li>os.constants.errno sets the constants for error reporting, like EADDRINUSE, EOVERFLOW and more.</li>
  <li>os.arch()</li>
  <li>os.cpus()</li>
  <li>os.endianness()</li>
  <li>os.freemen()</li>
  <li>os.homedir()</li>
  <li>os.hostname()</li>
  <li>os.loadavg()</li>
  <li>os.networkInterfaces()</li>
  <li>os.platform()</li>
  <li>os.release()</li>
  <li>os.tmpdir()</li>
  <li>os.totalmem()</li>
  <li>os.type()</li>
  <li>os.uptime()</li>
  <li>os.userInfo()
    <h3 id="the-nodejs-events-module">The Node.js events module</h3>
    <p>The <code class="language-plaintext highlighter-rouge">event</code> module provides us the EventEmitter class, which is key to working with events in Node.js</p>
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">EventEmitter</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">events</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">door</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">EventEmitter</span><span class="p">();</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>The event listener has these in-built events:</p>
  </li>
  <li>newListener when a listener is added</li>
  <li>removeListener when a listener is removed
<strong>emitter.addListener()</strong>
Alias for emitter.on().
<strong>emitter.emit()</strong>
Emits an event. It synchronously calls every listener in the order they were registered.
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">door</span><span class="p">.</span><span class="nf">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">slam</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// emitting the event "slam"</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p><strong>emitter.eventNames()</strong></p>
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">door</span><span class="p">.</span><span class="nf">eventNames</span><span class="p">();</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p><strong>emitter.getMaxListeners()</strong>
Get the maximum amount of listeners one can add to an EventEmitter object, which defaults to 10 but can be increased or lowered by using setMaxListeners()</p>
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">door</span><span class="p">.</span><span class="nf">getMaxListeners</span><span class="p">();</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p><strong>emitter.listenerCount()</strong></p>
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">door</span><span class="p">.</span><span class="nf">listenerCount</span><span class="p">(</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p><strong>emitter.listeners()</strong></p>
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">door</span><span class="p">.</span><span class="nf">listeners</span><span class="p">(</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p><strong>emitter.off()</strong>
Alias for <code class="language-plaintext highlighter-rouge">emitter.removeListener()</code> added in Node.js 10
<strong>emitter.on()</strong>
Adds a callback function that’s called when an event is emitted.</p>
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nx">door</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Door was opened</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p><strong>emitter.once()</strong>
Adds a callback function that’s called when an event is emitted for the first time after registering this. This callback is only going to be called once, never again.
```JS
const EventEmitter = require(‘events’);</p>
  </li>
</ul>

<p>const ee = new EventEmitter();</p>

<p>ee.once(‘my-event’, () =&gt; {
  // call callback function once
});</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre>**emitter.prependListener()**
When you add a listender using `on` or `addListener`, It's added last in the queue of listenders, and called last. Using `preendListener`it's added, added, and called, before other listeners.
**emitter.prependOnceListener()**
When you add a listener using `once`, it's added last in the queue of listeners, and called last. Using `preendOnceListener` it's added, and called, before other listeners.
**emitter.removeAllListeners()**
Removes all listeners of an EventEmitter object listening to a specific event:
```js
door.removeAllListeners('open');
</pre></td></tr></tbody></table></code></pre></div></div>
<p><strong>emitter.removeListener()</strong>
Remove a specific listener. You can do this by saving the callback function to a variable, when added, so you can reference it later:</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">doSomething</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{};</span>
<span class="nx">door</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">,</span> <span class="nx">doSomething</span><span class="p">);</span>
<span class="nx">door</span><span class="p">.</span><span class="nf">removeListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">,</span> <span class="nx">doSomething</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><strong>emitter.setMaxListeners()</strong>
Sets the maximum amount of listeners one can add to an <code class="language-plaintext highlighter-rouge">EventEmitter</code> object, which defaults to 10 but can be increased or lowered.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">door</span><span class="p">.</span><span class="nf">setMaxListeners</span><span class="p">(</span><span class="mi">50</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h2 id="the-nodejs-http-module">The Node.js http module</h2>
<p>The HTTP core module is a key module to Node.js networking.
It can be included using</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">http</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">http</span><span class="dl">'</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="properties">Properties</h3>
<h4 id="httpmethods">http.METHODS</h4>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="rouge-code"><pre><span class="o">&gt;</span> require<span class="o">(</span><span class="s1">'http'</span><span class="o">)</span>.METHODS
<span class="o">[</span> <span class="s1">'ACL'</span>,
  <span class="s1">'BIND'</span>,
  <span class="s1">'CHECKOUT'</span>,
  <span class="s1">'CONNECT'</span>,
  <span class="s1">'COPY'</span>,
  <span class="s1">'DELETE'</span>,
  <span class="s1">'GET'</span>,
  <span class="s1">'HEAD'</span>,
  <span class="s1">'LINK'</span>,
  <span class="s1">'LOCK'</span>,
  <span class="s1">'M-SEARCH'</span>,
  <span class="s1">'MERGE'</span>,
  <span class="s1">'MKACTIVITY'</span>,
  <span class="s1">'MKCALENDAR'</span>,
  <span class="s1">'MKCOL'</span>,
  <span class="s1">'MOVE'</span>,
  <span class="s1">'NOTIFY'</span>,
  <span class="s1">'OPTIONS'</span>,
  <span class="s1">'PATCH'</span>,
  <span class="s1">'POST'</span>,
  <span class="s1">'PROPFIND'</span>,
  <span class="s1">'PROPPATCH'</span>,
  <span class="s1">'PURGE'</span>,
  <span class="s1">'PUT'</span>,
  <span class="s1">'REBIND'</span>,
  <span class="s1">'REPORT'</span>,
  <span class="s1">'SEARCH'</span>,
  <span class="s1">'SUBSCRIBE'</span>,
  <span class="s1">'TRACE'</span>,
  <span class="s1">'UNBIND'</span>,
  <span class="s1">'UNLINK'</span>,
  <span class="s1">'UNLOCK'</span>,
  <span class="s1">'UNSUBSCRIBE'</span> <span class="o">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="httpstatus_codes">http.STATUS_CODES</h4>
<p>This property lists all the HTTP status codes and their description:</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
</pre></td><td class="rouge-code"><pre><span class="o">&gt;</span> require<span class="o">(</span><span class="s1">'http'</span><span class="o">)</span>.STATUS_CODES
<span class="o">{</span> <span class="s1">'100'</span>: <span class="s1">'Continue'</span>,
  <span class="s1">'101'</span>: <span class="s1">'Switching Protocols'</span>,
  <span class="s1">'102'</span>: <span class="s1">'Processing'</span>,
  <span class="s1">'200'</span>: <span class="s1">'OK'</span>,
  <span class="s1">'201'</span>: <span class="s1">'Created'</span>,
  <span class="s1">'202'</span>: <span class="s1">'Accepted'</span>,
  <span class="s1">'203'</span>: <span class="s1">'Non-Authoritative Information'</span>,
  <span class="s1">'204'</span>: <span class="s1">'No Content'</span>,
  <span class="s1">'205'</span>: <span class="s1">'Reset Content'</span>,
  <span class="s1">'206'</span>: <span class="s1">'Partial Content'</span>,
  <span class="s1">'207'</span>: <span class="s1">'Multi-Status'</span>,
  <span class="s1">'208'</span>: <span class="s1">'Already Reported'</span>,
  <span class="s1">'226'</span>: <span class="s1">'IM Used'</span>,
  <span class="s1">'300'</span>: <span class="s1">'Multiple Choices'</span>,
  <span class="s1">'301'</span>: <span class="s1">'Moved Permanently'</span>,
  <span class="s1">'302'</span>: <span class="s1">'Found'</span>,
  <span class="s1">'303'</span>: <span class="s1">'See Other'</span>,
  <span class="s1">'304'</span>: <span class="s1">'Not Modified'</span>,
  <span class="s1">'305'</span>: <span class="s1">'Use Proxy'</span>,
  <span class="s1">'307'</span>: <span class="s1">'Temporary Redirect'</span>,
  <span class="s1">'308'</span>: <span class="s1">'Permanent Redirect'</span>,
  <span class="s1">'400'</span>: <span class="s1">'Bad Request'</span>,
  <span class="s1">'401'</span>: <span class="s1">'Unauthorized'</span>,
  <span class="s1">'402'</span>: <span class="s1">'Payment Required'</span>,
  <span class="s1">'403'</span>: <span class="s1">'Forbidden'</span>,
  <span class="s1">'404'</span>: <span class="s1">'Not Found'</span>,
  <span class="s1">'405'</span>: <span class="s1">'Method Not Allowed'</span>,
  <span class="s1">'406'</span>: <span class="s1">'Not Acceptable'</span>,
  <span class="s1">'407'</span>: <span class="s1">'Proxy Authentication Required'</span>,
  <span class="s1">'408'</span>: <span class="s1">'Request Timeout'</span>,
  <span class="s1">'409'</span>: <span class="s1">'Conflict'</span>,
  <span class="s1">'410'</span>: <span class="s1">'Gone'</span>,
  <span class="s1">'411'</span>: <span class="s1">'Length Required'</span>,
  <span class="s1">'412'</span>: <span class="s1">'Precondition Failed'</span>,
  <span class="s1">'413'</span>: <span class="s1">'Payload Too Large'</span>,
  <span class="s1">'414'</span>: <span class="s1">'URI Too Long'</span>,
  <span class="s1">'415'</span>: <span class="s1">'Unsupported Media Type'</span>,
  <span class="s1">'416'</span>: <span class="s1">'Range Not Satisfiable'</span>,
  <span class="s1">'417'</span>: <span class="s1">'Expectation Failed'</span>,
  <span class="s1">'418'</span>: <span class="s2">"I'm a teapot"</span>,
  <span class="s1">'421'</span>: <span class="s1">'Misdirected Request'</span>,
  <span class="s1">'422'</span>: <span class="s1">'Unprocessable Entity'</span>,
  <span class="s1">'423'</span>: <span class="s1">'Locked'</span>,
  <span class="s1">'424'</span>: <span class="s1">'Failed Dependency'</span>,
  <span class="s1">'425'</span>: <span class="s1">'Unordered Collection'</span>,
  <span class="s1">'426'</span>: <span class="s1">'Upgrade Required'</span>,
  <span class="s1">'428'</span>: <span class="s1">'Precondition Required'</span>,
  <span class="s1">'429'</span>: <span class="s1">'Too Many Requests'</span>,
  <span class="s1">'431'</span>: <span class="s1">'Request Header Fields Too Large'</span>,
  <span class="s1">'451'</span>: <span class="s1">'Unavailable For Legal Reasons'</span>,
  <span class="s1">'500'</span>: <span class="s1">'Internal Server Error'</span>,
  <span class="s1">'501'</span>: <span class="s1">'Not Implemented'</span>,
  <span class="s1">'502'</span>: <span class="s1">'Bad Gateway'</span>,
  <span class="s1">'503'</span>: <span class="s1">'Service Unavailable'</span>,
  <span class="s1">'504'</span>: <span class="s1">'Gateway Timeout'</span>,
  <span class="s1">'505'</span>: <span class="s1">'HTTP Version Not Supported'</span>,
  <span class="s1">'506'</span>: <span class="s1">'Variant Also Negotiates'</span>,
  <span class="s1">'507'</span>: <span class="s1">'Insufficient Storage'</span>,
  <span class="s1">'508'</span>: <span class="s1">'Loop Detected'</span>,
  <span class="s1">'509'</span>: <span class="s1">'Bandwidth Limit Exceeded'</span>,
  <span class="s1">'510'</span>: <span class="s1">'Not Extended'</span>,
  <span class="s1">'511'</span>: <span class="s1">'Network Authentication Required'</span> <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="httpglobalagent">http.globalAgent</h4>
<p>Points to the global instance of the Agent object, which is an instance of the <code class="language-plaintext highlighter-rouge">http.Agent</code> class.
It’s used to manage connections persistence and reuse for HTTP clients, and it’s a key component of Node.js HTTP networking.
More in the <code class="language-plaintext highlighter-rouge">http.Agent</code> class description later on.</p>
<h3 id="methods">Methods</h3>
<h4 id="httpcreateserver">http.createServer()</h4>
<p>Return a new instance of the <code class="language-plaintext highlighter-rouge">http.Server</code> class.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">createServer</span><span class="p">((</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// handle every single request with this callback</span>
<span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="httprequest">http.request()</h4>
<p>Makes an HTTP request to a server, creating an instance of the <code class="language-plaintext highlighter-rouge">http.ClientRequest</code> class.</p>
<h4 id="httpget">http.get()</h4>
<p>Similar to <code class="language-plaintext highlighter-rouge">http.request()</code>, but automatically sets the HTTP method to GET, and calls <code class="language-plaintext highlighter-rouge">req.end()</code> automatically.</p>
<h3 id="classes">Classes</h3>
<p>The HTTP module provides 5 classes:</p>
<ul>
  <li>http.Agent</li>
  <li>http.ClientRequest</li>
  <li>http.Server</li>
  <li>http.ServerResponse</li>
  <li>http.IncomingMessage
    <h4 id="httpagent">http.Agent</h4>
    <p>Node.js creates a global instance of the <code class="language-plaintext highlighter-rouge">http.Agent</code> class to manage connections persistence and reuse for HTTP clients, a key component of Node.js HTTP networking.
This object make sure that every request made to a server is queued and a single socket is reused.
It also maintains a pool of sockets. This is key for performance reasons.</p>
    <h4 id="httpclientrequest">http.ClientRequest</h4>
    <p>An <code class="language-plaintext highlighter-rouge">http.ClientRequest</code> object is created when <code class="language-plaintext highlighter-rouge">http.request()</code> or <code class="language-plaintext highlighter-rouge">http.get()</code> is called.
When a response is received, the <code class="language-plaintext highlighter-rouge">response</code> event is called with response, with an <code class="language-plaintext highlighter-rouge">http.IncomingMessage</code> instance as argument.</p>
    <h4 id="httpserver">http.Server</h4>
    <p>This class is commonly instantiated and returned when creating a new server using <code class="language-plaintext highlighter-rouge">http.createServer()</code>.
Once ypu have a server object, you have access to its methods:</p>
  </li>
  <li>close() stops the serve from accepting new connections</li>
  <li>listen() starts the HTTP server and listens for connections
    <h4 id="httpserverresponse">http.ServerResponse</h4>
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">createServer</span><span class="p">((</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="c1">// res is an http.ServerResponse object</span>
<span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>These methods are used to interact with HTTP headers:</p>
  </li>
  <li>getHeaderNames() get the list of the names of the HTTP headers already set</li>
  <li>getHeaders() get a copy of the HTTP headers already set</li>
  <li>setHeader(‘headername’, value) sets an HTTP header value</li>
  <li>getHeader(‘headername’) gets an HTTP header already set</li>
  <li>removeHeader(‘headername’) removes an HTTP header already set</li>
  <li>hasHeader(‘headername’) return true if the response has that header set</li>
  <li>headersSent() return true if the headers have already been sent to the client
After processing the headers you can send them to the client by calling <code class="language-plaintext highlighter-rouge">response.writeHead()</code>, which accepts the statusCode as the first parameter, the optional status message, and the headers object.
To send data to the client in the response body, you use <code class="language-plaintext highlighter-rouge">write()</code>. It will send buffered data to the HTTP response stream.
If the headers were not sent yet using <code class="language-plaintext highlighter-rouge">response.writeHead()</code>, it will send the headers first, with the status code and message that’s set in the request, which you can edit by setting the <code class="language-plaintext highlighter-rouge">statusCode</code> and <code class="language-plaintext highlighter-rouge">statusMessage</code> properties values:
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">500</span><span class="p">;</span>
<span class="nx">response</span><span class="p">.</span><span class="nx">statusMessage</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Internal Server Error</span><span class="dl">'</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <h4 id="httpincomingmessage">http.IncomingMessage</h4>
    <p>An <code class="language-plaintext highlighter-rouge">http.IncomingMessage</code> object is created by:</p>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">http.Server</code> when listening to the request event
<code class="language-plaintext highlighter-rouge">http.ClientRequest</code> when listening to the response event
It can be used to access the response:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">status</code> using its statusCode and statusMessage methods</li>
  <li><code class="language-plaintext highlighter-rouge">headers</code> using its headers method or rawHeaders</li>
  <li><code class="language-plaintext highlighter-rouge">HTTP</code> method using its method method</li>
  <li>HTTP version using the httpVersion method</li>
  <li>URL using the url method</li>
  <li>underlying socket using the socket method
The data is accessed using streams, since http.IncomingMessage implements the Readable Stream interface.
    <h2 id="nodejs-buffers">Node.js Buffers</h2>
    <h3 id="what-is-a-buffer">What is a buffer?</h3>
    <p>A buffer is an area of memory. Most Javascript developers are much less familiar with this concept compared to programmers using a system programming language (like C, C++, or Go), which interact directly with memory every day.
It represents a fixed-size chunk of memory (can’t be resized) allocated outside of the V8 JavaScript engine.
You can think of a buffer like an array of integers, which each represent a byte of data.
It is implemented by the Node.js Buffer class.</p>
    <h3 id="why-do-we-need-a-buffer">Why do we need a buffer?</h3>
    <p>A buffer is an area of memory. Most javascript developers are much less familiar with this concept, compared to programmers using a system programming, which interact directly with memory every day.
It represents a fixed-size chunk of memory allocated outside of the V8 javascript engine.
It is implemented by the Node.js Buffer class</p>
    <h3 id="why-do-we-need-a-buffer-1">Why do we need a buffer?</h3>
    <p>Buffers were introduced to help developers deal with binary data, in an ecosystem that traditionally only dealt with strings rather than binaries.
Buffers in Node.js are not related to the concept of buffering data. That is what happens when a stream processor receives data faster than it can digest.</p>
    <h3 id="how-to-create-a-buffer">How to create a buffer</h3>
    <p>A buffer is created using the <code class="language-plaintext highlighter-rouge">Buffer.from()</code>, <code class="language-plaintext highlighter-rouge">Buffer.alloc()</code>, and <code class="language-plaintext highlighter-rouge">Buffer.allocUnsafe()</code> methods.</p>
    <pre><code class="language-JS">const buf = Buffer.from('Hey!');
const buf = Buffer.alloc(1024);
const buf = Buffer.allocUnsafe(1024);
</code></pre>
  </li>
  <li>Buffer.from(array)</li>
  <li>Buffer.from(arrayBuffer[, byteOffset[, length]])</li>
  <li>Buffer.from(buffer)</li>
  <li>Buffer.from(string[, encoding])
    <h3 id="using-a-buffer">Using a buffer</h3>
    <p><strong>Access the content of a buffer</strong></p>
    <pre><code class="language-JS">const buf = Buffer.from('Hey!');
console.log(buf[0]); // 72
console.log(buf[1]); // 101
console.log(buf[2]); // 121
const buf = Buffer.alloc(4);
buf.write('Hey!');
const buf = Buffer.from('Hey!');
buf[1] = 111; // o in UTF-8
console.log(buf.toString()); // Hoy!
// Slice a buffer
const buf = Buffer.from('Hey!');
buf.subarray(0).toString(); // Hey!
const slice = buf.subarray(0, 2);
console.log(slice.toString()); // He
buf[1] = 111; // o
console.log(slice.toString()); // Ho
// Copy a buffer
const buf = Buffer.from('Hey!');
const bufcopy = Buffer.alloc(4); // allocate 4 bytes
bufcopy.set(buf);
const buf = Buffer.from('Hey?');
const bufcopy = Buffer.from('Moo!');
bufcopy.set(buf.subarray(1, 3), 1);
console.log(bufcopy.toString()); // 'Mey!'
</code></pre>
    <h3 id="nodejs-streams">Node.js Streams</h3>
    <h4 id="what-are-streams">What are streams</h4>
    <p>Streams are one of the fundamental concepts that power Node.js applications.
They are a way to handle reading/writing files, network communications, or any kind of end-to-end information exchange in an efficient way.
Streams are not a concept unique to Node.js. They were introduced in the Unix operating system decades ago, and programs can interact with each other passing streams through the pipe operator (|).
For example, in the traditional way, when you tell the program to read a file, the file is read into memory, from start to finish, and then you process it.
Using streams you read it piece by piece, processing its content without keeping it all in memory.
The Node.js <code class="language-plaintext highlighter-rouge">stream</code> module provides the foundation upon which all streamng apis are built. All streams are instances of <code class="language-plaintext highlighter-rouge">EventEmitter</code>.</p>
    <h4 id="why-streams">Why streams</h4>
    <p>Streams basically provide two major advantages over using other data handling methods:</p>
  </li>
  <li>Memory efficiency: you don’t need to load large amounts of data in memory before you are able to process it</li>
  <li>Time efficiency: It takes way less time to start processing data, since you can start processing as soon as you have it, rather than waiting till the whole data payload is avaiable
    <h4 id="an-example-of-a-stream">An example of a stream</h4>
    <p>A typical examples is reading files from a disk.
Using the Node.js <code class="language-plaintext highlighter-rouge">fs</code> module, you can read a file, and serve it over HTTP when a new connection is established to your HTTP server:
```JS
const http = require(‘http’);
const fs = require(‘fs’);</p>
  </li>
</ul>

<p>const server = http.createServer(function (req, res) {
  fs.readFile(<code class="language-plaintext highlighter-rouge">${__dirname}/data.txt</code>, (err, data) =&gt; {
    res.end(data);
  });
});
server.listen(3000);</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre>- `readFile()` reads the full contents of the file, and invokes the callback function when it's done.
- `res.end(data)` in the callback will return the file contents to the HTTP client.
If the file is big, the operation will take quite bit of time. Here is the same thing written using streams:
```JS
const http = require('http');
const fs = require('fs');

const server = http.createServer((req, res) =&gt; {
  const stream = fs.createReadStream(`${__dirname}/data.txt`);
  stream.pipe(res);
});
server.listen(3000);
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Instead of waiting until the file is fully read, we start streaming it to the HTTP client as soon as we have a chunk of data ready to be sent.</p>
<h4 id="pipe">pipe()</h4>
<p>The above example uses the line <code class="language-plaintext highlighter-rouge">stream.pipe(res)</code>: the <code class="language-plaintext highlighter-rouge">pipe()</code> method is called on the file stream.
What does this code do? It takes the source, and pipes it into a destication.
You call it on the source stream, so in this case, the file sream is piped to the HTTP response.
The return value of the <code class="language-plaintext highlighter-rouge">pipe()</code> method is the destination stream, which is a very convenient thing that let us chain multiple <code class="language-plaintext highlighter-rouge">pipe()</code> calls, like this:</p>
<pre><code class="language-JS">src.pipe(dest1).pipe(dest2);
// OR
src.pipe(dest1);
dest1.pipe(dest2);
</code></pre>
<h4 id="streams-powered-nodejs-apis">Streams-powered Node.js APIs</h4>
<p>Due to their advantages, many Node.js core modules provide native stream handling capabilities, most notably:</p>

<ul>
  <li>process.stdin returns a stream connected to stdin</li>
  <li>process.stdout returns a stream connected to stdout
process.stderr returns a stream connected to stderr</li>
  <li>fs.createReadStream() creates a readable stream to a file</li>
  <li>fs.createWriteStream() creates a writable stream to a file</li>
  <li>net.connect() initiates a stream-based connection</li>
  <li>http.request() returns an instance of the http.ClientRequest class, which is a writable stream</li>
  <li>zlib.createGzip() compress data using gzip (a compression algorithm) into a stream</li>
  <li>zlib.createGunzip() decompress a gzip stream.</li>
  <li>zlib.createDeflate() compress data using deflate (a compression algorithm) into a stream</li>
  <li>zlib.createInflate() decompress a deflate stream
    <h3 id="different-types-of-streams">Different types of streams</h3>
    <p>There are four classes of streams:</p>
  </li>
  <li>Readable: a stream which could be used for read data from it. In other words, its readonly.</li>
  <li>Writable: a stream which could be used for write data to it. It is writeonly.</li>
  <li>Duplex: a stream which can read and write data, basically its a combination of a Readable and Writable stream.</li>
  <li>Transform: a Duplex stream which reads data, transforms the data, and then writes the transformed data in the desired format.
    <h3 id="how-to-create-a-readable-stream">How to create a readable stream</h3>
    <pre><code class="language-JS">const Stream = require('stream');
readableStream._read = () =&gt; {};
const readableStream = new Stream.Readable({
read() {},
});
readableStream.push('hi!');
readableStream.push('ho!');
</code></pre>
    <h4 id="how-to-get-data-from-a-readable-stream">How to get data from a readable stream</h4>
    <p>```JS
const Stream = require(‘stream’);</p>
  </li>
</ul>

<p>const readableStream = new Stream.Readable({
  read() {},
});
const writableStream = new Stream.Writable();</p>

<p>writableStream._write = (chunk, encoding, next) =&gt; {
  console.log(chunk.toString());
  next();
};</p>

<p>readableStream.pipe(writableStream);</p>

<p>readableStream.push(‘hi!’);
readableStream.push(‘ho!’);</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>You can also consume a readable stream directly, using the `readable` event
```JS
readableStream.on('readable', () =&gt; {
  console.log(readableStream.read());
});
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="how-to-create-a-writable-stream">How to create a writable stream</h3>
<pre><code class="language-JS">const Stream = require('stream');

const writableStream = new Stream.Writable();
writableStream._write = (chunk, encoding, next) =&gt; {
  console.log(chunk.toString());
  next();
};
process.stdin.pipe(writableStream);
</code></pre>
<h4 id="how-to-send-data-to-a-writable-stream">How to send data to a writable stream</h4>
<pre><code class="language-JS">writableStream.write('hey!\n');
</code></pre>
<h4 id="signaling-a-writable-stream-that-you-ended-writing">Signaling a writable stream that you ended writing</h4>
<p>Use the end() method:</p>
<pre><code class="language-JS">const Stream = require('stream');

const readableStream = new Stream.Readable({
  read() {},
});
const writableStream = new Stream.Writable();

writableStream._write = (chunk, encoding, next) =&gt; {
  console.log(chunk.toString());
  next();
};

readableStream.pipe(writableStream);

readableStream.push('hi!');
readableStream.push('ho!');

readableStream.on('close', () =&gt; writableStream.end());
writableStream.on('close', () =&gt; console.log('ended'));

readableStream.destroy();
</code></pre>
<h3 id="how-to-create-a-transform-stream">How to create a transform stream</h3>
<p>We get the Transform stream from the <code class="language-plaintext highlighter-rouge">stream</code> module, and we initialize it and implement the <code class="language-plaintext highlighter-rouge">transform._transform()</code> method.
First create a transform stream object:</p>
<pre><code class="language-JS">const { Transform } = require('stream');
const transformStream = new Transform();
</code></pre>
<p>then implementt <code class="language-plaintext highlighter-rouge">_transform</code>:</p>

<pre><code class="language-JS">transformStream._transform = (chunk, encoding, callback) =&gt; {
  transformStream.push(chunk.toString().toUpperCase());
  callback();
};
</code></pre>
<p>Pipe readable stream:</p>
<pre><code class="language-JS">process.stdin.pipe(transformStream).pipe(process.stdout);
</code></pre>
<h2 id="nodejs-the-difference-between-development-and-production">Node.js, the difference between development and production</h2>
<p>Node.js assumes it’s always running in a development environment. You can signal Node.js that you are running in production by settung the <code class="language-plaintext highlighter-rouge">NODE_ENV=production</code> environment variable.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nb">export </span><span class="nv">NODE_ENV</span><span class="o">=</span>production
<span class="c"># or</span>
<span class="nv">NODE_ENV</span><span class="o">=</span>production node app.js
</pre></td></tr></tbody></table></code></pre></div></div>
<p>In Node.js conditional to handle multiple environments</p>
<pre><code class="language-JS">if (process.env.NODE_ENV === 'development') {
  // ...
}
if (process.env.NODE_ENV === 'production') {
  // ...
}
if (['production', 'staging'].includes(process.env.NODE_ENV)) {
  // ...
}
// OR
if (process.env.NODE_ENV === 'development') {
  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));
}

if (process.env.NODE_ENV === 'production') {
  app.use(express.errorHandler());
}
</code></pre>
<h2 id="error-handling-in-nodejs">Error handling in Node.js</h2>
<h3 id="creating-exceptions">Creating exceptions</h3>
<p>use <code class="language-plaintext highlighter-rouge">throw</code> keyword.</p>
<h3 id="error-objects">Error objects</h3>
<pre><code class="language-JS">throw new Error('Ran out of coffee');
</code></pre>
<p>or</p>
<pre><code class="language-JS">class NotEnoughCoffeeError extends Error {
  // ...
}
throw new NotEnoughCoffeeError();
</code></pre>
<h3 id="handling-exceptions">Handling exceptions</h3>
<p>An exception handler is a try/catch statement.</p>
<pre><code class="language-JS">try {
  // lines of code
} catch (e) {}
</code></pre>
<h3 id="catching-uncaught-exceptions">Catching uncaught exceptions</h3>
<p>To solve this, you listen for the <code class="language-plaintext highlighter-rouge">uncaughtException</code> event on the process object:</p>
<pre><code class="language-JS">process.on('uncaughtException', err =&gt; {
  console.error('There was an uncaught error', err);
  process.exit(1); // mandatory (as per the Node.js docs)
});
</code></pre>
<h3 id="exceptions-with-promises">Exceptions with promises</h3>
<p>Using promises you can chain different operations, and handle errors at the end:</p>
<pre><code class="language-JS">doSomething1()
  .then(doSomething2)
  .then(doSomething3)
  .catch(err =&gt; console.error(err));
</code></pre>
<p>How do you know where the error occurred? You dont really know, but you can handle errors in each of function you call(<code class="language-plaintext highlighter-rouge">doSomethingX</code>), and inside the error handler throw a new error, that’s going to call outside <code class="language-plaintext highlighter-rouge">catch</code> handler:</p>
<pre><code class="language-JS">const doSomething1 = () =&gt; {
  // ...
  try {
    // ...
  } catch (err) {
    // ... handle it locally
    throw new Error(err.message);
  }
  // ...
};
</code></pre>
<p>To be able to handle errors locally without handling them in the function we call, we can break the chain. You can create a function in each <code class="language-plaintext highlighter-rouge">then()</code> and process the exception:</p>
<pre><code class="language-JS">doSomething1()
  .then(() =&gt; {
    return doSomething2().catch(err =&gt; {
      // handle error
      throw err; // break the chain!
    });
  })
  .then(() =&gt; {
    return doSomething3().catch(err =&gt; {
      // handle error
      throw err; // break the chain!
    });
  })
  .catch(err =&gt; console.error(err));
</code></pre>
<h3 id="error-handling-with-asyncawait">Error handling with async/await</h3>
<p>Using async/await, you still need to catch errors, and you do it this way:</p>
<pre><code class="language-JS">async function someFunction() {
  try {
    await someOtherFunction();
  } catch (err) {
    console.error(err.message);
  }
}
</code></pre>
<h2 id="how-to-log-an-object-in-nodejs">How to log an object in Node.js</h2>
<p>When you type <code class="language-plaintext highlighter-rouge">console.log()</code> into a JavaScript program that runs in the browser, that is going to create a nice entry in Browser Console:</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>We don’t have suck luxury when we log something to the console, because that’s going to output the object to the shell if you run the Node.js program manually, or to the log file. You get a string representation of the object.</p>
<pre><code class="language-JS">const obj = {
  name: 'joe',
  age: 35,
  person1: {
    name: 'Tony',
    age: 50,
    person2: {
      name: 'Albert',
      age: 21,
      person3: {
        name: 'Peter',
        age: 23,
      },
    },
  },
};
console.log(obj);
// pretty way to print
console.log(JSON.stringify(obj, null, 2));
require('util').inspect.defaultOptions.depth = null;
console.log(obj);
</code></pre>
<p>If you don’t want to touch any kinds of defaultOptions, a perfect alternative is console.dir.</p>
<pre><code class="language-JS">// `depth` tells util.inspect() how many times to recurse while formatting the object, default is 2
console.dir(obj, {
  depth: 10,
});

// ...or pass `null` to recurse indefinitely
console.dir(obj, {
  depth: null,
});
// %o tells console.log() to string-format and log obj in its place
console.log('%o', obj);
</code></pre>
<h2 id="nodejs-with-typescript">Node.js with TypeScript</h2>
<h3 id="what-is-typescript">What is TypeScript</h3>
<p>TypeScript is a very popular open-source language maintained and developed by Microsoft, it’s loved and used by a lot of software developers around the world.
Basically, it’s a superset of javascript that adds new capabilities to the language. Most notable addition are static tupe definitions, something that is not present in plain Javascript. Thanks to types, it’s possible, for example, to declare what king of arguments we are expecting and what is returned really powerful tool and opens new world of possibilities in javascript projects. It makes our code more secure and robust by preventing a lot of bugs before code is even shipped - it catches problems during writing the code and integrates wonderfully with code editors like Visual Studio Code.
We can talk about other TypeScript benefits later, let’s see some examples now!</p>
<h3 id="examples">Examples</h3>
<p>Take a look at this code snippet and then we can unpack it together:</p>
<pre><code class="language-JS">type User = {
  name: string;
  age: number;
};

function isAdult(user: User): boolean {
  return user.age &gt;= 18;
}

const justine: User = {
  name: 'Justine',
  age: 23,
};

const isJustineAnAdult: boolean = isAdult(justine);
</code></pre>
<p>First part with type keyword is responsible for declaring our custom type of objects representing users. Later we utilize this newly created type to create function <code class="language-plaintext highlighter-rouge">isAdult</code> that accepts one argument of type User and returns boolean. After this we create justine, our example data that can be used for calling previously defined function. Finally, we create new variable with information whether justine is an adult or not.
There are additional things about this example that you should know. Firstly, if we would not comply with declared types, TypeScript would alarm us that something is wrong and prevent misuse. Secondly, not everything must be typed explicitly - TypeScript is very smart and can deduce types for us. For example, variable isJustineAnAdult would be of type boolean even if we didn’t type it explicitly or justine would be valid argument for our function even if we didn’t declare this variable as of User type.
Okay, so we have some TypeScript code. Now how do we run it?
First thing to do is to install TypeScript in our project:</p>
<pre><code class="language-JS">npm i -D typescript
npx tsc example.ts
</code></pre>
<p>This command will result in a new file named example.js that we can run using Node.js. Now when we know how to compile and run TypeScript code let’s see TypeScript bug-preventing capabilities in action!</p>

<p>This is how we will modify our code:</p>
<pre><code class="language-JS">type User = {
  name: string;
  age: number;
};

function isAdult(user: User): boolean {
  return user.age &gt;= 18;
}

const justine: User = {
  name: 'Justine',
  age: 'Secret!',
};

const isJustineAnAdult: string = isAdult(justine, "I shouldn't be here!");
</code></pre>
<p>And this is what TypeScript has to say about this:</p>
<pre><code class="language-SH">example.ts:12:3 - error TS2322: Type 'string' is not assignable to type 'number'.

12   age: "Secret!",
     ~~~

  example.ts:3:3
    3   age: number;
        ~~~
    The expected type comes from property 'age' which is declared here on type 'User'

example.ts:15:7 - error TS2322: Type 'boolean' is not assignable to type 'string'.

15 const isJustineAnAdult: string = isAdult(justine, "I shouldn't be here!");
         ~~~~~~~~~~~~~~~~

example.ts:15:51 - error TS2554: Expected 1 arguments, but got 2.

15 const isJustineAnAdult: string = isAdult(justine, "I shouldn't be here!");
                                                     ~~~~~~~~~~~~~~~~~~~~~~


Found 3 errors.
</code></pre>
<h3 id="more-about-typescript">More about TypeScript</h3>
<p>Typescript offers a whole lot of greate mechanisms like interfaces, classes, ulity types and so on. Also, on bigger projects you can declare your TypeScript compiler configuration in a separate file and granulary adjust how it works, how strict it is and where it stores compiled files for example. You can read more about all this awesome stuff in <a href="https://www.typescriptlang.org/docs">the offcial TypeScript.docs</a>
Some of the other benefits of TypeScript that are worth mentioning are that it can be adopted progressively, it helps making code more readable and understanable and it allows developers to use modern language features while shipping code for older Node.js versions.</p>
<h3 id="typescript-in-the-nodejs-world">TypeScript in the Node.js world</h3>
<p>TypeScript is well-establised in the Node.js world and used by many companies, open-sources projects tools and frameworks, Some of the notable examples of open-source projects using TypeScript are:</p>
<ul>
  <li>NestJS - robust and fully-featured framework that makes creating scalable and well-architected systems easy and pleasant</li>
  <li>TypeORM - great ORM influenced by other well-known tools from other languages like Hibernate, Doctrine or Entity Framework</li>
  <li>Prisma - next-generation ORM featuring a declarative data model, generated migrations and fully type-safe database queries</li>
  <li>RxJS - widely used library for reactive programming</li>
  <li>AdonisJS - A fully featured web framework with Node.js</li>
  <li>FoalTs - The Elegant Nodejs Framework
And many, many more great projects… Maybe even your next one!
    <h2 id="asynchronous-flow-control">Asynchronous flow control</h2>
    <p>At its core, JavaScript is designed to be non-blocking on the “main” thread, this is where views are rendered. You can imagine the importance of this in the browser. When the main thread becomes blocked it results in the infamous “freezing” that end users dread, and no other events can be dispatched resulting in the loss of data acquisition, for example.
This creates some unique constraints that only a functional style of programming can cure. This is where callbacks come in to the picture.</p>
  </li>
</ul>

<p>However, callbacks can become challenging to handle in more complicated procedures. This often results in “callback hell” where multiple nested functions with callbacks make the code more challenging to read, debug, organize, etc.</p>
<pre><code class="language-JS">async1(function (input, result1) {
  async2(function (result2) {
    async3(function (result3) {
      async4(function (result4) {
        async5(function (output) {
          // do something with output
        });
      });
    });
  });
});
</code></pre>
<p>Of course, in real life there would most likely be additional lines of code to handle result1, result2, etc., thus, the length and complexity of this issue usually results in code that looks much more messy than the example above.
This is where functions come in to great use. More complex operations are made up of many functions:</p>
<ol>
  <li>initiator style / input</li>
  <li>middleware</li>
  <li>terminator
The “initiator style / input” is the first function in the sequence. This function will accept the original input, if any, for the operation. The operation is an executable series of functions, and the original input will primarily be:</li>
  <li>variables in a global environment</li>
  <li>direct invocation with or without arguments</li>
  <li>values obtained by file system or network requests
A middleware function will return another function, and a terminator function will invoke the callback. The following illustrates the flow to network or file system requests. Here the latency is 0 because all these values are available in memory.
```JS
function final(someInput, callback) {
  callback(<code class="language-plaintext highlighter-rouge">${someInput} and terminated by executing callback </code>);
}</li>
</ol>

<p>function middleware(someInput, callback) {
  return final(<code class="language-plaintext highlighter-rouge">${someInput} touched by middleware </code>, callback);
}</p>

<p>function initiate() {
  const someInput = ‘hello this is a function ‘;
  middleware(someInput, function (result) {
    console.log(result);
    // requires callback to <code class="language-plaintext highlighter-rouge">return</code> result
  });
}</p>

<p>initiate();</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre>### State management
Functions may or may not be state dependent. State dependency aries when the input or other variable of a function relies on an outside function.
In this way there are two primary strategies for state management:
1. passing in variables directly to a function, and
2. acquiring a variable value from a cache, session, file, database, network, or other outside source.
Note, I did not mention global variable. Managing state with global variables is often a sloppy anti-pattern that make it difficult or impossible to guarantee state. Global variables in complex programs should be avoided when possible.
### Control flow
If an object is available in memory, iteration is possible, and there will not be a change to control flow:
```JS
function getSong() {
  let _song = '';
  let i = 100;
  for (i; i &gt; 0; i -= 1) {
    _song += `${i} beers on the wall, you take one down and pass it around, ${
      i - 1
    } bottles of beer on the wall\n`;
    if (i === 1) {
      _song += "Hey let's get some more beer";
    }
  }

  return _song;
}

function singSong(_song) {
  if (!_song) throw new Error("song is '' empty, FEED ME A SONG!");
  console.log(_song);
}

const song = getSong();
// this will work
singSong(song);
</pre></td></tr></tbody></table></code></pre></div></div>
<p>However, if the data exists outside of memory the iteration will no longer work:</p>
<pre><code class="language-JS">function getSong() {
  let _song = '';
  let i = 100;
  for (i; i &gt; 0; i -= 1) {
    /* eslint-disable no-loop-func */
    setTimeout(function () {
      _song += `${i} beers on the wall, you take one down and pass it around, ${
        i - 1
      } bottles of beer on the wall\n`;
      if (i === 1) {
        _song += "Hey let's get some more beer";
      }
    }, 0);
    /* eslint-enable no-loop-func */
  }

  return _song;
}

function singSong(_song) {
  if (!_song) throw new Error("song is '' empty, FEED ME A SONG!");
  console.log(_song);
}

const song = getSong('beer');
// this will not work
singSong(song);
// Uncaught Error: song is '' empty, FEED ME A SONG!
</code></pre>
<p>You will be able to perform almost all of your operations with the following 3 patterns:</p>
<ol>
  <li>In series: functions will be executed in a strict sequential order, this one is most similar to <code class="language-plaintext highlighter-rouge">for</code> loops:
```JS
// operations defined elsewhere and ready to execute
const operations = [
  { func: function1, args: args1 },
  { func: function2, args: args2 },
  { func: function3, args: args3 },
];</li>
</ol>

<p>function executeFunctionWithArgs(operation, callback) {
  // executes function
  const { args, func } = operation;
  func(args, callback);
}</p>

<p>function serialProcedure(operation) {
  if (!operation) process.exit(0); // finished
  executeFunctionWithArgs(operation, function (result) {
    // continue AFTER callback
    serialProcedure(operations.shift());
  });
}</p>

<p>serialProcedure(operations.shift());</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
</pre></td><td class="rouge-code"><pre>2. Full parallel: when ordering is not an issue, such as emailing a list of 1,000,000 email recipients.
```JS
let count = 0;
let success = 0;
const failed = [];
const recipients = [
  { name: 'Bart', email: 'bart@tld' },
  { name: 'Marge', email: 'marge@tld' },
  { name: 'Homer', email: 'homer@tld' },
  { name: 'Lisa', email: 'lisa@tld' },
  { name: 'Maggie', email: 'maggie@tld' },
];

function dispatch(recipient, callback) {
  // `sendEmail` is a hypothetical SMTP client
  sendMail(
    {
      subject: 'Dinner tonight',
      message: 'We have lots of cabbage on the plate. You coming?',
      smtp: recipient.email,
    },
    callback
  );
}

function final(result) {
  console.log(`Result: ${result.count} attempts \
      &amp; ${result.success} succeeded emails`);
  if (result.failed.length)
    console.log(`Failed to send to: \
        \n${result.failed.join('\n')}\n`);
}

recipients.forEach(function (recipient) {
  dispatch(recipient, function (err) {
    if (!err) {
      success += 1;
    } else {
      failed.push(recipient.name);
    }
    count += 1;

    if (count === recipients.length) {
      final({
        count,
        success,
        failed,
      });
    }
  });
});
</pre></td></tr></tbody></table></code></pre></div></div>
<ol>
  <li>Limited parallel: parallel with limit, such as successfully emailing 1,000,000 recipients from a list of 10E7 users.
```JS
let successCount = 0;</li>
</ol>

<p>function final() {
  console.log(<code class="language-plaintext highlighter-rouge">dispatched ${successCount} emails</code>);
  console.log(‘finished’);
}</p>

<p>function dispatch(recipient, callback) {
  // <code class="language-plaintext highlighter-rouge">sendEmail</code> is a hypothetical SMTP client
  sendMail(
    {
      subject: ‘Dinner tonight’,
      message: ‘We have lots of cabbage on the plate. You coming?’,
      smtp: recipient.email,
    },
    callback
  );
}</p>

<p>function sendOneMillionEmailsOnly() {
  getListOfTenMillionGreatEmails(function (err, bigList) {
    if (err) throw err;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre>function serial(recipient) {
  if (!recipient || successCount &gt;= 1000000) return final();
  dispatch(recipient, function (_err) {
    if (!_err) successCount += 1;
    serial(bigList.shift());
  });
}

serial(bigList.shift());   }); }
</pre></td></tr></tbody></table></code></pre></div></div>

<p>sendOneMillionEmailsOnly();</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre>Each has its own use cases, benefits, and issues you can experiement and read about in more detail. Most importanly, remember to modularize your operations and use callbacks! If you feel any doubt, treat everything as if it were middleware!
## Node.js with WebAssembly
WebAssembly is a high-performance assembly-like language that can be compiled from a myriad of languages including C/C++, Rust, and AssemblyScript. As of right now, it is supported by Chrome, Firefox, Safari, Edge, and Node.js!
The WebAssembly specification details two file formats, a binary format called a WebAssembly Module with a .wasm extension and corresponding text representation called WebAssembly Text format with a .wat extension.
### Key Concepts
- Module - A compiled WebAssembly binary, ie a .wasm file.
- Memory - A resizable ArrayBuffer.
- Table - A resizable typed array of references not stored in Memory.
- Instance - An instantiation of a Module with its Memory, Table, and variables.
```JS
console.log(WebAssembly);
/*
Object [WebAssembly] {
  compile: [Function: compile],
  validate: [Function: validate],
  instantiate: [Function: instantiate]
}
*/
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="generating-webassembly-modules">Generating WebAssembly Modules</h3>
<p>There are multiple methods available to generate WebAssembly binary files including:</p>

<ul>
  <li>Writing WebAssembly (.wat) by hand and converting to binary format using tools such as wabt</li>
  <li>Using emscripten with a C/C++ application</li>
  <li>Using wasm-pack with a Rust application</li>
  <li>Using AssemblyScript if you prefer a TypeScript-like experience
    <blockquote>
      <p><em>Some of these tools generate not only the binary file, but the JavaScript “glue” code and corresponding HTML files to run in the browser.</em></p>
      <h3 id="how-to-use-it">How to use it</h3>
      <p>Once you have a WebAssembly module, you can use the Node.js WebAssembly object to instantiate it.
```JS
// Assume add.wasm file exists that contains a single function adding 2 provided arguments
const fs = require(‘fs’);</p>
    </blockquote>
  </li>
</ul>

<p>const wasmBuffer = fs.readFileSync(‘/path/to/add.wasm’);
WebAssembly.instantiate(wasmBuffer).then(wasmModule =&gt; {
  // Exported function live under instance.exports
  const { add } = wasmModule.instance.exports;
  const sum = add(5, 6);
  console.log(sum); // Outputs: 11
});
```</p>
<h3 id="interacting-with-the-os">Interacting with the OS</h3>
<p>WebAssembly modules cannot directly access OS functionality on its own. A third-party tool Wasmtime can be used to access this functionality. <a href="https://docs.wasmtime.dev/">Wasmtime</a> utilizes the <a href="https://wasi.dev/">WASI</a> API to access the OS functionality.</p>

<h3 id="resources">Resources</h3>
<ul>
  <li><a href="https://webassembly.org/">General WebAssembly Information</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/WebAssembly">MDN Docs</a></li>
  <li><a href="https://webassembly.github.io/spec/core/text/index.html">Write WebAssembly by hand</a></li>
</ul>]]></content><author><name>Leo đẹp trai</name></author><category term="documents" /><category term="concept" /><category term="tutorials" /><category term="nodejs" /><category term="node.js" /><category term="javascript" /><category term="js" /><category term="node" /><category term="emitt" /><summary type="html"><![CDATA[NodeJS - Concept Node.js is an open-source and cross platform javascript runtime environment. It is a popular tool for almost any kind of project! NodeJS is javascript on the server, built from v8 engine used to read, parse javascript code and executed necessary action. NodeJs i a non blocking event based IO and run on a single thread process. Event loop is constanly running process that monitors the callback queue and the call stack. The process will continously check the call stack, and if the call stack is empty, push the next function from the callback queue to the stack. If there is nothing in the callback queue, nothing will happen. Runs the V8 javascript engine, the core of Google Chrome, outside of browser. This allows Node.js to be very performant Single thread for every request provides a set of asynchronous I/O primitives using non-blocking paradigms, making blocking behaviour the exception rather than the norm. Reading network, database, file system: resume the operation when response is comeback AdonisJS, Egg.js, Express, Fastify, featherJs, Gastby, hapi, koa, loopback.io, meteor, micro, nestjs, nextjs, NX, Remix, Sapper, socker.io, strapi.]]></summary></entry><entry><title type="html">gRPC – An RPC library and framework</title><link href="https://zmerrychristmas.github.io/posts/grpc-an-rpc-library-and-framework/" rel="alternate" type="text/html" title="gRPC – An RPC library and framework" /><published>2022-05-10T00:00:00+07:00</published><updated>2022-05-10T00:00:00+07:00</updated><id>https://zmerrychristmas.github.io/posts/grpc-an-rpc-library-and-framework</id><content type="html" xml:base="https://zmerrychristmas.github.io/posts/grpc-an-rpc-library-and-framework/"><![CDATA[]]></content><author><name>Leo đẹp trai</name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">How to create ecommerce website use Laravel 9, VueJs, Docker, Supervisord, Brooadcast and Redis Queue (part 1)</title><link href="https://zmerrychristmas.github.io/posts/how-to-create-ecommerce-website-use-laravel-9-vuejs-docker-supervisord-brooadcast-and-redis-queue-part-1/" rel="alternate" type="text/html" title="How to create ecommerce website use Laravel 9, VueJs, Docker, Supervisord, Brooadcast and Redis Queue (part 1)" /><published>2022-05-09T00:00:00+07:00</published><updated>2022-05-09T00:46:31+07:00</updated><id>https://zmerrychristmas.github.io/posts/how-to-create-ecommerce-website-use-laravel-9-vuejs-docker-supervisord-brooadcast-and-redis-queue-part-1</id><content type="html" xml:base="https://zmerrychristmas.github.io/posts/how-to-create-ecommerce-website-use-laravel-9-vuejs-docker-supervisord-brooadcast-and-redis-queue-part-1/"><![CDATA[<h1 id="introdution">Introdution</h1>
<p>Create an E-Commerce website with laravel 9 and VueJs :</p>
<ul>
  <li>Dockerize setup all in one</li>
  <li>API integration.</li>
  <li>Redis for queue job in concurrency request.</li>
  <li>Supervisor manage queue job(Laravel horizon).</li>
  <li>Laravel Broadcast event to observe status of serve and update to client.</li>
  <li>Deploy website to AWS EC2.</li>
</ul>

<p>Checkout source code on my <a href="https://github.com/zmerrychristmas/Ecommerce-website-by-Laravel-and-VueJs-api-integration-with-event-handle">git</a></p>

<h1 id="part-1-install">Part 1 Install</h1>

<h2 id="dockerize-setup-all-in-one">Dockerize setup all in one</h2>

<h2 id="docker-install">Docker Install</h2>

<h2 id="laravel-with-vuejs-redis-supervisod-and-horizon-install">Laravel with VueJs, Redis, Supervisod, and Horizon install</h2>

<h2 id="redis-install">Redis Install</h2>

<h2 id="pusher-install">Pusher Install</h2>

<h2 id="complete-dockerfile-and-yml-file">Complete Dockerfile and .yml file</h2>
<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
</pre></td><td class="rouge-code"><pre><span class="k">FROM</span><span class="s"> php:8.0-fpm</span>
 
<span class="c"># Copy composer.lock and composer.json into the working directory</span>
<span class="k">COPY</span><span class="s"> composer.lock composer.json /var/www/html/</span>
 
<span class="c"># Set working directory</span>
<span class="k">WORKDIR</span><span class="s"> /var/www/html/</span>
 
<span class="c"># Install dependencies for the operating system software</span>
<span class="k">RUN </span>apt-get update <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="se">\
</span>    build-essential <span class="se">\
</span>    libpng-dev <span class="se">\
</span>    libjpeg62-turbo-dev <span class="se">\
</span>    libfreetype6-dev <span class="se">\
</span>    locales <span class="se">\
</span>    zip <span class="se">\
</span>    jpegoptim optipng pngquant gifsicle <span class="se">\
</span>    vim <span class="se">\
</span>    libzip-dev <span class="se">\
</span>    unzip <span class="se">\
</span>    git <span class="se">\
</span>    libonig-dev <span class="se">\
</span>    curl <span class="se">\
</span>    build-essential <span class="se">\
</span>    openssl <span class="se">\
</span>    libssl-dev curl <span class="se">\
</span>    supervisor <span class="se">\
</span>    software-properties-common 
 
<span class="k">RUN </span>groupadd dev
<span class="c"># node install</span>

<span class="k">ENV</span><span class="s"> NODE_VERSION=15.14.0</span>
<span class="k">RUN </span>curl <span class="nt">-o-</span> https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
<span class="k">ENV</span><span class="s"> NVM_DIR=/usr/local/nvm/.nvm</span>
<span class="k">RUN </span><span class="nb">mkdir</span> /usr/local/nvm
<span class="k">RUN </span><span class="nb">mkdir</span> /usr/local/node
<span class="k">RUN </span><span class="nb">chown</span> <span class="nt">-R</span> root:dev /usr/local/nvm
<span class="k">RUN </span><span class="nb">chmod</span> <span class="nt">-R</span> 775 /usr/local/nvm
<span class="k">RUN </span><span class="nb">chown</span> <span class="nt">-R</span> root:dev /usr/local/node
<span class="k">RUN </span><span class="nb">chmod</span> <span class="nt">-R</span> 775 /usr/local/node
<span class="k">RUN </span><span class="nb">cp</span> <span class="nt">-R</span> /root/.nvm/ /usr/local/nvm/
<span class="k">ENV</span><span class="s"> NVM_DIR=/usr/local/nvm/.nvm</span>
<span class="k">RUN </span><span class="nb">export </span><span class="nv">NVM_DIR</span><span class="o">=</span>/usr/local/nvm/.nvm
<span class="k">RUN </span><span class="nb">.</span> <span class="s2">"/usr/local/nvm/.nvm/nvm.sh"</span> <span class="o">&amp;&amp;</span> nvm <span class="nb">install</span> <span class="k">${</span><span class="nv">NODE_VERSION</span><span class="k">}</span>
<span class="k">RUN </span><span class="nb">.</span> <span class="s2">"/usr/local/nvm/.nvm/nvm.sh"</span> <span class="o">&amp;&amp;</span> nvm use v<span class="k">${</span><span class="nv">NODE_VERSION</span><span class="k">}</span>
<span class="k">RUN </span><span class="nb">.</span> <span class="s2">"/usr/local/nvm/.nvm/nvm.sh"</span> <span class="o">&amp;&amp;</span> nvm <span class="nb">alias </span>default v<span class="k">${</span><span class="nv">NODE_VERSION</span><span class="k">}</span>
<span class="k">ENV</span><span class="s"> PATH="/usr/local/nvm/.nvm/versions/node/v${NODE_VERSION}/bin/:${PATH}"</span>
<span class="k">RUN </span>node <span class="nt">--version</span>
<span class="k">RUN </span>npm <span class="nt">--version</span>


<span class="c"># Clear cache</span>
<span class="k">RUN </span>apt-get clean <span class="o">&amp;&amp;</span> <span class="nb">rm</span> <span class="nt">-rf</span> /var/lib/apt/lists/<span class="k">*</span>
 
<span class="c"># Install extensions for php</span>
<span class="k">RUN </span>docker-php-ext-install pdo_mysql mbstring zip exif pcntl 
<span class="k">RUN </span>docker-php-ext-configure gd <span class="nt">--with-freetype</span> <span class="nt">--with-jpeg</span>
<span class="k">RUN </span>docker-php-ext-install gd
<span class="k">RUN </span>pecl <span class="nb">install </span>redis <span class="se">\
</span>    <span class="o">&amp;&amp;</span> docker-php-ext-enable redis
 
<span class="c"># Install composer (php package manager)</span>
<span class="k">RUN </span>curl <span class="nt">-sS</span> https://getcomposer.org/installer | php <span class="nt">--</span> <span class="nt">--install-dir</span><span class="o">=</span>/usr/local/bin <span class="nt">--filename</span><span class="o">=</span>composer
 
<span class="c"># Copy existing application directory contents to the working directory</span>
<span class="k">COPY</span><span class="s"> . /var/www/html</span>

<span class="k">ENV</span><span class="s"> ENABLE_CRONTAB 1</span>
<span class="k">ENV</span><span class="s"> ENABLE_HORIZON 1</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["sh", "/var/www/html/docker-entrypoint.sh"]</span>

<span class="k">COPY</span><span class="s"> ./supervisor.d/*.* /etc/supervisor/conf.d/</span>

<span class="k">RUN </span>composer <span class="nb">install</span>
<span class="k">RUN </span>composer dump-autoload
<span class="k">RUN </span><span class="nb">chmod </span>777 install.sh

<span class="k">RUN </span><span class="o">[</span><span class="s2">"/bin/bash"</span>, <span class="s2">"-c"</span>, <span class="s2">"./install.sh"</span><span class="o">]</span>

<span class="c"># Assign permissions of the working directory to the www-data user</span>
<span class="k">RUN </span><span class="nb">chown</span> <span class="nt">-R</span> www-data:www-data <span class="se">\
</span>        /var/www/html/storage <span class="se">\
</span>        /var/www/html/bootstrap/cache
<span class="k">RUN </span><span class="nb">chmod</span> <span class="nt">-R</span> 777 /var/www/html/storage

<span class="k">EXPOSE</span><span class="s"> 9000</span>

<span class="k">CMD</span><span class="s"> supervisord -n -c /etc/supervisor/supervisord.conf</span>

<span class="c"># Expose port 9000 and start php-fpm server (for FastCGI Process Manager)</span>
<span class="c"># CMD ["php-fpm"]</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>Service distributed by <code class="language-plaintext highlighter-rouge">docker-compose.yml</code></p>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
</pre></td><td class="rouge-code"><pre><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">2.0'</span>
<span class="na">services</span><span class="pi">:</span>
 
  <span class="c1">#PHP Service</span>
  <span class="na">app</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span>
      <span class="na">context</span><span class="pi">:</span> <span class="s">.</span>
      <span class="na">dockerfile</span><span class="pi">:</span> <span class="s">Dockerfile</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">cloudsigma.com/php</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">app</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>
    <span class="na">tty</span><span class="pi">:</span> <span class="kc">true</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">SERVICE_NAME</span><span class="pi">:</span> <span class="s">app</span>
      <span class="na">SERVICE_TAGS</span><span class="pi">:</span> <span class="s">dev</span>
    <span class="na">working_dir</span><span class="pi">:</span> <span class="s">/var/www/html/</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./:/var/www/html/</span>
      <span class="pi">-</span> <span class="s">./php/laravel.ini:/usr/local/etc/php/conf.d/laravel.ini</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">app-network</span>
 
  <span class="c1">#Nginx Service</span>
  <span class="na">webserver</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">nginx:alpine</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">webserver</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>
    <span class="na">tty</span><span class="pi">:</span> <span class="kc">true</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">80:80"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">443:443"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./:/var/www/html/</span>
      <span class="pi">-</span> <span class="s">./nginx/conf.d/:/etc/nginx/conf.d/</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">app-network</span>
 
  <span class="c1">#MySQL Service</span>
  <span class="na">db</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">mysql:5.7.32</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">db</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>
    <span class="na">tty</span><span class="pi">:</span> <span class="kc">true</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">3306:3306"</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">MYSQL_DATABASE</span><span class="pi">:</span> <span class="s">lecommerce</span>
      <span class="na">MYSQL_ROOT_PASSWORD</span><span class="pi">:</span> <span class="m">123456</span>
      <span class="na">SERVICE_TAGS</span><span class="pi">:</span> <span class="s">dev</span>
      <span class="na">SERVICE_NAME</span><span class="pi">:</span> <span class="s">mysql</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">dbdata:/var/lib/mysql/</span>
      <span class="pi">-</span> <span class="s">./mysql/my.cnf:/etc/mysql/my.cnf</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">app-network</span>
  <span class="na">redis</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">redis:alpine</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">redis</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">6379:6379"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">cache_data:/data</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">app-network</span>
<span class="c1">#Docker Networks</span>
<span class="na">networks</span><span class="pi">:</span>
  <span class="na">app-network</span><span class="pi">:</span>
    <span class="na">driver</span><span class="pi">:</span> <span class="s">bridge</span>
<span class="c1">#Volumes</span>
<span class="na">volumes</span><span class="pi">:</span>
  <span class="na">dbdata</span><span class="pi">:</span>
    <span class="na">driver</span><span class="pi">:</span> <span class="s">local</span>
  <span class="na">cache_data</span><span class="pi">:</span>
    <span class="na">driver</span><span class="pi">:</span> <span class="s">local</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">docker-entrypoint.sh</code></p>

<p>Introduction of Docker ENTRYPOINT. Docker entrypoint is a Dockerfile directive or instruction that is used to specify the executable which should run when a container is started from a Docker image. It has two forms, the first one is the ‘exec’ form and the second one is the ‘shell’ form.
I was used a PHP-FPM based image, this file was useful when use Ubuntu image or deploy to Linux based system:</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="c">#!/bin/sh</span>
<span class="nb">set</span> <span class="nt">-e</span>

<span class="c"># Enable Laravel schedule</span>
<span class="k">if</span> <span class="o">[[</span> <span class="s2">"</span><span class="k">${</span><span class="nv">ENABLE_CRONTAB</span><span class="k">:-</span><span class="nv">0</span><span class="k">}</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"1"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then  
  </span><span class="nb">echo</span> <span class="s2">"* * * * * php /var/www/html/artisan schedule:run &gt;&gt; /dev/null 2&gt;&amp;1"</span> <span class="o">&gt;&gt;</span> /etc/crontabs/www-data
<span class="k">fi

</span><span class="nb">exec</span> <span class="s2">"</span><span class="nv">$@</span><span class="s2">"</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="part-2">Part 2</h2>]]></content><author><name>Leo đẹp trai</name></author><summary type="html"><![CDATA[Introdution Create an E-Commerce website with laravel 9 and VueJs : Dockerize setup all in one API integration. Redis for queue job in concurrency request. Supervisor manage queue job(Laravel horizon). Laravel Broadcast event to observe status of serve and update to client. Deploy website to AWS EC2.]]></summary></entry><entry><title type="html">Decoupling Ruby on Rails: Delegation vs Dependency Injection</title><link href="https://zmerrychristmas.github.io/posts/decoupling-ruby-on-rails-delegation-vs-dependency-injection/" rel="alternate" type="text/html" title="Decoupling Ruby on Rails: Delegation vs Dependency Injection" /><published>2022-04-16T00:00:00+07:00</published><updated>2022-05-07T18:58:13+07:00</updated><id>https://zmerrychristmas.github.io/posts/decoupling-ruby-on-rails-delegation-vs-dependency-injection</id><content type="html" xml:base="https://zmerrychristmas.github.io/posts/decoupling-ruby-on-rails-delegation-vs-dependency-injection/"><![CDATA[<h1 id="delegation--dependency-injection">Delegation &amp;&amp; Dependency Injection</h1>
<h2 id="delegation">Delegation</h2>
<p>Ruby’s standard library provides us SimpleDelegator as an easy way to implement the decorator pattern. You pass in your object to the constructor, and then any method calls to the delegator are forwarded to your object.
E.g:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">PrawnWrapper</span> <span class="o">&lt;</span> <span class="no">SimpleDelegator</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="ss">document: </span><span class="kp">nil</span><span class="p">)</span>
    <span class="n">document</span> <span class="o">||=</span> <span class="no">Prawn</span><span class="o">::</span><span class="no">Document</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="o">...</span><span class="p">)</span>
    <span class="k">super</span><span class="p">(</span><span class="n">document</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>We can then update our reports to inherit from this class, and they will still function the same as before, using the default document created in our initializer. The magic happens when we use this in our overview report:</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">OverviewReport</span> <span class="o">&lt;</span> <span class="no">PrawnWrapper</span>
  <span class="o">...</span>
  <span class="k">def</span> <span class="nf">render</span>
    <span class="n">sales</span> <span class="o">=</span> <span class="no">SaleReport</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="o">...</span><span class="p">,</span> <span class="ss">document: </span><span class="nb">self</span><span class="p">)</span>
    <span class="n">sales</span><span class="p">.</span><span class="nf">sales_table</span>
    <span class="n">costs</span> <span class="o">=</span> <span class="no">CostReport</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="o">...</span><span class="p">,</span> <span class="ss">document: </span><span class="nb">self</span><span class="p">)</span>
    <span class="n">costs</span><span class="p">.</span><span class="nf">costs_pie_chart</span>
    <span class="o">...</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>we have essentially made it as if SalesReport is now a subclass of OverviewReport. In our case, this means that all the calls to prawn’s API now go <code class="language-plaintext highlighter-rouge">SalesReport -&gt; OverviewReport -&gt; Prawn::Document</code>.</p>
<h3 id="how-simpledelegator-works-deletegation-as-services">How SimpleDelegator Works: deletegation as services</h3>
<p>The way SimpleDelegator works under the hood is basically to use Ruby’s <code class="language-plaintext highlighter-rouge">method_missing</code> functionality to forward method calls to another object.</p>

<p>So SimpleDelegator (or a subclass of it) receives a method call. If it implements that method, great; it will execute it just as any other object would. However, it if does not have that method defined, then it will hit method_missing. method_missing will then attempt to call that method on the object given to its constructor.</p>
<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="nb">require</span> <span class="s1">'simple_delegator'</span>
<span class="k">class</span> <span class="nc">Thing</span>
  <span class="k">def</span> <span class="nf">one</span>
    <span class="s1">'one'</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">two</span>
    <span class="s1">'two'</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">ThingDecorator</span> <span class="o">&lt;</span> <span class="no">SimpleDelegator</span>
  <span class="k">def</span> <span class="nf">two</span>
    <span class="s1">'three!'</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">ThingDecorator</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="no">Thing</span><span class="p">.</span><span class="nf">new</span><span class="p">).</span><span class="nf">one</span> <span class="c1">#=&gt; "one"</span>
<span class="no">ThingDecorator</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="no">Thing</span><span class="p">.</span><span class="nf">new</span><span class="p">).</span><span class="nf">two</span> <span class="c1">#=&gt; "three!"</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<blockquote>
  <p>The key difference: SimpleDelegator takes the object <strong>it will delegate to as an argument in its constructor</strong>. This means we can pass in different objects at runtime.</p>
</blockquote>

<p>This is what allows use to redirect the calls to a prawn object in Solution 2 above. If we call a single report, the prawn calls go to a new document created in the constructor. The overview report, however, can change this so that calls to prawn are forwarded to its document.</p>
<h3 id="delegate-in-active-record">Delegate in Active Record</h3>
<p>Forward methods or attributes from class to subclass</p>
<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Greeter</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="k">def</span> <span class="nf">hello</span>
    <span class="s1">'hello'</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">goodbye</span>
    <span class="s1">'goodbye'</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Foo</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:greeter</span>
  <span class="n">delegate</span> <span class="ss">:hello</span><span class="p">,</span> <span class="ss">to: :greeter</span>
<span class="k">end</span>

<span class="no">Foo</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">hello</span>   <span class="c1"># =&gt; "hello"</span>
<span class="no">Foo</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">goodbye</span> <span class="c1"># =&gt; NoMethodError: undefined method `goodbye' for #&lt;Foo:0x1af30c&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h2 id="dependency-injectiondi">Dependency Injection(DI)</h2>
<h3 id="concept">Concept</h3>
<p>In software engineering, dependency injection is a design pattern in which an object receives other objects that it depends on. A form of inversion of control, dependency injection aims to separate the concerns of constructing objects and using them, leading to loosely coupled programs.[1][2][3] The pattern ensures that an object which wants to use a given service should not have to know how to construct those services. Instead, the receiving object (or ‘client’) is provided with its dependencies by external code (an ‘injector’), which it is not aware of.[4] Dependency injection solves the following problems:[5]</p>

<ol>
  <li>How can a class be independent from the creation of the objects it depends on?</li>
  <li>How can an application, and the objects it uses support different configurations?</li>
  <li>How can the behavior of a piece of code be changed without editing it directly?</li>
  <li>Fundamentally, dependency injection consists of passing parameters to a method.</li>
  <li>As mentioned previously, one common solution to this kind of problem is to refactor the code to use Dependency Injection. That is, rather than having all these reports call methods on self, we will instead pass in our PDF document as an argument.</li>
</ol>

<h3 id="dependency-injection-in-services">Dependency injection in services</h3>
<p>This would give us something more like:</p>
<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">CostReport</span> <span class="o">&lt;</span> <span class="no">Prawn</span><span class="o">::</span><span class="no">Document</span>
<span class="o">...</span>
  <span class="k">def</span> <span class="nf">title</span><span class="p">(</span><span class="n">pdf</span> <span class="o">=</span> <span class="nb">self</span><span class="p">)</span>
    <span class="n">pdf</span><span class="p">.</span><span class="nf">text</span> <span class="s2">"Cost Report"</span>
    <span class="n">pdf</span><span class="p">.</span><span class="nf">move_down</span> <span class="mi">20</span>
    <span class="o">...</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>This works, but there is some overhead here. For one thing, every single drawing method now has to take the pdf argument, and every single call to prawn now has to go through this pdf argument.</p>

<p>Dependency injection has some benefits: it pushes us toward <strong>decoupled components</strong> in our system and allows us to pass in mocks or stubs to make unit testing easier.</p>

<p>However, we are not reaping the rewards of these benefits in our scenario. We are already strongly coupled to the prawn API, so <code class="language-plaintext highlighter-rouge">changing to a different PDF library</code> would almost certainly require an entire rewrite of the code.</p>

<p>Testing is also not a big concern here, because in our case testing generated PDF reports with automated tests is too cumbersome to be worthwhile.</p>

<h2 id="delegation-and-dependency-injection">Delegation and Dependency Injection</h2>
<p>I want to mention, when Developer need to implement Dependency Injection in Rails is make something double and couple because It’s likely we want to create multiple services different and less couple with base class used While Ruby on Rails is every where we can fine or define an Object and we spent manage effort with each class services.
So it less use than delegation.
Let think about a Document class want to define a method to render a report. By DI we mush define a method with parameter is Interface represent of class handling services.
But in delegate we make a less couple but still maintain connection between two class, by passing a method from other class to use in this class. This behavious is same but one is Rails define and support, one is design pattern so we can choose to use an approach with each use case.</p>

<p>Use Case when DI is always better: Declare services with long time developement but need behavious we wanted, So we can boot a class use DI when bootstrap a service so give a best performance while delegate is must require the clarify of other class method and this required a check behavious: input and output before using delegate.</p>]]></content><author><name>Leo đẹp trai</name></author><category term="Fullstack" /><category term="Backend" /><category term="ruby" /><category term="solid" /><category term="dependency" /><category term="rails" /><category term="oop" /><summary type="html"><![CDATA[Delegation &amp;&amp; Dependency Injection Delegation Ruby’s standard library provides us SimpleDelegator as an easy way to implement the decorator pattern. You pass in your object to the constructor, and then any method calls to the delegator are forwarded to your object. E.g: 1 2 3 4 5 6 class PrawnWrapper &lt; SimpleDelegator def initialize(document: nil) document ||= Prawn::Document.new(...) super(document) end end We can then update our reports to inherit from this class, and they will still function the same as before, using the default document created in our initializer. The magic happens when we use this in our overview report: 1 2 3 4 5 6 7 8 9 10 class OverviewReport &lt; PrawnWrapper ... def render sales = SaleReport.new(..., document: self) sales.sales_table costs = CostReport.new(..., document: self) costs.costs_pie_chart ... end end we have essentially made it as if SalesReport is now a subclass of OverviewReport. In our case, this means that all the calls to prawn’s API now go SalesReport -&gt; OverviewReport -&gt; Prawn::Document. How SimpleDelegator Works: deletegation as services The way SimpleDelegator works under the hood is basically to use Ruby’s method_missing functionality to forward method calls to another object.]]></summary></entry></feed>